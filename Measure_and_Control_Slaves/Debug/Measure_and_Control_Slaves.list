
Measure_and_Control_Slaves.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005878  08005878  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005878  08005878  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005878  08005878  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000005c  080058dc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  080058dc  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed17  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f45  00000000  00000000  0002eddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00030d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c35  00000000  00000000  00031c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ede  00000000  00000000  0003289d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c52  00000000  00000000  0004a77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc1d  00000000  00000000  0005c3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049b0  00000000  00000000  000e8fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ed99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005614 	.word	0x08005614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005614 	.word	0x08005614

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);


int main(void)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b097      	sub	sp, #92	; 0x5c
 8000160:	af02      	add	r7, sp, #8
    HAL_Init();
 8000162:	f000 ff8d 	bl	8001080 <HAL_Init>

    SystemClock_Config();
 8000166:	f000 fccb 	bl	8000b00 <SystemClock_Config>

    MX_GPIO_Init();
 800016a:	f000 fdad 	bl	8000cc8 <MX_GPIO_Init>

    MX_I2C1_Init();
 800016e:	f000 fd7d 	bl	8000c6c <MX_I2C1_Init>

    MX_TIM1_Init();
 8000172:	f000 fd07 	bl	8000b84 <MX_TIM1_Init>
    MX_TIM2_Init();
 8000176:	f000 fd2b 	bl	8000bd0 <MX_TIM2_Init>
    HAL_TIM_Base_Start(&htim1);
 800017a:	4845      	ldr	r0, [pc, #276]	; (8000290 <main+0x134>)
 800017c:	f003 f834 	bl	80031e8 <HAL_TIM_Base_Start>

    HAL_TIM_Base_Start_IT(&htim2);
 8000180:	4844      	ldr	r0, [pc, #272]	; (8000294 <main+0x138>)
 8000182:	f003 f87b 	bl	800327c <HAL_TIM_Base_Start_IT>

    MX_USART1_UART_Init();
 8000186:	f000 fd47 	bl	8000c18 <MX_USART1_UART_Init>
    HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800018a:	2201      	movs	r2, #1
 800018c:	4942      	ldr	r1, [pc, #264]	; (8000298 <main+0x13c>)
 800018e:	4843      	ldr	r0, [pc, #268]	; (800029c <main+0x140>)
 8000190:	f003 fb39 	bl	8003806 <HAL_UART_Receive_IT>

    DS3231_Time ds3231;
    DS3231_Init(&ds3231, &hi2c1);
 8000194:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000198:	4941      	ldr	r1, [pc, #260]	; (80002a0 <main+0x144>)
 800019a:	4618      	mov	r0, r3
 800019c:	f000 f930 	bl	8000400 <DS3231_Init>

    while (1)
    {
		if (is_Time_set) {
 80001a0:	4b40      	ldr	r3, [pc, #256]	; (80002a4 <main+0x148>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d00f      	beq.n	80001c8 <main+0x6c>
			is_Time_set = 0;
 80001a8:	4b3e      	ldr	r3, [pc, #248]	; (80002a4 <main+0x148>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
			// Thiết lập giờ, phút, giây hiện tại
			DS3231_SetTime(&ds3231, setHour, setMin, setSec);
 80001ae:	4b3e      	ldr	r3, [pc, #248]	; (80002a8 <main+0x14c>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	b2d9      	uxtb	r1, r3
 80001b4:	4b3d      	ldr	r3, [pc, #244]	; (80002ac <main+0x150>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	b2da      	uxtb	r2, r3
 80001ba:	4b3d      	ldr	r3, [pc, #244]	; (80002b0 <main+0x154>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80001c4:	f000 f929 	bl	800041a <DS3231_SetTime>
		}

		if (is_Date_set) {
 80001c8:	4b3a      	ldr	r3, [pc, #232]	; (80002b4 <main+0x158>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d014      	beq.n	80001fa <main+0x9e>
			is_Date_set = 0;
 80001d0:	4b38      	ldr	r3, [pc, #224]	; (80002b4 <main+0x158>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
			// Thiết lập thứ, ngày, tháng, năm hiện tại
			DS3231_SetDate(&ds3231, setDay, setDate, setMonth, setYear);
 80001d6:	4b38      	ldr	r3, [pc, #224]	; (80002b8 <main+0x15c>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	b2d9      	uxtb	r1, r3
 80001dc:	4b37      	ldr	r3, [pc, #220]	; (80002bc <main+0x160>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	4b37      	ldr	r3, [pc, #220]	; (80002c0 <main+0x164>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	b2dc      	uxtb	r4, r3
 80001e8:	4b36      	ldr	r3, [pc, #216]	; (80002c4 <main+0x168>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	4623      	mov	r3, r4
 80001f6:	f000 f962 	bl	80004be <DS3231_SetDate>
		}

		char buffer[50];
		DS3231_GetTime(&ds3231);
 80001fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f937 	bl	8000472 <DS3231_GetTime>
		DS3231_GetDate(&ds3231);
 8000204:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f98c 	bl	8000526 <DS3231_GetDate>

		// Gửi dữ liệu thứ, ngày, tháng, năm lên GUI
		sprintf(buffer, "D%01d/%02d/%02d/20%02dE", ds3231.Day, ds3231.Date,
 800020e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000212:	4619      	mov	r1, r3
 8000214:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000218:	461c      	mov	r4, r3
				ds3231.Month, ds3231.Year);
 800021a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800021e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
		sprintf(buffer, "D%01d/%02d/%02d/20%02dE", ds3231.Day, ds3231.Date,
 8000222:	4638      	mov	r0, r7
 8000224:	9201      	str	r2, [sp, #4]
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	4623      	mov	r3, r4
 800022a:	460a      	mov	r2, r1
 800022c:	4926      	ldr	r1, [pc, #152]	; (80002c8 <main+0x16c>)
 800022e:	f004 f88f 	bl	8004350 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 8000232:	463b      	mov	r3, r7
 8000234:	4618      	mov	r0, r3
 8000236:	f7ff ff89 	bl	800014c <strlen>
 800023a:	4603      	mov	r3, r0
 800023c:	b29a      	uxth	r2, r3
 800023e:	4639      	mov	r1, r7
 8000240:	f04f 33ff 	mov.w	r3, #4294967295
 8000244:	4815      	ldr	r0, [pc, #84]	; (800029c <main+0x140>)
 8000246:	f003 fa5b 	bl	8003700 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		HAL_Delay(500);
 800024a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800024e:	f000 ff79 	bl	8001144 <HAL_Delay>

		// Gửi dữ liệu giờ, phút, giây lên GUI
		sprintf(buffer, "T%02d:%02d:%02dM", ds3231.Hour, ds3231.Min,
 8000252:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000256:	461a      	mov	r2, r3
 8000258:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800025c:	4619      	mov	r1, r3
				ds3231.Sec);
 800025e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
		sprintf(buffer, "T%02d:%02d:%02dM", ds3231.Hour, ds3231.Min,
 8000262:	4638      	mov	r0, r7
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	460b      	mov	r3, r1
 8000268:	4918      	ldr	r1, [pc, #96]	; (80002cc <main+0x170>)
 800026a:	f004 f871 	bl	8004350 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 800026e:	463b      	mov	r3, r7
 8000270:	4618      	mov	r0, r3
 8000272:	f7ff ff6b 	bl	800014c <strlen>
 8000276:	4603      	mov	r3, r0
 8000278:	b29a      	uxth	r2, r3
 800027a:	4639      	mov	r1, r7
 800027c:	f04f 33ff 	mov.w	r3, #4294967295
 8000280:	4806      	ldr	r0, [pc, #24]	; (800029c <main+0x140>)
 8000282:	f003 fa3d 	bl	8003700 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		HAL_Delay(500);
 8000286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800028a:	f000 ff5b 	bl	8001144 <HAL_Delay>
    {
 800028e:	e787      	b.n	80001a0 <main+0x44>
 8000290:	2000009c 	.word	0x2000009c
 8000294:	200000e4 	.word	0x200000e4
 8000298:	200001c8 	.word	0x200001c8
 800029c:	2000012c 	.word	0x2000012c
 80002a0:	20000174 	.word	0x20000174
 80002a4:	20000094 	.word	0x20000094
 80002a8:	20000080 	.word	0x20000080
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	20000078 	.word	0x20000078
 80002b4:	20000098 	.word	0x20000098
 80002b8:	20000088 	.word	0x20000088
 80002bc:	20000084 	.word	0x20000084
 80002c0:	2000008c 	.word	0x2000008c
 80002c4:	20000090 	.word	0x20000090
 80002c8:	0800562c 	.word	0x0800562c
 80002cc:	08005644 	.word	0x08005644

080002d0 <I2C_Write_Time>:
    }
}


static void I2C_Write_Time(DS3231_Time *DS3231) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af04      	add	r7, sp, #16
 80002d6:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Write(DS3231->I2C, DS3231_ADDR, 0, I2C_MEMADD_SIZE_8BIT, DS3231->TxTimeBuff, 3, 1000);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	6818      	ldr	r0, [r3, #0]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	330b      	adds	r3, #11
 80002e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002e4:	9202      	str	r2, [sp, #8]
 80002e6:	2203      	movs	r2, #3
 80002e8:	9201      	str	r2, [sp, #4]
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2301      	movs	r3, #1
 80002ee:	2200      	movs	r2, #0
 80002f0:	21d0      	movs	r1, #208	; 0xd0
 80002f2:	f001 fc03 	bl	8001afc <HAL_I2C_Mem_Write>
}
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <I2C_Read_Time>:

static void I2C_Read_Time(DS3231_Time *DS3231) {
 80002fe:	b580      	push	{r7, lr}
 8000300:	b086      	sub	sp, #24
 8000302:	af04      	add	r7, sp, #16
 8000304:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Read(DS3231->I2C, DS3231_ADDR, 0, I2C_MEMADD_SIZE_8BIT, DS3231->RxTimeBuff, 3, 1000);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	330e      	adds	r3, #14
 800030e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000312:	9202      	str	r2, [sp, #8]
 8000314:	2203      	movs	r2, #3
 8000316:	9201      	str	r2, [sp, #4]
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	2301      	movs	r3, #1
 800031c:	2200      	movs	r2, #0
 800031e:	21d0      	movs	r1, #208	; 0xd0
 8000320:	f001 fce6 	bl	8001cf0 <HAL_I2C_Mem_Read>
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <I2C_Write_Date>:

static void I2C_Write_Date(DS3231_Time *DS3231) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af04      	add	r7, sp, #16
 8000332:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Write(DS3231->I2C, DS3231_ADDR, 3, I2C_MEMADD_SIZE_8BIT, DS3231->TxDateBuff, 4, 1000);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6818      	ldr	r0, [r3, #0]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3311      	adds	r3, #17
 800033c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000340:	9202      	str	r2, [sp, #8]
 8000342:	2204      	movs	r2, #4
 8000344:	9201      	str	r2, [sp, #4]
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	2301      	movs	r3, #1
 800034a:	2203      	movs	r2, #3
 800034c:	21d0      	movs	r1, #208	; 0xd0
 800034e:	f001 fbd5 	bl	8001afc <HAL_I2C_Mem_Write>
}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <I2C_Read_Date>:

static void I2C_Read_Date(DS3231_Time *DS3231) {
 800035a:	b580      	push	{r7, lr}
 800035c:	b086      	sub	sp, #24
 800035e:	af04      	add	r7, sp, #16
 8000360:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Read(DS3231->I2C, DS3231_ADDR, 3, I2C_MEMADD_SIZE_8BIT, DS3231->RxDateBuff, 4, 1000);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6818      	ldr	r0, [r3, #0]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3315      	adds	r3, #21
 800036a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800036e:	9202      	str	r2, [sp, #8]
 8000370:	2204      	movs	r2, #4
 8000372:	9201      	str	r2, [sp, #4]
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2301      	movs	r3, #1
 8000378:	2203      	movs	r2, #3
 800037a:	21d0      	movs	r1, #208	; 0xd0
 800037c:	f001 fcb8 	bl	8001cf0 <HAL_I2C_Mem_Read>
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <BCD_DEC>:

static uint8_t BCD_DEC(uint8_t data) {
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
    return (data >> 4) * 10 + (data & 0x0F);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	091b      	lsrs	r3, r3, #4
 8000396:	b2db      	uxtb	r3, r3
 8000398:	461a      	mov	r2, r3
 800039a:	0092      	lsls	r2, r2, #2
 800039c:	4413      	add	r3, r2
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	4413      	add	r3, r2
 80003ac:	b2db      	uxtb	r3, r3
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <DEC_BCD>:

static uint8_t DEC_BCD(uint8_t data) {
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
    return (data / 10) << 4 | (data % 10);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <DEC_BCD+0x44>)
 80003c6:	fba2 2303 	umull	r2, r3, r2, r3
 80003ca:	08db      	lsrs	r3, r3, #3
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	011b      	lsls	r3, r3, #4
 80003d0:	b258      	sxtb	r0, r3
 80003d2:	79fa      	ldrb	r2, [r7, #7]
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <DEC_BCD+0x44>)
 80003d6:	fba3 1302 	umull	r1, r3, r3, r2
 80003da:	08d9      	lsrs	r1, r3, #3
 80003dc:	460b      	mov	r3, r1
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	440b      	add	r3, r1
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	b25b      	sxtb	r3, r3
 80003ea:	4303      	orrs	r3, r0
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	b2db      	uxtb	r3, r3
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	cccccccd 	.word	0xcccccccd

08000400 <DS3231_Init>:

void DS3231_Init(DS3231_Time *DS3231, I2C_HandleTypeDef *I2C_In) {
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
    DS3231->I2C = I2C_In;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	683a      	ldr	r2, [r7, #0]
 800040e:	601a      	str	r2, [r3, #0]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr

0800041a <DS3231_SetTime>:

void DS3231_SetTime(DS3231_Time *DS3231, uint8_t Hour, uint8_t Min, uint8_t Sec) {
 800041a:	b580      	push	{r7, lr}
 800041c:	b082      	sub	sp, #8
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
 8000422:	4608      	mov	r0, r1
 8000424:	4611      	mov	r1, r2
 8000426:	461a      	mov	r2, r3
 8000428:	4603      	mov	r3, r0
 800042a:	70fb      	strb	r3, [r7, #3]
 800042c:	460b      	mov	r3, r1
 800042e:	70bb      	strb	r3, [r7, #2]
 8000430:	4613      	mov	r3, r2
 8000432:	707b      	strb	r3, [r7, #1]
    DS3231->TxTimeBuff[0] = DEC_BCD(Sec);
 8000434:	787b      	ldrb	r3, [r7, #1]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ffbe 	bl	80003b8 <DEC_BCD>
 800043c:	4603      	mov	r3, r0
 800043e:	461a      	mov	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	72da      	strb	r2, [r3, #11]
    DS3231->TxTimeBuff[1] = DEC_BCD(Min);
 8000444:	78bb      	ldrb	r3, [r7, #2]
 8000446:	4618      	mov	r0, r3
 8000448:	f7ff ffb6 	bl	80003b8 <DEC_BCD>
 800044c:	4603      	mov	r3, r0
 800044e:	461a      	mov	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	731a      	strb	r2, [r3, #12]
    DS3231->TxTimeBuff[2] = DEC_BCD(Hour);
 8000454:	78fb      	ldrb	r3, [r7, #3]
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ffae 	bl	80003b8 <DEC_BCD>
 800045c:	4603      	mov	r3, r0
 800045e:	461a      	mov	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	735a      	strb	r2, [r3, #13]
    I2C_Write_Time(DS3231);
 8000464:	6878      	ldr	r0, [r7, #4]
 8000466:	f7ff ff33 	bl	80002d0 <I2C_Write_Time>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <DS3231_GetTime>:

void DS3231_GetTime(DS3231_Time *DS3231) {
 8000472:	b580      	push	{r7, lr}
 8000474:	b082      	sub	sp, #8
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
    I2C_Read_Time(DS3231);
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f7ff ff3f 	bl	80002fe <I2C_Read_Time>
    DS3231->Sec = BCD_DEC(DS3231->RxTimeBuff[0]);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	7b9b      	ldrb	r3, [r3, #14]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff7f 	bl	8000388 <BCD_DEC>
 800048a:	4603      	mov	r3, r0
 800048c:	461a      	mov	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	711a      	strb	r2, [r3, #4]
    DS3231->Min = BCD_DEC(DS3231->RxTimeBuff[1]);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	7bdb      	ldrb	r3, [r3, #15]
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff76 	bl	8000388 <BCD_DEC>
 800049c:	4603      	mov	r3, r0
 800049e:	461a      	mov	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	715a      	strb	r2, [r3, #5]
    DS3231->Hour = BCD_DEC(DS3231->RxTimeBuff[2]);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	7c1b      	ldrb	r3, [r3, #16]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ff6d 	bl	8000388 <BCD_DEC>
 80004ae:	4603      	mov	r3, r0
 80004b0:	461a      	mov	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	719a      	strb	r2, [r3, #6]
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <DS3231_SetDate>:

void DS3231_SetDate(DS3231_Time *DS3231, uint8_t Day, uint8_t Date, uint8_t Month, uint8_t Year) {
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	4608      	mov	r0, r1
 80004c8:	4611      	mov	r1, r2
 80004ca:	461a      	mov	r2, r3
 80004cc:	4603      	mov	r3, r0
 80004ce:	70fb      	strb	r3, [r7, #3]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70bb      	strb	r3, [r7, #2]
 80004d4:	4613      	mov	r3, r2
 80004d6:	707b      	strb	r3, [r7, #1]
    DS3231->TxDateBuff[0] = DEC_BCD(Day);
 80004d8:	78fb      	ldrb	r3, [r7, #3]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff6c 	bl	80003b8 <DEC_BCD>
 80004e0:	4603      	mov	r3, r0
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	745a      	strb	r2, [r3, #17]
    DS3231->TxDateBuff[1] = DEC_BCD(Date);
 80004e8:	78bb      	ldrb	r3, [r7, #2]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff64 	bl	80003b8 <DEC_BCD>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461a      	mov	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	749a      	strb	r2, [r3, #18]
    DS3231->TxDateBuff[2] = DEC_BCD(Month);
 80004f8:	787b      	ldrb	r3, [r7, #1]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff5c 	bl	80003b8 <DEC_BCD>
 8000500:	4603      	mov	r3, r0
 8000502:	461a      	mov	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	74da      	strb	r2, [r3, #19]
    DS3231->TxDateBuff[3] = DEC_BCD(Year);
 8000508:	7c3b      	ldrb	r3, [r7, #16]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff54 	bl	80003b8 <DEC_BCD>
 8000510:	4603      	mov	r3, r0
 8000512:	461a      	mov	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	751a      	strb	r2, [r3, #20]
    I2C_Write_Date(DS3231);
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f7ff ff07 	bl	800032c <I2C_Write_Date>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <DS3231_GetDate>:

void DS3231_GetDate(DS3231_Time *DS3231) {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
    I2C_Read_Date(DS3231);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff ff13 	bl	800035a <I2C_Read_Date>
    DS3231->Day = BCD_DEC(DS3231->RxDateBuff[0]);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	7d5b      	ldrb	r3, [r3, #21]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff25 	bl	8000388 <BCD_DEC>
 800053e:	4603      	mov	r3, r0
 8000540:	461a      	mov	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	721a      	strb	r2, [r3, #8]
    DS3231->Date = BCD_DEC(DS3231->RxDateBuff[1]);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	7d9b      	ldrb	r3, [r3, #22]
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff ff1c 	bl	8000388 <BCD_DEC>
 8000550:	4603      	mov	r3, r0
 8000552:	461a      	mov	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	71da      	strb	r2, [r3, #7]
    DS3231->Month = BCD_DEC(DS3231->RxDateBuff[2]);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7ddb      	ldrb	r3, [r3, #23]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ff13 	bl	8000388 <BCD_DEC>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	725a      	strb	r2, [r3, #9]
    DS3231->Year = BCD_DEC(DS3231->RxDateBuff[3]);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	7e1b      	ldrb	r3, [r3, #24]
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ff0a 	bl	8000388 <BCD_DEC>
 8000574:	4603      	mov	r3, r0
 8000576:	461a      	mov	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	729a      	strb	r2, [r3, #10]
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <DHT11_Init>:


// Hàm khởi tạo chân GPIO DHT11
void DHT11_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <DHT11_Init+0x58>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <DHT11_Init+0x58>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <DHT11_Init+0x58>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = DHT11_PIN;
 80005b0:	2320      	movs	r3, #32
 80005b2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80005b4:	2311      	movs	r3, #17
 80005b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	4619      	mov	r1, r3
 80005c2:	4807      	ldr	r0, [pc, #28]	; (80005e0 <DHT11_Init+0x5c>)
 80005c4:	f000 ffa2 	bl	800150c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2120      	movs	r1, #32
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <DHT11_Init+0x5c>)
 80005ce:	f001 f938 	bl	8001842 <HAL_GPIO_WritePin>
}
 80005d2:	bf00      	nop
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010800 	.word	0x40010800

080005e4 <delay_us>:


// Hàm delay x us, x được truyền vào hàm
void delay_us(uint32_t us)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	// Reset timer counter, mỗi lần đếm là 1 micro giây
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <delay_us+0x2c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2200      	movs	r2, #0
 80005f2:	625a      	str	r2, [r3, #36]	; 0x24

    // Đếm số us truyền vào
    while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 80005f4:	bf00      	nop
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <delay_us+0x2c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d8f9      	bhi.n	80005f6 <delay_us+0x12>
    {
      // Đợi đếm đủ
    }
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000009c 	.word	0x2000009c

08000614 <Counting_Time>:


// Hàm đếm thời gian mà chân DHT11 đã ở mức Level (us)
static int Counting_Time(uint16_t Time_Max, int Level)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
	int count = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == Level)
 8000624:	e00a      	b.n	800063c <Counting_Time+0x28>
	{
		if (count++ > Time_Max)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	60fa      	str	r2, [r7, #12]
 800062c:	88fa      	ldrh	r2, [r7, #6]
 800062e:	4293      	cmp	r3, r2
 8000630:	dd01      	ble.n	8000636 <Counting_Time+0x22>
		    return HAL_TIMEOUT;
 8000632:	2303      	movs	r3, #3
 8000634:	e00c      	b.n	8000650 <Counting_Time+0x3c>
		// Mỗi lần lặp sẽ tương ứng với 1 lần delay 1 micro giây
		delay_us(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f7ff ffd4 	bl	80005e4 <delay_us>
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == Level)
 800063c:	2120      	movs	r1, #32
 800063e:	4806      	ldr	r0, [pc, #24]	; (8000658 <Counting_Time+0x44>)
 8000640:	f001 f8e8 	bl	8001814 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	4293      	cmp	r3, r2
 800064c:	d0eb      	beq.n	8000626 <Counting_Time+0x12>
	}
	// Trả về số lần lặp đã xảy ra (số micro giây mà chân DHT11 đã ở mức Level)
	return count;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40010800 	.word	0x40010800

0800065c <DHT11_ReadData>:


// Hàm đọc dữ liệu từ DHT11
uint8_t DHT11_ReadData(uint8_t *temp, uint8_t *hum)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
    // Request data
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	4847      	ldr	r0, [pc, #284]	; (8000788 <DHT11_ReadData+0x12c>)
 800066c:	f001 f8e9 	bl	8001842 <HAL_GPIO_WritePin>
    // Kéo chân DHT11 xuống mức 0 trong 20ms
    delay_us(20*1000);
 8000670:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000674:	f7ff ffb6 	bl	80005e4 <delay_us>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2120      	movs	r1, #32
 800067c:	4842      	ldr	r0, [pc, #264]	; (8000788 <DHT11_ReadData+0x12c>)
 800067e:	f001 f8e0 	bl	8001842 <HAL_GPIO_WritePin>
    // Kéo chân DHT11 lên mức 1 trong 40us
    delay_us(40);
 8000682:	2028      	movs	r0, #40	; 0x28
 8000684:	f7ff ffae 	bl	80005e4 <delay_us>

    // Cấu hình lại chân DHT11 thành Input để đọc dữ liệu
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT11_PIN;
 8000696:	2320      	movs	r3, #32
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	4837      	ldr	r0, [pc, #220]	; (8000788 <DHT11_ReadData+0x12c>)
 80006aa:	f000 ff2f 	bl	800150c <HAL_GPIO_Init>

    // Đợi DHT11 phản hồi
    if (Counting_Time(80, 0) == HAL_TIMEOUT)
 80006ae:	2100      	movs	r1, #0
 80006b0:	2050      	movs	r0, #80	; 0x50
 80006b2:	f7ff ffaf 	bl	8000614 <Counting_Time>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d101      	bne.n	80006c0 <DHT11_ReadData+0x64>
	    return 5;
 80006bc:	2305      	movs	r3, #5
 80006be:	e05e      	b.n	800077e <DHT11_ReadData+0x122>

    if (Counting_Time(80, 1) == HAL_TIMEOUT)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2050      	movs	r0, #80	; 0x50
 80006c4:	f7ff ffa6 	bl	8000614 <Counting_Time>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d101      	bne.n	80006d2 <DHT11_ReadData+0x76>
  	    return 6;
 80006ce:	2306      	movs	r3, #6
 80006d0:	e055      	b.n	800077e <DHT11_ReadData+0x122>

    // Đọc 40 bit dữ liệu
    uint8_t data[5] = {0};
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	2300      	movs	r3, #0
 80006d8:	743b      	strb	r3, [r7, #16]
    for (int i = 0; i < 40; i++)
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
 80006de:	e035      	b.n	800074c <DHT11_ReadData+0xf0>
    {
        if (Counting_Time(50, 0) == HAL_TIMEOUT)
 80006e0:	2100      	movs	r1, #0
 80006e2:	2032      	movs	r0, #50	; 0x32
 80006e4:	f7ff ff96 	bl	8000614 <Counting_Time>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d101      	bne.n	80006f2 <DHT11_ReadData+0x96>
    	    return 7;
 80006ee:	2307      	movs	r3, #7
 80006f0:	e045      	b.n	800077e <DHT11_ReadData+0x122>

        if (Counting_Time(70, 1) > 28)
 80006f2:	2101      	movs	r1, #1
 80006f4:	2046      	movs	r0, #70	; 0x46
 80006f6:	f7ff ff8d 	bl	8000614 <Counting_Time>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b1c      	cmp	r3, #28
 80006fe:	dd22      	ble.n	8000746 <DHT11_ReadData+0xea>
    	    data[i/8] |= (1 << (7-(i%8)));
 8000700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000702:	2b00      	cmp	r3, #0
 8000704:	da00      	bge.n	8000708 <DHT11_ReadData+0xac>
 8000706:	3307      	adds	r3, #7
 8000708:	10db      	asrs	r3, r3, #3
 800070a:	461a      	mov	r2, r3
 800070c:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8000710:	443b      	add	r3, r7
 8000712:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000716:	b259      	sxtb	r1, r3
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	4258      	negs	r0, r3
 800071c:	f003 0307 	and.w	r3, r3, #7
 8000720:	f000 0007 	and.w	r0, r0, #7
 8000724:	bf58      	it	pl
 8000726:	4243      	negpl	r3, r0
 8000728:	f1c3 0307 	rsb	r3, r3, #7
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f303 	lsl.w	r3, r0, r3
 8000732:	b25b      	sxtb	r3, r3
 8000734:	430b      	orrs	r3, r1
 8000736:	b25b      	sxtb	r3, r3
 8000738:	b2d9      	uxtb	r1, r3
 800073a:	f102 0328 	add.w	r3, r2, #40	; 0x28
 800073e:	443b      	add	r3, r7
 8000740:	460a      	mov	r2, r1
 8000742:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (int i = 0; i < 40; i++)
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	3301      	adds	r3, #1
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	2b27      	cmp	r3, #39	; 0x27
 8000750:	ddc6      	ble.n	80006e0 <DHT11_ReadData+0x84>
    }

    // Checksum để kiểm tra CRC
    if ((uint8_t)(data[0] + data[1] + data[2] + data[3]) != data[4])
 8000752:	7b3a      	ldrb	r2, [r7, #12]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	4413      	add	r3, r2
 8000758:	b2da      	uxtb	r2, r3
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	4413      	add	r3, r2
 800075e:	b2da      	uxtb	r2, r3
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	4413      	add	r3, r2
 8000764:	b2da      	uxtb	r2, r3
 8000766:	7c3b      	ldrb	r3, [r7, #16]
 8000768:	429a      	cmp	r2, r3
 800076a:	d001      	beq.n	8000770 <DHT11_ReadData+0x114>
        return HAL_ERROR;
 800076c:	2301      	movs	r3, #1
 800076e:	e006      	b.n	800077e <DHT11_ReadData+0x122>

    // Trả về giá trị nhiệt độ và độ ẩm
    *hum = data[0];
 8000770:	7b3a      	ldrb	r2, [r7, #12]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	701a      	strb	r2, [r3, #0]
    *temp = data[2];
 8000776:	7bba      	ldrb	r2, [r7, #14]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	701a      	strb	r2, [r3, #0]

    return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40010800 	.word	0x40010800

0800078c <HAL_TIM_PeriodElapsedCallback>:
   Dữ liệu ... giữa '&' và 'H' là dữ liệu độ ẩm

   Dữ liệu lỗi sẽ được truyền theo chuỗi "Error: ...!", trong đó dữ liệu ... là loại lỗi
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b090      	sub	sp, #64	; 0x40
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800079c:	f040 8096 	bne.w	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    {
    	uint8_t temperature = 0, humidity = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    	uint8_t status = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	char buffer[50];
    	DHT11_Init();
 80007b2:	f7ff fee7 	bl	8000584 <DHT11_Init>

        status = DHT11_ReadData(&temperature, &humidity);
 80007b6:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 80007ba:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff4b 	bl	800065c <DHT11_ReadData>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    	if (status == HAL_OK)
 80007cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d118      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x7a>
    	{
    	  sprintf(buffer, "T%d&%dH", temperature, humidity);
 80007d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007d8:	461a      	mov	r2, r3
 80007da:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80007de:	f107 0008 	add.w	r0, r7, #8
 80007e2:	493c      	ldr	r1, [pc, #240]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80007e4:	f003 fdb4 	bl	8004350 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fcad 	bl	800014c <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	f107 0108 	add.w	r1, r7, #8
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	4836      	ldr	r0, [pc, #216]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000800:	f002 ff7e 	bl	8003700 <HAL_UART_Transmit>
    	{
    	  sprintf(buffer, "Error: CRC Error!");
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
    	}
    }
}
 8000804:	e062      	b.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    	else if (status == 5)
 8000806:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800080a:	2b05      	cmp	r3, #5
 800080c:	d114      	bne.n	8000838 <HAL_TIM_PeriodElapsedCallback+0xac>
    	  sprintf(buffer, "Error: Respond Level 0 Timeout!");
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4932      	ldr	r1, [pc, #200]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fd9b 	bl	8004350 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fc94 	bl	800014c <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	f107 0108 	add.w	r1, r7, #8
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	4829      	ldr	r0, [pc, #164]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000832:	f002 ff65 	bl	8003700 <HAL_UART_Transmit>
}
 8000836:	e049      	b.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    	else if (status == 6)
 8000838:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800083c:	2b06      	cmp	r3, #6
 800083e:	d114      	bne.n	800086a <HAL_TIM_PeriodElapsedCallback+0xde>
    	  sprintf(buffer, "Error: Respond Level 1 Timeout!");
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4926      	ldr	r1, [pc, #152]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000846:	4618      	mov	r0, r3
 8000848:	f003 fd82 	bl	8004350 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fc7b 	bl	800014c <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29a      	uxth	r2, r3
 800085a:	f107 0108 	add.w	r1, r7, #8
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	481d      	ldr	r0, [pc, #116]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000864:	f002 ff4c 	bl	8003700 <HAL_UART_Transmit>
}
 8000868:	e030      	b.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    	else if (status == 7)
 800086a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800086e:	2b07      	cmp	r3, #7
 8000870:	d114      	bne.n	800089c <HAL_TIM_PeriodElapsedCallback+0x110>
    	  sprintf(buffer, "Error: Data Level 0 Timeout!");
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	491b      	ldr	r1, [pc, #108]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fd69 	bl	8004350 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fc62 	bl	800014c <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	b29a      	uxth	r2, r3
 800088c:	f107 0108 	add.w	r1, r7, #8
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	4810      	ldr	r0, [pc, #64]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000896:	f002 ff33 	bl	8003700 <HAL_UART_Transmit>
}
 800089a:	e017      	b.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    	else if (status == HAL_ERROR)
 800089c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d113      	bne.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    	  sprintf(buffer, "Error: CRC Error!");
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	490f      	ldr	r1, [pc, #60]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 fd50 	bl	8004350 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fc49 	bl	800014c <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 0108 	add.w	r1, r7, #8
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80008c8:	f002 ff1a 	bl	8003700 <HAL_UART_Transmit>
}
 80008cc:	bf00      	nop
 80008ce:	3740      	adds	r7, #64	; 0x40
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	08005658 	.word	0x08005658
 80008d8:	2000012c 	.word	0x2000012c
 80008dc:	08005660 	.word	0x08005660
 80008e0:	08005680 	.word	0x08005680
 80008e4:	080056a0 	.word	0x080056a0
 80008e8:	080056c0 	.word	0x080056c0

080008ec <HAL_UART_RxCpltCallback>:

   Dữ liệu set thứ, ngày, tháng, năm nhận được từ GUI có dạng: "D./../../..E"
   Ví dụ: "D2/15/04/24" thì 2 là thứ, 15 là ngày, 04 là tháng, 24 là năm (2024)
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a6f      	ldr	r2, [pc, #444]	; (8000ab8 <HAL_UART_RxCpltCallback+0x1cc>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	f040 80d7 	bne.w	8000aae <HAL_UART_RxCpltCallback+0x1c2>
    {
    	// Phân tích chuỗi dữ liệu điều khiển LED
		if (rx_data == '#' && rx_index == 5 && rx_buffer[0] == '@' && rx_buffer[1] == 'R' && rx_buffer[2] == '2' && rx_buffer[3] == 'O')
 8000900:	4b6e      	ldr	r3, [pc, #440]	; (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b23      	cmp	r3, #35	; 0x23
 8000906:	d143      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b05      	cmp	r3, #5
 800090e:	d13f      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
 8000910:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b40      	cmp	r3, #64	; 0x40
 8000916:	d13b      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
 8000918:	4b6a      	ldr	r3, [pc, #424]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	2b52      	cmp	r3, #82	; 0x52
 800091e:	d137      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
 8000920:	4b68      	ldr	r3, [pc, #416]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000922:	789b      	ldrb	r3, [r3, #2]
 8000924:	2b32      	cmp	r3, #50	; 0x32
 8000926:	d133      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
 8000928:	4b66      	ldr	r3, [pc, #408]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	2b4f      	cmp	r3, #79	; 0x4f
 800092e:	d12f      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
		{
			// Lưu kí tự '#' là kí tự kết thúc chuỗi dữ liệu
			rx_buffer[rx_index] = rx_data;
 8000930:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b61      	ldr	r3, [pc, #388]	; (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000938:	7819      	ldrb	r1, [r3, #0]
 800093a:	4b62      	ldr	r3, [pc, #392]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 800093c:	5499      	strb	r1, [r3, r2]

			if (rx_buffer[4] == 'N') {
 800093e:	4b61      	ldr	r3, [pc, #388]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	2b4e      	cmp	r3, #78	; 0x4e
 8000944:	d105      	bne.n	8000952 <HAL_UART_RxCpltCallback+0x66>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	485f      	ldr	r0, [pc, #380]	; (8000ac8 <HAL_UART_RxCpltCallback+0x1dc>)
 800094c:	f000 ff79 	bl	8001842 <HAL_GPIO_WritePin>
 8000950:	e008      	b.n	8000964 <HAL_UART_RxCpltCallback+0x78>
			}

			else if (rx_buffer[4] == 'F') {
 8000952:	4b5c      	ldr	r3, [pc, #368]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	2b46      	cmp	r3, #70	; 0x46
 8000958:	d104      	bne.n	8000964 <HAL_UART_RxCpltCallback+0x78>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	485a      	ldr	r0, [pc, #360]	; (8000ac8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000960:	f000 ff6f 	bl	8001842 <HAL_GPIO_WritePin>
			}

			// Response ngược lại dữ liệu nhận được lên GUI
			for (int i = 0; i < 6; i++) {
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e00b      	b.n	8000982 <HAL_UART_RxCpltCallback+0x96>
				HAL_UART_Transmit(&huart1, &rx_buffer[i], 1, HAL_MAX_DELAY);
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	4a55      	ldr	r2, [pc, #340]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 800096e:	1899      	adds	r1, r3, r2
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	2201      	movs	r2, #1
 8000976:	4855      	ldr	r0, [pc, #340]	; (8000acc <HAL_UART_RxCpltCallback+0x1e0>)
 8000978:	f002 fec2 	bl	8003700 <HAL_UART_Transmit>
			for (int i = 0; i < 6; i++) {
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	2b05      	cmp	r3, #5
 8000986:	ddf0      	ble.n	800096a <HAL_UART_RxCpltCallback+0x7e>
			}
			rx_index = 0;
 8000988:	4b4d      	ldr	r3, [pc, #308]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	e089      	b.n	8000aa4 <HAL_UART_RxCpltCallback+0x1b8>
		}

		// Phân tích chuỗi dữ liệu set giờ, phút, giây
		else if (rx_data == 'M' && rx_buffer[0] == 'T' && rx_buffer[3] == ':' && rx_buffer[6] == ':')
 8000990:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b4d      	cmp	r3, #77	; 0x4d
 8000996:	d133      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x114>
 8000998:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b54      	cmp	r3, #84	; 0x54
 800099e:	d12f      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x114>
 80009a0:	4b48      	ldr	r3, [pc, #288]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	2b3a      	cmp	r3, #58	; 0x3a
 80009a6:	d12b      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x114>
 80009a8:	4b46      	ldr	r3, [pc, #280]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 80009aa:	799b      	ldrb	r3, [r3, #6]
 80009ac:	2b3a      	cmp	r3, #58	; 0x3a
 80009ae:	d127      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x114>
		{
			is_Time_set = 1;
 80009b0:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <HAL_UART_RxCpltCallback+0x1e4>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
			// Lưu kí tự kết thúc chuỗi dữ liệu
			rx_buffer[rx_index] = rx_data;
 80009b6:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 80009be:	7819      	ldrb	r1, [r3, #0]
 80009c0:	4b40      	ldr	r3, [pc, #256]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 80009c2:	5499      	strb	r1, [r3, r2]

			// Sao chép dữ liệu từ rx_buffer vào rx_buffer_char
			for (int i = 0; i < 12; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	e00b      	b.n	80009e2 <HAL_UART_RxCpltCallback+0xf6>
				rx_buffer_char[i] = rx_buffer[i];
 80009ca:	4a3e      	ldr	r2, [pc, #248]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	4413      	add	r3, r2
 80009d0:	7819      	ldrb	r1, [r3, #0]
 80009d2:	4a40      	ldr	r2, [pc, #256]	; (8000ad4 <HAL_UART_RxCpltCallback+0x1e8>)
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4413      	add	r3, r2
 80009d8:	460a      	mov	r2, r1
 80009da:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 12; i++) {
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	3301      	adds	r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	2b0b      	cmp	r3, #11
 80009e6:	ddf0      	ble.n	80009ca <HAL_UART_RxCpltCallback+0xde>
			}

			// Sử dụng hàm sscanf để phân tích chuỗi dữ liệu và lấy giờ, phút và giây
			sscanf(rx_buffer_char, "T%d:%d:%dM", &setHour, &setMin, &setSec);
 80009e8:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <HAL_UART_RxCpltCallback+0x1ec>)
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <HAL_UART_RxCpltCallback+0x1f0>)
 80009ee:	4a3c      	ldr	r2, [pc, #240]	; (8000ae0 <HAL_UART_RxCpltCallback+0x1f4>)
 80009f0:	493c      	ldr	r1, [pc, #240]	; (8000ae4 <HAL_UART_RxCpltCallback+0x1f8>)
 80009f2:	4838      	ldr	r0, [pc, #224]	; (8000ad4 <HAL_UART_RxCpltCallback+0x1e8>)
 80009f4:	f003 fccc 	bl	8004390 <siscanf>

			rx_index = 0;
 80009f8:	4b31      	ldr	r3, [pc, #196]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e051      	b.n	8000aa4 <HAL_UART_RxCpltCallback+0x1b8>
		}

		// Phân tích chuỗi dữ liệu set thứ, ngày, tháng, năm
		else if (rx_data == 'E' && rx_buffer[0] == 'D' && rx_buffer[2] == '/' && rx_buffer[5] == '/' && rx_buffer[8] == '/')
 8000a00:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b45      	cmp	r3, #69	; 0x45
 8000a06:	d139      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x190>
 8000a08:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b44      	cmp	r3, #68	; 0x44
 8000a0e:	d135      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x190>
 8000a10:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a12:	789b      	ldrb	r3, [r3, #2]
 8000a14:	2b2f      	cmp	r3, #47	; 0x2f
 8000a16:	d131      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x190>
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a1a:	795b      	ldrb	r3, [r3, #5]
 8000a1c:	2b2f      	cmp	r3, #47	; 0x2f
 8000a1e:	d12d      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x190>
 8000a20:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a22:	7a1b      	ldrb	r3, [r3, #8]
 8000a24:	2b2f      	cmp	r3, #47	; 0x2f
 8000a26:	d129      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x190>
		{
			is_Date_set = 1;
 8000a28:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
			// Lưu kí tự kết thúc chuỗi dữ liệu
			rx_buffer[rx_index] = rx_data;
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000a36:	7819      	ldrb	r1, [r3, #0]
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a3a:	5499      	strb	r1, [r3, r2]

			// Sao chép dữ liệu từ rx_buffer vào rx_buffer_char
			for (int i = 0; i < 12; i++) {
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e00b      	b.n	8000a5a <HAL_UART_RxCpltCallback+0x16e>
				rx_buffer_char[i] = rx_buffer[i];
 8000a42:	4a20      	ldr	r2, [pc, #128]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	7819      	ldrb	r1, [r3, #0]
 8000a4a:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	460a      	mov	r2, r1
 8000a52:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 12; i++) {
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2b0b      	cmp	r3, #11
 8000a5e:	ddf0      	ble.n	8000a42 <HAL_UART_RxCpltCallback+0x156>
			}

			// Sử dụng hàm sscanf để phân tích chuỗi dữ liệu và lấy thứ, ngày, tháng, năm
			sscanf(rx_buffer_char, "D%d/%d/%d/%dM", &setDay, &setDate,
 8000a60:	4b22      	ldr	r3, [pc, #136]	; (8000aec <HAL_UART_RxCpltCallback+0x200>)
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <HAL_UART_RxCpltCallback+0x204>)
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <HAL_UART_RxCpltCallback+0x208>)
 8000a6a:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <HAL_UART_RxCpltCallback+0x20c>)
 8000a6c:	4923      	ldr	r1, [pc, #140]	; (8000afc <HAL_UART_RxCpltCallback+0x210>)
 8000a6e:	4819      	ldr	r0, [pc, #100]	; (8000ad4 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a70:	f003 fc8e 	bl	8004390 <siscanf>
					&setMonth, &setYear);

			rx_index = 0;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	e013      	b.n	8000aa4 <HAL_UART_RxCpltCallback+0x1b8>
		}

		else {
			// Nếu chưa gặp kí tự kết thúc thì cứ lưu dữ liệu vào mảng buffer
			rx_buffer[rx_index] = rx_data;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000a84:	7819      	ldrb	r1, [r3, #0]
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a88:	5499      	strb	r1, [r3, r2]
			rx_index++;
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a94:	701a      	strb	r2, [r3, #0]

			if (rx_index >= 12) {
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b0b      	cmp	r3, #11
 8000a9c:	d902      	bls.n	8000aa4 <HAL_UART_RxCpltCallback+0x1b8>
				rx_index = 0;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4905      	ldr	r1, [pc, #20]	; (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <HAL_UART_RxCpltCallback+0x1e0>)
 8000aaa:	f002 feac 	bl	8003806 <HAL_UART_Receive_IT>
    }
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40013800 	.word	0x40013800
 8000abc:	200001c8 	.word	0x200001c8
 8000ac0:	200001e4 	.word	0x200001e4
 8000ac4:	200001cc 	.word	0x200001cc
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	2000012c 	.word	0x2000012c
 8000ad0:	20000094 	.word	0x20000094
 8000ad4:	200001d8 	.word	0x200001d8
 8000ad8:	20000078 	.word	0x20000078
 8000adc:	2000007c 	.word	0x2000007c
 8000ae0:	20000080 	.word	0x20000080
 8000ae4:	080056d4 	.word	0x080056d4
 8000ae8:	20000098 	.word	0x20000098
 8000aec:	20000090 	.word	0x20000090
 8000af0:	2000008c 	.word	0x2000008c
 8000af4:	20000084 	.word	0x20000084
 8000af8:	20000088 	.word	0x20000088
 8000afc:	080056e0 	.word	0x080056e0

08000b00 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b090      	sub	sp, #64	; 0x40
 8000b04:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0318 	add.w	r3, r7, #24
 8000b0a:	2228      	movs	r2, #40	; 0x28
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f003 fc6a 	bl	80043e8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b26:	2301      	movs	r3, #1
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b32:	2300      	movs	r3, #0
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b36:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 fef1 	bl	8002928 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x50>
    {
      Error_Handler();
 8000b4c:	f000 f8f8 	bl	8000d40 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000b50:	230f      	movs	r3, #15
 8000b52:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2302      	movs	r3, #2
 8000b56:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 f95e 	bl	8002e2c <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x7a>
    {
      Error_Handler();
 8000b76:	f000 f8e3 	bl	8000d40 <Error_Handler>
    }
}
 8000b7a:	bf00      	nop
 8000b7c:	3740      	adds	r7, #64	; 0x40
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <MX_TIM1_Init>:


static void MX_TIM1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	htim1.Instance = TIM1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_TIM1_Init+0x44>)
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <MX_TIM1_Init+0x48>)
 8000b8c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 63;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_TIM1_Init+0x44>)
 8000b90:	223f      	movs	r2, #63	; 0x3f
 8000b92:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_TIM1_Init+0x44>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_TIM1_Init+0x44>)
 8000b9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_TIM1_Init+0x44>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_TIM1_Init+0x44>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_TIM1_Init+0x44>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_TIM1_Init+0x44>)
 8000bb6:	f002 fac7 	bl	8003148 <HAL_TIM_Base_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x40>
	{
	  Error_Handler();
 8000bc0:	f000 f8be 	bl	8000d40 <Error_Handler>
	}
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000009c 	.word	0x2000009c
 8000bcc:	40012c00 	.word	0x40012c00

08000bd0 <MX_TIM2_Init>:


static void MX_TIM2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    htim2.Instance = TIM2;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_TIM2_Init+0x44>)
 8000bd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bda:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 63999;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <MX_TIM2_Init+0x44>)
 8000bde:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000be2:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_TIM2_Init+0x44>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 2000;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_TIM2_Init+0x44>)
 8000bec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000bf0:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_TIM2_Init+0x44>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_TIM2_Init+0x44>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_TIM2_Init+0x44>)
 8000c00:	f002 faa2 	bl	8003148 <HAL_TIM_Base_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x3e>
    {
      Error_Handler();
 8000c0a:	f000 f899 	bl	8000d40 <Error_Handler>
    }
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000e4 	.word	0x200000e4

08000c18 <MX_USART1_UART_Init>:


static void MX_USART1_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_USART1_UART_Init+0x4c>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <MX_USART1_UART_Init+0x50>)
 8000c20:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_USART1_UART_Init+0x4c>)
 8000c24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c28:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USART1_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_USART1_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_USART1_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_USART1_UART_Init+0x4c>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_USART1_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_USART1_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_USART1_UART_Init+0x4c>)
 8000c50:	f002 fd06 	bl	8003660 <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART1_UART_Init+0x46>
	{
	  Error_Handler();
 8000c5a:	f000 f871 	bl	8000d40 <Error_Handler>
	}
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000012c 	.word	0x2000012c
 8000c68:	40013800 	.word	0x40013800

08000c6c <MX_I2C1_Init>:


static void MX_I2C1_Init(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c72:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <MX_I2C1_Init+0x54>)
 8000c74:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c78:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_I2C1_Init+0x58>)
 8000c7a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c8e:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_I2C1_Init+0x50>)
 8000caa:	f000 fde3 	bl	8001874 <HAL_I2C_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000cb4:	f000 f844 	bl	8000d40 <Error_Handler>
    }
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000174 	.word	0x20000174
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	000186a0 	.word	0x000186a0

08000cc8 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_GPIO_Init+0x70>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <MX_GPIO_Init+0x70>)
 8000ce2:	f043 0320 	orr.w	r3, r3, #32
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_GPIO_Init+0x70>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0320 	and.w	r3, r3, #32
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_GPIO_Init+0x70>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <MX_GPIO_Init+0x70>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <MX_GPIO_Init+0x70>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2140      	movs	r1, #64	; 0x40
 8000d10:	480a      	ldr	r0, [pc, #40]	; (8000d3c <MX_GPIO_Init+0x74>)
 8000d12:	f000 fd96 	bl	8001842 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d16:	2340      	movs	r3, #64	; 0x40
 8000d18:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	4619      	mov	r1, r3
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_GPIO_Init+0x74>)
 8000d2a:	f000 fbef 	bl	800150c <HAL_GPIO_Init>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010800 	.word	0x40010800

08000d40 <Error_Handler>:


void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
    __disable_irq();
    while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_MspInit+0x5c>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_MspInit+0x5c>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6193      	str	r3, [r2, #24]
 8000d5e:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_MspInit+0x5c>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_MspInit+0x5c>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <HAL_MspInit+0x5c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	61d3      	str	r3, [r2, #28]
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_MspInit+0x5c>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_MspInit+0x60>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_MspInit+0x60>)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010000 	.word	0x40010000

08000db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <HAL_I2C_MspInit+0x70>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d123      	bne.n	8000e18 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_I2C_MspInit+0x74>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a13      	ldr	r2, [pc, #76]	; (8000e24 <HAL_I2C_MspInit+0x74>)
 8000dd6:	f043 0308 	orr.w	r3, r3, #8
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_I2C_MspInit+0x74>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000de8:	23c0      	movs	r3, #192	; 0xc0
 8000dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dec:	2312      	movs	r3, #18
 8000dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480b      	ldr	r0, [pc, #44]	; (8000e28 <HAL_I2C_MspInit+0x78>)
 8000dfc:	f000 fb86 	bl	800150c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_I2C_MspInit+0x74>)
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_I2C_MspInit+0x74>)
 8000e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0a:	61d3      	str	r3, [r2, #28]
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_I2C_MspInit+0x74>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40005400 	.word	0x40005400
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010c00 	.word	0x40010c00

08000e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <HAL_TIM_Base_MspInit+0x68>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d10c      	bne.n	8000e58 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_TIM_Base_MspInit+0x6c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <HAL_TIM_Base_MspInit+0x6c>)
 8000e44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_TIM_Base_MspInit+0x6c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e56:	e018      	b.n	8000e8a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e60:	d113      	bne.n	8000e8a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_TIM_Base_MspInit+0x6c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <HAL_TIM_Base_MspInit+0x6c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_TIM_Base_MspInit+0x6c>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	201c      	movs	r0, #28
 8000e80:	f000 fa5b 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e84:	201c      	movs	r0, #28
 8000e86:	f000 fa74 	bl	8001372 <HAL_NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40012c00 	.word	0x40012c00
 8000e98:	40021000 	.word	0x40021000

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <HAL_UART_MspInit+0x9c>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d139      	bne.n	8000f30 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <HAL_UART_MspInit+0xa0>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <HAL_UART_MspInit+0xa0>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <HAL_UART_MspInit+0xa0>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_UART_MspInit+0xa0>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a18      	ldr	r2, [pc, #96]	; (8000f3c <HAL_UART_MspInit+0xa0>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_UART_MspInit+0xa0>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4619      	mov	r1, r3
 8000f00:	480f      	ldr	r0, [pc, #60]	; (8000f40 <HAL_UART_MspInit+0xa4>)
 8000f02:	f000 fb03 	bl	800150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <HAL_UART_MspInit+0xa4>)
 8000f1c:	f000 faf6 	bl	800150c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	2025      	movs	r0, #37	; 0x25
 8000f26:	f000 fa08 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f2a:	2025      	movs	r0, #37	; 0x25
 8000f2c:	f000 fa21 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3720      	adds	r7, #32
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010800 	.word	0x40010800

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f8bf 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM2_IRQHandler+0x10>)
 8000f9a:	f002 f9c1 	bl	8003320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000e4 	.word	0x200000e4

08000fa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USART1_IRQHandler+0x10>)
 8000fae:	f002 fc4f 	bl	8003850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000012c 	.word	0x2000012c

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f003 fa04 	bl	80043f8 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20005000 	.word	0x20005000
 800101c:	00000400 	.word	0x00000400
 8001020:	200001e8 	.word	0x200001e8
 8001024:	20000338 	.word	0x20000338

08001028 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff fff8 	bl	8001028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800103a:	490c      	ldr	r1, [pc, #48]	; (800106c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <LoopFillZerobss+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a09      	ldr	r2, [pc, #36]	; (8001074 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001050:	4c09      	ldr	r4, [pc, #36]	; (8001078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f003 f9d1 	bl	8004404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001062:	f7ff f87b 	bl	800015c <main>
  bx lr
 8001066:	4770      	bx	lr
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001070:	08005880 	.word	0x08005880
  ldr r2, =_sbss
 8001074:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001078:	20000338 	.word	0x20000338

0800107c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC1_2_IRQHandler>
	...

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x28>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f947 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fe56 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f95f 	bl	800138e <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f927 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x1c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x20>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <HAL_IncTick+0x20>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000008 	.word	0x20000008
 800112c:	200001ec 	.word	0x200001ec

08001130 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b02      	ldr	r3, [pc, #8]	; (8001140 <HAL_GetTick+0x10>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	200001ec 	.word	0x200001ec

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff fff0 	bl	8001130 <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffe0 	bl	8001130 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4906      	ldr	r1, [pc, #24]	; (8001224 <__NVIC_EnableIRQ+0x34>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff90 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff2d 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff42 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff90 	bl	800127c <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5f 	bl	8001228 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff35 	bl	80011f0 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d008      	beq.n	80013d0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2204      	movs	r2, #4
 80013c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e020      	b.n	8001412 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 020e 	bic.w	r2, r2, #14
 80013de:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f8:	2101      	movs	r1, #1
 80013fa:	fa01 f202 	lsl.w	r2, r1, r2
 80013fe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001410:	7bfb      	ldrb	r3, [r7, #15]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d005      	beq.n	8001440 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2204      	movs	r2, #4
 8001438:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e051      	b.n	80014e4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 020e 	bic.w	r2, r2, #14
 800144e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a22      	ldr	r2, [pc, #136]	; (80014f0 <HAL_DMA_Abort_IT+0xd4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d029      	beq.n	80014be <HAL_DMA_Abort_IT+0xa2>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <HAL_DMA_Abort_IT+0xd8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d022      	beq.n	80014ba <HAL_DMA_Abort_IT+0x9e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_DMA_Abort_IT+0xdc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01a      	beq.n	80014b4 <HAL_DMA_Abort_IT+0x98>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <HAL_DMA_Abort_IT+0xe0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d012      	beq.n	80014ae <HAL_DMA_Abort_IT+0x92>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_DMA_Abort_IT+0xe4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00a      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x8c>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_DMA_Abort_IT+0xe8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d102      	bne.n	80014a2 <HAL_DMA_Abort_IT+0x86>
 800149c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014a0:	e00e      	b.n	80014c0 <HAL_DMA_Abort_IT+0xa4>
 80014a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a6:	e00b      	b.n	80014c0 <HAL_DMA_Abort_IT+0xa4>
 80014a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ac:	e008      	b.n	80014c0 <HAL_DMA_Abort_IT+0xa4>
 80014ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b2:	e005      	b.n	80014c0 <HAL_DMA_Abort_IT+0xa4>
 80014b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b8:	e002      	b.n	80014c0 <HAL_DMA_Abort_IT+0xa4>
 80014ba:	2310      	movs	r3, #16
 80014bc:	e000      	b.n	80014c0 <HAL_DMA_Abort_IT+0xa4>
 80014be:	2301      	movs	r3, #1
 80014c0:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_DMA_Abort_IT+0xec>)
 80014c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	4798      	blx	r3
    } 
  }
  return status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40020008 	.word	0x40020008
 80014f4:	4002001c 	.word	0x4002001c
 80014f8:	40020030 	.word	0x40020030
 80014fc:	40020044 	.word	0x40020044
 8001500:	40020058 	.word	0x40020058
 8001504:	4002006c 	.word	0x4002006c
 8001508:	40020000 	.word	0x40020000

0800150c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800150c:	b480      	push	{r7}
 800150e:	b08b      	sub	sp, #44	; 0x2c
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151e:	e169      	b.n	80017f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001520:	2201      	movs	r2, #1
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	429a      	cmp	r2, r3
 800153a:	f040 8158 	bne.w	80017ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4a9a      	ldr	r2, [pc, #616]	; (80017ac <HAL_GPIO_Init+0x2a0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d05e      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001548:	4a98      	ldr	r2, [pc, #608]	; (80017ac <HAL_GPIO_Init+0x2a0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d875      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 800154e:	4a98      	ldr	r2, [pc, #608]	; (80017b0 <HAL_GPIO_Init+0x2a4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d058      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001554:	4a96      	ldr	r2, [pc, #600]	; (80017b0 <HAL_GPIO_Init+0x2a4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d86f      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 800155a:	4a96      	ldr	r2, [pc, #600]	; (80017b4 <HAL_GPIO_Init+0x2a8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d052      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001560:	4a94      	ldr	r2, [pc, #592]	; (80017b4 <HAL_GPIO_Init+0x2a8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d869      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 8001566:	4a94      	ldr	r2, [pc, #592]	; (80017b8 <HAL_GPIO_Init+0x2ac>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d04c      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 800156c:	4a92      	ldr	r2, [pc, #584]	; (80017b8 <HAL_GPIO_Init+0x2ac>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d863      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 8001572:	4a92      	ldr	r2, [pc, #584]	; (80017bc <HAL_GPIO_Init+0x2b0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d046      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
 8001578:	4a90      	ldr	r2, [pc, #576]	; (80017bc <HAL_GPIO_Init+0x2b0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d85d      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 800157e:	2b12      	cmp	r3, #18
 8001580:	d82a      	bhi.n	80015d8 <HAL_GPIO_Init+0xcc>
 8001582:	2b12      	cmp	r3, #18
 8001584:	d859      	bhi.n	800163a <HAL_GPIO_Init+0x12e>
 8001586:	a201      	add	r2, pc, #4	; (adr r2, 800158c <HAL_GPIO_Init+0x80>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	08001607 	.word	0x08001607
 8001590:	080015e1 	.word	0x080015e1
 8001594:	080015f3 	.word	0x080015f3
 8001598:	08001635 	.word	0x08001635
 800159c:	0800163b 	.word	0x0800163b
 80015a0:	0800163b 	.word	0x0800163b
 80015a4:	0800163b 	.word	0x0800163b
 80015a8:	0800163b 	.word	0x0800163b
 80015ac:	0800163b 	.word	0x0800163b
 80015b0:	0800163b 	.word	0x0800163b
 80015b4:	0800163b 	.word	0x0800163b
 80015b8:	0800163b 	.word	0x0800163b
 80015bc:	0800163b 	.word	0x0800163b
 80015c0:	0800163b 	.word	0x0800163b
 80015c4:	0800163b 	.word	0x0800163b
 80015c8:	0800163b 	.word	0x0800163b
 80015cc:	0800163b 	.word	0x0800163b
 80015d0:	080015e9 	.word	0x080015e9
 80015d4:	080015fd 	.word	0x080015fd
 80015d8:	4a79      	ldr	r2, [pc, #484]	; (80017c0 <HAL_GPIO_Init+0x2b4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015de:	e02c      	b.n	800163a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	623b      	str	r3, [r7, #32]
          break;
 80015e6:	e029      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	3304      	adds	r3, #4
 80015ee:	623b      	str	r3, [r7, #32]
          break;
 80015f0:	e024      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	3308      	adds	r3, #8
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e01f      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	330c      	adds	r3, #12
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	e01a      	b.n	800163c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800160e:	2304      	movs	r3, #4
 8001610:	623b      	str	r3, [r7, #32]
          break;
 8001612:	e013      	b.n	800163c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800161c:	2308      	movs	r3, #8
 800161e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	611a      	str	r2, [r3, #16]
          break;
 8001626:	e009      	b.n	800163c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001628:	2308      	movs	r3, #8
 800162a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	615a      	str	r2, [r3, #20]
          break;
 8001632:	e003      	b.n	800163c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
          break;
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x130>
          break;
 800163a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d801      	bhi.n	8001646 <HAL_GPIO_Init+0x13a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	e001      	b.n	800164a <HAL_GPIO_Init+0x13e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3304      	adds	r3, #4
 800164a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2bff      	cmp	r3, #255	; 0xff
 8001650:	d802      	bhi.n	8001658 <HAL_GPIO_Init+0x14c>
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x152>
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	3b08      	subs	r3, #8
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	210f      	movs	r1, #15
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	6a39      	ldr	r1, [r7, #32]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	431a      	orrs	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80b1 	beq.w	80017ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800168c:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <HAL_GPIO_Init+0x2b8>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <HAL_GPIO_Init+0x2b8>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_GPIO_Init+0x2b8>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016a4:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <HAL_GPIO_Init+0x2bc>)
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a40      	ldr	r2, [pc, #256]	; (80017cc <HAL_GPIO_Init+0x2c0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d013      	beq.n	80016f8 <HAL_GPIO_Init+0x1ec>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a3f      	ldr	r2, [pc, #252]	; (80017d0 <HAL_GPIO_Init+0x2c4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00d      	beq.n	80016f4 <HAL_GPIO_Init+0x1e8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3e      	ldr	r2, [pc, #248]	; (80017d4 <HAL_GPIO_Init+0x2c8>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_Init+0x1e4>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3d      	ldr	r2, [pc, #244]	; (80017d8 <HAL_GPIO_Init+0x2cc>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_GPIO_Init+0x1e0>
 80016e8:	2303      	movs	r3, #3
 80016ea:	e006      	b.n	80016fa <HAL_GPIO_Init+0x1ee>
 80016ec:	2304      	movs	r3, #4
 80016ee:	e004      	b.n	80016fa <HAL_GPIO_Init+0x1ee>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e002      	b.n	80016fa <HAL_GPIO_Init+0x1ee>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_GPIO_Init+0x1ee>
 80016f8:	2300      	movs	r3, #0
 80016fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fc:	f002 0203 	and.w	r2, r2, #3
 8001700:	0092      	lsls	r2, r2, #2
 8001702:	4093      	lsls	r3, r2
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800170a:	492f      	ldr	r1, [pc, #188]	; (80017c8 <HAL_GPIO_Init+0x2bc>)
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	3302      	adds	r3, #2
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001724:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	492c      	ldr	r1, [pc, #176]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	4928      	ldr	r1, [pc, #160]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 800173c:	4013      	ands	r3, r2
 800173e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	4922      	ldr	r1, [pc, #136]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	43db      	mvns	r3, r3
 8001762:	491e      	ldr	r1, [pc, #120]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001764:	4013      	ands	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4918      	ldr	r1, [pc, #96]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	43db      	mvns	r3, r3
 800178a:	4914      	ldr	r1, [pc, #80]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 800178c:	4013      	ands	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d021      	beq.n	80017e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	490e      	ldr	r1, [pc, #56]	; (80017dc <HAL_GPIO_Init+0x2d0>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e021      	b.n	80017ee <HAL_GPIO_Init+0x2e2>
 80017aa:	bf00      	nop
 80017ac:	10320000 	.word	0x10320000
 80017b0:	10310000 	.word	0x10310000
 80017b4:	10220000 	.word	0x10220000
 80017b8:	10210000 	.word	0x10210000
 80017bc:	10120000 	.word	0x10120000
 80017c0:	10110000 	.word	0x10110000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40010000 	.word	0x40010000
 80017cc:	40010800 	.word	0x40010800
 80017d0:	40010c00 	.word	0x40010c00
 80017d4:	40011000 	.word	0x40011000
 80017d8:	40011400 	.word	0x40011400
 80017dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_GPIO_Init+0x304>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	4909      	ldr	r1, [pc, #36]	; (8001810 <HAL_GPIO_Init+0x304>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	3301      	adds	r3, #1
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f47f ae8e 	bne.w	8001520 <HAL_GPIO_Init+0x14>
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	372c      	adds	r7, #44	; 0x2c
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	887b      	ldrh	r3, [r7, #2]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e001      	b.n	8001836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	807b      	strh	r3, [r7, #2]
 800184e:	4613      	mov	r3, r2
 8001850:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001852:	787b      	ldrb	r3, [r7, #1]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001858:	887a      	ldrh	r2, [r7, #2]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800185e:	e003      	b.n	8001868 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	041a      	lsls	r2, r3, #16
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
	...

08001874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e12b      	b.n	8001ade <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff fa88 	bl	8000db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2224      	movs	r2, #36	; 0x24
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0201 	bic.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018d8:	f001 fbf0 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 80018dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a81      	ldr	r2, [pc, #516]	; (8001ae8 <HAL_I2C_Init+0x274>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d807      	bhi.n	80018f8 <HAL_I2C_Init+0x84>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a80      	ldr	r2, [pc, #512]	; (8001aec <HAL_I2C_Init+0x278>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	bf94      	ite	ls
 80018f0:	2301      	movls	r3, #1
 80018f2:	2300      	movhi	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	e006      	b.n	8001906 <HAL_I2C_Init+0x92>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4a7d      	ldr	r2, [pc, #500]	; (8001af0 <HAL_I2C_Init+0x27c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	bf94      	ite	ls
 8001900:	2301      	movls	r3, #1
 8001902:	2300      	movhi	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0e7      	b.n	8001ade <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4a78      	ldr	r2, [pc, #480]	; (8001af4 <HAL_I2C_Init+0x280>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0c9b      	lsrs	r3, r3, #18
 8001918:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a6a      	ldr	r2, [pc, #424]	; (8001ae8 <HAL_I2C_Init+0x274>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d802      	bhi.n	8001948 <HAL_I2C_Init+0xd4>
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3301      	adds	r3, #1
 8001946:	e009      	b.n	800195c <HAL_I2C_Init+0xe8>
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	4a69      	ldr	r2, [pc, #420]	; (8001af8 <HAL_I2C_Init+0x284>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	3301      	adds	r3, #1
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	430b      	orrs	r3, r1
 8001962:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800196e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	495c      	ldr	r1, [pc, #368]	; (8001ae8 <HAL_I2C_Init+0x274>)
 8001978:	428b      	cmp	r3, r1
 800197a:	d819      	bhi.n	80019b0 <HAL_I2C_Init+0x13c>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1e59      	subs	r1, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fbb1 f3f3 	udiv	r3, r1, r3
 800198a:	1c59      	adds	r1, r3, #1
 800198c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001990:	400b      	ands	r3, r1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <HAL_I2C_Init+0x138>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1e59      	subs	r1, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a4:	3301      	adds	r3, #1
 80019a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019aa:	e051      	b.n	8001a50 <HAL_I2C_Init+0x1dc>
 80019ac:	2304      	movs	r3, #4
 80019ae:	e04f      	b.n	8001a50 <HAL_I2C_Init+0x1dc>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d111      	bne.n	80019dc <HAL_I2C_Init+0x168>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1e58      	subs	r0, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	440b      	add	r3, r1
 80019c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e012      	b.n	8001a02 <HAL_I2C_Init+0x18e>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1e58      	subs	r0, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6859      	ldr	r1, [r3, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	0099      	lsls	r1, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Init+0x196>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e022      	b.n	8001a50 <HAL_I2C_Init+0x1dc>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10e      	bne.n	8001a30 <HAL_I2C_Init+0x1bc>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1e58      	subs	r0, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6859      	ldr	r1, [r3, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	440b      	add	r3, r1
 8001a20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2e:	e00f      	b.n	8001a50 <HAL_I2C_Init+0x1dc>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e58      	subs	r0, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	0099      	lsls	r1, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	6809      	ldr	r1, [r1, #0]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6911      	ldr	r1, [r2, #16]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68d2      	ldr	r2, [r2, #12]
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695a      	ldr	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	000186a0 	.word	0x000186a0
 8001aec:	001e847f 	.word	0x001e847f
 8001af0:	003d08ff 	.word	0x003d08ff
 8001af4:	431bde83 	.word	0x431bde83
 8001af8:	10624dd3 	.word	0x10624dd3

08001afc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	4608      	mov	r0, r1
 8001b06:	4611      	mov	r1, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	817b      	strh	r3, [r7, #10]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	813b      	strh	r3, [r7, #8]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b16:	f7ff fb0b 	bl	8001130 <HAL_GetTick>
 8001b1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	f040 80d9 	bne.w	8001cdc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2319      	movs	r3, #25
 8001b30:	2201      	movs	r2, #1
 8001b32:	496d      	ldr	r1, [pc, #436]	; (8001ce8 <HAL_I2C_Mem_Write+0x1ec>)
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 fcc1 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b40:	2302      	movs	r3, #2
 8001b42:	e0cc      	b.n	8001cde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_I2C_Mem_Write+0x56>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e0c5      	b.n	8001cde <HAL_I2C_Mem_Write+0x1e2>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d007      	beq.n	8001b78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2221      	movs	r2, #33	; 0x21
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a3a      	ldr	r2, [r7, #32]
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4a4d      	ldr	r2, [pc, #308]	; (8001cec <HAL_I2C_Mem_Write+0x1f0>)
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bba:	88f8      	ldrh	r0, [r7, #6]
 8001bbc:	893a      	ldrh	r2, [r7, #8]
 8001bbe:	8979      	ldrh	r1, [r7, #10]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	4603      	mov	r3, r0
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 faf8 	bl	80021c0 <I2C_RequestMemoryWrite>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d052      	beq.n	8001c7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e081      	b.n	8001cde <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 fd86 	bl	80026f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00d      	beq.n	8001c06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d107      	bne.n	8001c02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06b      	b.n	8001cde <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d11b      	bne.n	8001c7c <HAL_I2C_Mem_Write+0x180>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d017      	beq.n	8001c7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1aa      	bne.n	8001bda <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 fd79 	bl	8002780 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00d      	beq.n	8001cb0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d107      	bne.n	8001cac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001caa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e016      	b.n	8001cde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e000      	b.n	8001cde <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	00100002 	.word	0x00100002
 8001cec:	ffff0000 	.word	0xffff0000

08001cf0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	; 0x30
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4603      	mov	r3, r0
 8001d00:	817b      	strh	r3, [r7, #10]
 8001d02:	460b      	mov	r3, r1
 8001d04:	813b      	strh	r3, [r7, #8]
 8001d06:	4613      	mov	r3, r2
 8001d08:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d0e:	f7ff fa0f 	bl	8001130 <HAL_GetTick>
 8001d12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	f040 8244 	bne.w	80021aa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2319      	movs	r3, #25
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4982      	ldr	r1, [pc, #520]	; (8001f34 <HAL_I2C_Mem_Read+0x244>)
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 fbc5 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e237      	b.n	80021ac <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_I2C_Mem_Read+0x5a>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e230      	b.n	80021ac <HAL_I2C_Mem_Read+0x4bc>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d007      	beq.n	8001d70 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2222      	movs	r2, #34	; 0x22
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2240      	movs	r2, #64	; 0x40
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001da0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a62      	ldr	r2, [pc, #392]	; (8001f38 <HAL_I2C_Mem_Read+0x248>)
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001db2:	88f8      	ldrh	r0, [r7, #6]
 8001db4:	893a      	ldrh	r2, [r7, #8]
 8001db6:	8979      	ldrh	r1, [r7, #10]
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fa92 	bl	80022ec <I2C_RequestMemoryRead>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e1ec      	b.n	80021ac <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d113      	bne.n	8001e02 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e1c0      	b.n	8002184 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d11e      	bne.n	8001e48 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1a:	b672      	cpsid	i
}
 8001e1c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e44:	b662      	cpsie	i
}
 8001e46:	e035      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d11e      	bne.n	8001e8e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e60:	b672      	cpsid	i
}
 8001e62:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e8a:	b662      	cpsie	i
}
 8001e8c:	e012      	b.n	8001eb4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e9c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001eb4:	e166      	b.n	8002184 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	f200 811f 	bhi.w	80020fe <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d123      	bne.n	8001f10 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fc9f 	bl	8002810 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e167      	b.n	80021ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f0e:	e139      	b.n	8002184 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d152      	bne.n	8001fbe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4906      	ldr	r1, [pc, #24]	; (8001f3c <HAL_I2C_Mem_Read+0x24c>)
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 faca 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e13c      	b.n	80021ac <HAL_I2C_Mem_Read+0x4bc>
 8001f32:	bf00      	nop
 8001f34:	00100002 	.word	0x00100002
 8001f38:	ffff0000 	.word	0xffff0000
 8001f3c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f86:	b662      	cpsie	i
}
 8001f88:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fbc:	e0e2      	b.n	8002184 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	497b      	ldr	r1, [pc, #492]	; (80021b4 <HAL_I2C_Mem_Read+0x4c4>)
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 fa77 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0e9      	b.n	80021ac <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800201e:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <HAL_I2C_Mem_Read+0x4c8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	4a65      	ldr	r2, [pc, #404]	; (80021bc <HAL_I2C_Mem_Read+0x4cc>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0a1a      	lsrs	r2, r3, #8
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00da      	lsls	r2, r3, #3
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	3b01      	subs	r3, #1
 800203c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d118      	bne.n	8002076 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0220 	orr.w	r2, r3, #32
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002066:	b662      	cpsie	i
}
 8002068:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e09a      	b.n	80021ac <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b04      	cmp	r3, #4
 8002082:	d1d9      	bne.n	8002038 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020c6:	b662      	cpsie	i
}
 80020c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020fc:	e042      	b.n	8002184 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fb84 	bl	8002810 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e04c      	b.n	80021ac <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d118      	bne.n	8002184 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	f47f ae94 	bne.w	8001eb6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	00010004 	.word	0x00010004
 80021b8:	20000000 	.word	0x20000000
 80021bc:	14f8b589 	.word	0x14f8b589

080021c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	817b      	strh	r3, [r7, #10]
 80021d2:	460b      	mov	r3, r1
 80021d4:	813b      	strh	r3, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f960 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002210:	d103      	bne.n	800221a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e05f      	b.n	80022de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800221e:	897b      	ldrh	r3, [r7, #10]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800222c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	6a3a      	ldr	r2, [r7, #32]
 8002232:	492d      	ldr	r1, [pc, #180]	; (80022e8 <I2C_RequestMemoryWrite+0x128>)
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f9bb 	bl	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e04c      	b.n	80022de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225c:	6a39      	ldr	r1, [r7, #32]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fa46 	bl	80026f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00d      	beq.n	8002286 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	2b04      	cmp	r3, #4
 8002270:	d107      	bne.n	8002282 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002280:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e02b      	b.n	80022de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800228c:	893b      	ldrh	r3, [r7, #8]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	e021      	b.n	80022dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002298:	893b      	ldrh	r3, [r7, #8]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	6a39      	ldr	r1, [r7, #32]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fa20 	bl	80026f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00d      	beq.n	80022d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d107      	bne.n	80022ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e005      	b.n	80022de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022d2:	893b      	ldrh	r3, [r7, #8]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	00010002 	.word	0x00010002

080022ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	817b      	strh	r3, [r7, #10]
 80022fe:	460b      	mov	r3, r1
 8002300:	813b      	strh	r3, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002314:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	2200      	movs	r2, #0
 800232e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f8c2 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234c:	d103      	bne.n	8002356 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0aa      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800235a:	897b      	ldrh	r3, [r7, #10]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002368:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	6a3a      	ldr	r2, [r7, #32]
 800236e:	4952      	ldr	r1, [pc, #328]	; (80024b8 <I2C_RequestMemoryRead+0x1cc>)
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f91d 	bl	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e097      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	6a39      	ldr	r1, [r7, #32]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f9a8 	bl	80026f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00d      	beq.n	80023c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d107      	bne.n	80023be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e076      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023c8:	893b      	ldrh	r3, [r7, #8]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	e021      	b.n	8002418 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023d4:	893b      	ldrh	r3, [r7, #8]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	6a39      	ldr	r1, [r7, #32]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f982 	bl	80026f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00d      	beq.n	800240e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d107      	bne.n	800240a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002408:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e050      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800240e:	893b      	ldrh	r3, [r7, #8]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	6a39      	ldr	r1, [r7, #32]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f967 	bl	80026f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00d      	beq.n	8002444 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b04      	cmp	r3, #4
 800242e:	d107      	bne.n	8002440 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e035      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002452:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	2200      	movs	r2, #0
 800245c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f82b 	bl	80024bc <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00d      	beq.n	8002488 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247a:	d103      	bne.n	8002484 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e013      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002488:	897b      	ldrh	r3, [r7, #10]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	6a3a      	ldr	r2, [r7, #32]
 800249c:	4906      	ldr	r1, [pc, #24]	; (80024b8 <I2C_RequestMemoryRead+0x1cc>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f886 	bl	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	00010002 	.word	0x00010002

080024bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024cc:	e048      	b.n	8002560 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d044      	beq.n	8002560 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024d6:	f7fe fe2b 	bl	8001130 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d302      	bcc.n	80024ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d139      	bne.n	8002560 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	0c1b      	lsrs	r3, r3, #16
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d10d      	bne.n	8002512 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	43da      	mvns	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	4013      	ands	r3, r2
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	e00c      	b.n	800252c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	43da      	mvns	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	429a      	cmp	r2, r3
 8002530:	d116      	bne.n	8002560 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e023      	b.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	0c1b      	lsrs	r3, r3, #16
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d10d      	bne.n	8002586 <I2C_WaitOnFlagUntilTimeout+0xca>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	43da      	mvns	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4013      	ands	r3, r2
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	e00c      	b.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	43da      	mvns	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4013      	ands	r3, r2
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d093      	beq.n	80024ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025be:	e071      	b.n	80026a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ce:	d123      	bne.n	8002618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f043 0204 	orr.w	r2, r3, #4
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e067      	b.n	80026e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d041      	beq.n	80026a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002620:	f7fe fd86 	bl	8001130 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	d302      	bcc.n	8002636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d136      	bne.n	80026a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d10c      	bne.n	800265a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e00b      	b.n	8002672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	43da      	mvns	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4013      	ands	r3, r2
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0220 	orr.w	r2, r3, #32
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e021      	b.n	80026e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10c      	bne.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	43da      	mvns	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4013      	ands	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e00b      	b.n	80026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4013      	ands	r3, r2
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f47f af6d 	bne.w	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026fc:	e034      	b.n	8002768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f8e3 	bl	80028ca <I2C_IsAcknowledgeFailed>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e034      	b.n	8002778 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d028      	beq.n	8002768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002716:	f7fe fd0b 	bl	8001130 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	d302      	bcc.n	800272c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d11d      	bne.n	8002768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b80      	cmp	r3, #128	; 0x80
 8002738:	d016      	beq.n	8002768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f043 0220 	orr.w	r2, r3, #32
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e007      	b.n	8002778 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	d1c3      	bne.n	80026fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800278c:	e034      	b.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f89b 	bl	80028ca <I2C_IsAcknowledgeFailed>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e034      	b.n	8002808 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d028      	beq.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7fe fcc3 	bl	8001130 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d11d      	bne.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d016      	beq.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e007      	b.n	8002808 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d1c3      	bne.n	800278e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800281c:	e049      	b.n	80028b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b10      	cmp	r3, #16
 800282a:	d119      	bne.n	8002860 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0210 	mvn.w	r2, #16
 8002834:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e030      	b.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002860:	f7fe fc66 	bl	8001130 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d11d      	bne.n	80028b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d016      	beq.n	80028b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f043 0220 	orr.w	r2, r3, #32
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e007      	b.n	80028c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028bc:	2b40      	cmp	r3, #64	; 0x40
 80028be:	d1ae      	bne.n	800281e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e0:	d11b      	bne.n	800291a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f043 0204 	orr.w	r2, r3, #4
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
	...

08002928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e272      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8087 	beq.w	8002a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002948:	4b92      	ldr	r3, [pc, #584]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 030c 	and.w	r3, r3, #12
 8002950:	2b04      	cmp	r3, #4
 8002952:	d00c      	beq.n	800296e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002954:	4b8f      	ldr	r3, [pc, #572]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d112      	bne.n	8002986 <HAL_RCC_OscConfig+0x5e>
 8002960:	4b8c      	ldr	r3, [pc, #560]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d10b      	bne.n	8002986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296e:	4b89      	ldr	r3, [pc, #548]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d06c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x12c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d168      	bne.n	8002a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e24c      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x76>
 8002990:	4b80      	ldr	r3, [pc, #512]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a7f      	ldr	r2, [pc, #508]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	e02e      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x98>
 80029a6:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7a      	ldr	r2, [pc, #488]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b78      	ldr	r3, [pc, #480]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a77      	ldr	r2, [pc, #476]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	e01d      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0xbc>
 80029ca:	4b72      	ldr	r3, [pc, #456]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a71      	ldr	r2, [pc, #452]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b6f      	ldr	r3, [pc, #444]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e00b      	b.n	80029fc <HAL_RCC_OscConfig+0xd4>
 80029e4:	4b6b      	ldr	r3, [pc, #428]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a6a      	ldr	r2, [pc, #424]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b68      	ldr	r3, [pc, #416]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a67      	ldr	r2, [pc, #412]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d013      	beq.n	8002a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe fb94 	bl	8001130 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7fe fb90 	bl	8001130 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e200      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0xe4>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fb80 	bl	8001130 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe fb7c 	bl	8001130 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1ec      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x10c>
 8002a52:	e000      	b.n	8002a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d063      	beq.n	8002b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a62:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a6e:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d11c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x18c>
 8002a7a:	4b46      	ldr	r3, [pc, #280]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d116      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x176>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e1c0      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4939      	ldr	r1, [pc, #228]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	e03a      	b.n	8002b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d020      	beq.n	8002afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002abc:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <HAL_RCC_OscConfig+0x270>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fb35 	bl	8001130 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aca:	f7fe fb31 	bl	8001130 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1a1      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4927      	ldr	r1, [pc, #156]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
 8002afc:	e015      	b.n	8002b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <HAL_RCC_OscConfig+0x270>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7fe fb14 	bl	8001130 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fb10 	bl	8001130 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e180      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d03a      	beq.n	8002bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d019      	beq.n	8002b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_RCC_OscConfig+0x274>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b44:	f7fe faf4 	bl	8001130 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7fe faf0 	bl	8001130 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e160      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f000 face 	bl	800310c <RCC_Delay>
 8002b70:	e01c      	b.n	8002bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_RCC_OscConfig+0x274>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b78:	f7fe fada 	bl	8001130 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7e:	e00f      	b.n	8002ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fe fad6 	bl	8001130 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d908      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e146      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	42420000 	.word	0x42420000
 8002b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba0:	4b92      	ldr	r3, [pc, #584]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e9      	bne.n	8002b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a6 	beq.w	8002d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bbe:	4b8b      	ldr	r3, [pc, #556]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	4b88      	ldr	r3, [pc, #544]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4a87      	ldr	r2, [pc, #540]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd4:	61d3      	str	r3, [r2, #28]
 8002bd6:	4b85      	ldr	r3, [pc, #532]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	60bb      	str	r3, [r7, #8]
 8002be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be2:	2301      	movs	r3, #1
 8002be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	4b82      	ldr	r3, [pc, #520]	; (8002df0 <HAL_RCC_OscConfig+0x4c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d118      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bf2:	4b7f      	ldr	r3, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0x4c8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7e      	ldr	r2, [pc, #504]	; (8002df0 <HAL_RCC_OscConfig+0x4c8>)
 8002bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fa97 	bl	8001130 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c06:	f7fe fa93 	bl	8001130 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b64      	cmp	r3, #100	; 0x64
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e103      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	4b75      	ldr	r3, [pc, #468]	; (8002df0 <HAL_RCC_OscConfig+0x4c8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x312>
 8002c2c:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4a6e      	ldr	r2, [pc, #440]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6213      	str	r3, [r2, #32]
 8002c38:	e02d      	b.n	8002c96 <HAL_RCC_OscConfig+0x36e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x334>
 8002c42:	4b6a      	ldr	r3, [pc, #424]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a69      	ldr	r2, [pc, #420]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	f023 0301 	bic.w	r3, r3, #1
 8002c4c:	6213      	str	r3, [r2, #32]
 8002c4e:	4b67      	ldr	r3, [pc, #412]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4a66      	ldr	r2, [pc, #408]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	f023 0304 	bic.w	r3, r3, #4
 8002c58:	6213      	str	r3, [r2, #32]
 8002c5a:	e01c      	b.n	8002c96 <HAL_RCC_OscConfig+0x36e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x356>
 8002c64:	4b61      	ldr	r3, [pc, #388]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a60      	ldr	r2, [pc, #384]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	4b5e      	ldr	r3, [pc, #376]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4a5d      	ldr	r2, [pc, #372]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6213      	str	r3, [r2, #32]
 8002c7c:	e00b      	b.n	8002c96 <HAL_RCC_OscConfig+0x36e>
 8002c7e:	4b5b      	ldr	r3, [pc, #364]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	4a5a      	ldr	r2, [pc, #360]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	6213      	str	r3, [r2, #32]
 8002c8a:	4b58      	ldr	r3, [pc, #352]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4a57      	ldr	r2, [pc, #348]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d015      	beq.n	8002cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe fa47 	bl	8001130 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca6:	f7fe fa43 	bl	8001130 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0b1      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbc:	4b4b      	ldr	r3, [pc, #300]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ee      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x37e>
 8002cc8:	e014      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cca:	f7fe fa31 	bl	8001130 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd0:	e00a      	b.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd2:	f7fe fa2d 	bl	8001130 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e09b      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce8:	4b40      	ldr	r3, [pc, #256]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ee      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d105      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfa:	4b3c      	ldr	r3, [pc, #240]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4a3b      	ldr	r2, [pc, #236]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8087 	beq.w	8002e1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d10:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d061      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d146      	bne.n	8002db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fa01 	bl	8001130 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7fe f9fd 	bl	8001130 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e06d      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d108      	bne.n	8002d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d5a:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	4921      	ldr	r1, [pc, #132]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a19      	ldr	r1, [r3, #32]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	491b      	ldr	r1, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x4cc>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe f9d1 	bl	8001130 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe f9cd 	bl	8001130 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e03d      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x46a>
 8002db0:	e035      	b.n	8002e1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_RCC_OscConfig+0x4cc>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe f9ba 	bl	8001130 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe f9b6 	bl	8001130 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e026      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x498>
 8002dde:	e01e      	b.n	8002e1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e019      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
 8002df4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_OscConfig+0x500>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000

08002e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0d0      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e40:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d910      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b67      	ldr	r3, [pc, #412]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 0207 	bic.w	r2, r3, #7
 8002e56:	4965      	ldr	r1, [pc, #404]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b63      	ldr	r3, [pc, #396]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b8      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d040      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d115      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e07f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e073      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e06b      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0a:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4936      	ldr	r1, [pc, #216]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe f908 	bl	8001130 <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fe f904 	bl	8001130 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e053      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 020c 	and.w	r2, r3, #12
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d1eb      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d210      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 0207 	bic.w	r2, r3, #7
 8002f62:	4922      	ldr	r1, [pc, #136]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e032      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fba:	f000 f821 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	490a      	ldr	r1, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fcc:	5ccb      	ldrb	r3, [r1, r3]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8002fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1d0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe f866 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	080056fc 	.word	0x080056fc
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	20000004 	.word	0x20000004

08003000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800301a:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_GetSysClockFreq+0x94>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b04      	cmp	r3, #4
 8003028:	d002      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x30>
 800302a:	2b08      	cmp	r3, #8
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x36>
 800302e:	e027      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003032:	613b      	str	r3, [r7, #16]
      break;
 8003034:	e027      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0c9b      	lsrs	r3, r3, #18
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d010      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_RCC_GetSysClockFreq+0x94>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0c5b      	lsrs	r3, r3, #17
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800305a:	5cd3      	ldrb	r3, [r2, r3]
 800305c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003062:	fb03 f202 	mul.w	r2, r3, r2
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	e004      	b.n	800307a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	613b      	str	r3, [r7, #16]
      break;
 800307e:	e002      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003082:	613b      	str	r3, [r7, #16]
      break;
 8003084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003086:	693b      	ldr	r3, [r7, #16]
}
 8003088:	4618      	mov	r0, r3
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	007a1200 	.word	0x007a1200
 800309c:	08005714 	.word	0x08005714
 80030a0:	08005724 	.word	0x08005724
 80030a4:	003d0900 	.word	0x003d0900

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	20000000 	.word	0x20000000

080030bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030c0:	f7ff fff2 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4903      	ldr	r1, [pc, #12]	; (80030e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	0800570c 	.word	0x0800570c

080030e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	0adb      	lsrs	r3, r3, #11
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4903      	ldr	r1, [pc, #12]	; (8003108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	0800570c 	.word	0x0800570c

0800310c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <RCC_Delay+0x34>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <RCC_Delay+0x38>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0a5b      	lsrs	r3, r3, #9
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003128:	bf00      	nop
  }
  while (Delay --);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e5a      	subs	r2, r3, #1
 800312e:	60fa      	str	r2, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f9      	bne.n	8003128 <RCC_Delay+0x1c>
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	20000000 	.word	0x20000000
 8003144:	10624dd3 	.word	0x10624dd3

08003148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e041      	b.n	80031de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd fe5c 	bl	8000e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	4619      	mov	r1, r3
 8003186:	4610      	mov	r0, r2
 8003188:	f000 f9f6 	bl	8003578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a18      	ldr	r2, [pc, #96]	; (8003270 <HAL_TIM_Base_Start+0x88>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00e      	beq.n	8003230 <HAL_TIM_Base_Start+0x48>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321a:	d009      	beq.n	8003230 <HAL_TIM_Base_Start+0x48>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a14      	ldr	r2, [pc, #80]	; (8003274 <HAL_TIM_Base_Start+0x8c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_TIM_Base_Start+0x48>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a13      	ldr	r2, [pc, #76]	; (8003278 <HAL_TIM_Base_Start+0x90>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b06      	cmp	r3, #6
 8003240:	d010      	beq.n	8003264 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	e007      	b.n	8003264 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40000400 	.word	0x40000400
 8003278:	40000800 	.word	0x40000800

0800327c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d001      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e03a      	b.n	800330a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_TIM_Base_Start_IT+0x98>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00e      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x58>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032be:	d009      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x58>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <HAL_TIM_Base_Start_IT+0x9c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x58>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a13      	ldr	r2, [pc, #76]	; (800331c <HAL_TIM_Base_Start_IT+0xa0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d111      	bne.n	80032f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d010      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f6:	e007      	b.n	8003308 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800

08003320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d122      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d11b      	bne.n	800337c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0202 	mvn.w	r2, #2
 800334c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f8ed 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 8003368:	e005      	b.n	8003376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8e0 	bl	8003530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f8ef 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d122      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11b      	bne.n	80033d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0204 	mvn.w	r2, #4
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2202      	movs	r2, #2
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8c3 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8b6 	bl	8003530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f8c5 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d122      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d11b      	bne.n	8003424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0208 	mvn.w	r2, #8
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f899 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f88c 	bl	8003530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f89b 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b10      	cmp	r3, #16
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0210 	mvn.w	r2, #16
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2208      	movs	r2, #8
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f86f 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f862 	bl	8003530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f871 	bl	8003554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b01      	cmp	r3, #1
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0201 	mvn.w	r2, #1
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd f974 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8bf 	bl	800364e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f835 	bl	8003566 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b20      	cmp	r3, #32
 8003508:	d10e      	bne.n	8003528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b20      	cmp	r3, #32
 8003516:	d107      	bne.n	8003528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0220 	mvn.w	r2, #32
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f88a 	bl	800363c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a29      	ldr	r2, [pc, #164]	; (8003630 <TIM_Base_SetConfig+0xb8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00b      	beq.n	80035a8 <TIM_Base_SetConfig+0x30>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003596:	d007      	beq.n	80035a8 <TIM_Base_SetConfig+0x30>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a26      	ldr	r2, [pc, #152]	; (8003634 <TIM_Base_SetConfig+0xbc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <TIM_Base_SetConfig+0x30>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a25      	ldr	r2, [pc, #148]	; (8003638 <TIM_Base_SetConfig+0xc0>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d108      	bne.n	80035ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <TIM_Base_SetConfig+0xb8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00b      	beq.n	80035da <TIM_Base_SetConfig+0x62>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c8:	d007      	beq.n	80035da <TIM_Base_SetConfig+0x62>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a19      	ldr	r2, [pc, #100]	; (8003634 <TIM_Base_SetConfig+0xbc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <TIM_Base_SetConfig+0x62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <TIM_Base_SetConfig+0xc0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d108      	bne.n	80035ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a07      	ldr	r2, [pc, #28]	; (8003630 <TIM_Base_SetConfig+0xb8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d103      	bne.n	8003620 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	615a      	str	r2, [r3, #20]
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800

0800363c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e042      	b.n	80036f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fc08 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2224      	movs	r2, #36	; 0x24
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fdc5 	bl	8004234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695a      	ldr	r2, [r3, #20]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	d16d      	bne.n	80037fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_UART_Transmit+0x2c>
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e066      	b.n	80037fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2221      	movs	r2, #33	; 0x21
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800373e:	f7fd fcf7 	bl	8001130 <HAL_GetTick>
 8003742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	88fa      	ldrh	r2, [r7, #6]
 8003748:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	88fa      	ldrh	r2, [r7, #6]
 800374e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003758:	d108      	bne.n	800376c <HAL_UART_Transmit+0x6c>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d104      	bne.n	800376c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	e003      	b.n	8003774 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003770:	2300      	movs	r3, #0
 8003772:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003774:	e02a      	b.n	80037cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2200      	movs	r2, #0
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 fb14 	bl	8003dae <UART_WaitOnFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e036      	b.n	80037fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10b      	bne.n	80037ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	3302      	adds	r3, #2
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	e007      	b.n	80037be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3301      	adds	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1cf      	bne.n	8003776 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2200      	movs	r2, #0
 80037de:	2140      	movs	r1, #64	; 0x40
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fae4 	bl	8003dae <UART_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e006      	b.n	80037fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	4613      	mov	r3, r2
 8003812:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b20      	cmp	r3, #32
 800381e:	d112      	bne.n	8003846 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_UART_Receive_IT+0x26>
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e00b      	b.n	8003848 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	461a      	mov	r2, r3
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fb24 	bl	8003e8a <UART_Start_Receive_IT>
 8003842:	4603      	mov	r3, r0
 8003844:	e000      	b.n	8003848 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b0ba      	sub	sp, #232	; 0xe8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800387c:	2300      	movs	r3, #0
 800387e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800388e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10f      	bne.n	80038b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_UART_IRQHandler+0x66>
 80038a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fc01 	bl	80040b6 <UART_Receive_IT>
      return;
 80038b4:	e25b      	b.n	8003d6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80de 	beq.w	8003a7c <HAL_UART_IRQHandler+0x22c>
 80038c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80d1 	beq.w	8003a7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_UART_IRQHandler+0xae>
 80038e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f043 0201 	orr.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_UART_IRQHandler+0xd2>
 800390a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0202 	orr.w	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_UART_IRQHandler+0xf6>
 800392e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f043 0204 	orr.w	r2, r3, #4
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <HAL_UART_IRQHandler+0x126>
 8003952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d105      	bne.n	800396a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800395e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f043 0208 	orr.w	r2, r3, #8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 81f2 	beq.w	8003d64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_UART_IRQHandler+0x14e>
 800398c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fb8c 	bl	80040b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_UART_IRQHandler+0x17a>
 80039c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d04f      	beq.n	8003a6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fa96 	bl	8003efc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d041      	beq.n	8003a62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3314      	adds	r3, #20
 80039e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3314      	adds	r3, #20
 8003a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1d9      	bne.n	80039de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d013      	beq.n	8003a5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	4a7e      	ldr	r2, [pc, #504]	; (8003c30 <HAL_UART_IRQHandler+0x3e0>)
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fcec 	bl	800141c <HAL_DMA_Abort_IT>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a54:	4610      	mov	r0, r2
 8003a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	e00e      	b.n	8003a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f993 	bl	8003d86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a60:	e00a      	b.n	8003a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f98f 	bl	8003d86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a68:	e006      	b.n	8003a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f98b 	bl	8003d86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003a76:	e175      	b.n	8003d64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	bf00      	nop
    return;
 8003a7a:	e173      	b.n	8003d64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	f040 814f 	bne.w	8003d24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8148 	beq.w	8003d24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a98:	f003 0310 	and.w	r3, r3, #16
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8141 	beq.w	8003d24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80b6 	beq.w	8003c34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ad4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 8145 	beq.w	8003d68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	f080 813e 	bcs.w	8003d68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003af2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	f000 8088 	beq.w	8003c10 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b2c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1d9      	bne.n	8003b00 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3314      	adds	r3, #20
 8003b6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e1      	bne.n	8003b4c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3314      	adds	r3, #20
 8003b8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3314      	adds	r3, #20
 8003ba8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e3      	bne.n	8003b88 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be0:	f023 0310 	bic.w	r3, r3, #16
 8003be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	330c      	adds	r3, #12
 8003bee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bf2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bf4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e3      	bne.n	8003bce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd fbcb 	bl	80013a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f8b6 	bl	8003d98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c2c:	e09c      	b.n	8003d68 <HAL_UART_IRQHandler+0x518>
 8003c2e:	bf00      	nop
 8003c30:	08003fc1 	.word	0x08003fc1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 808e 	beq.w	8003d6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8089 	beq.w	8003d6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003c80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e3      	bne.n	8003c5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cb6:	633a      	str	r2, [r7, #48]	; 0x30
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e3      	bne.n	8003c92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0310 	bic.w	r3, r3, #16
 8003cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cfc:	61fa      	str	r2, [r7, #28]
 8003cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	69b9      	ldr	r1, [r7, #24]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	617b      	str	r3, [r7, #20]
   return(result);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e3      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f83b 	bl	8003d98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d22:	e023      	b.n	8003d6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <HAL_UART_IRQHandler+0x4f4>
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f953 	bl	8003fe8 <UART_Transmit_IT>
    return;
 8003d42:	e014      	b.n	8003d6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00e      	beq.n	8003d6e <HAL_UART_IRQHandler+0x51e>
 8003d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f992 	bl	8004086 <UART_EndTransmit_IT>
    return;
 8003d62:	e004      	b.n	8003d6e <HAL_UART_IRQHandler+0x51e>
    return;
 8003d64:	bf00      	nop
 8003d66:	e002      	b.n	8003d6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d68:	bf00      	nop
 8003d6a:	e000      	b.n	8003d6e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d6c:	bf00      	nop
  }
}
 8003d6e:	37e8      	adds	r7, #232	; 0xe8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr

08003dae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b090      	sub	sp, #64	; 0x40
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dbe:	e050      	b.n	8003e62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d04c      	beq.n	8003e62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d007      	beq.n	8003dde <UART_WaitOnFlagUntilTimeout+0x30>
 8003dce:	f7fd f9af 	bl	8001130 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d241      	bcs.n	8003e62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dfe:	637a      	str	r2, [r7, #52]	; 0x34
 8003e00:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3314      	adds	r3, #20
 8003e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	613b      	str	r3, [r7, #16]
   return(result);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e32:	623a      	str	r2, [r7, #32]
 8003e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	69f9      	ldr	r1, [r7, #28]
 8003e38:	6a3a      	ldr	r2, [r7, #32]
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e5      	bne.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e00f      	b.n	8003e82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	bf0c      	ite	eq
 8003e72:	2301      	moveq	r3, #1
 8003e74:	2300      	movne	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d09f      	beq.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3740      	adds	r7, #64	; 0x40
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2222      	movs	r2, #34	; 0x22
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ece:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0220 	orr.w	r2, r2, #32
 8003eee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b095      	sub	sp, #84	; 0x54
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	e853 3f00 	ldrex	r3, [r3]
 8003f12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f24:	643a      	str	r2, [r7, #64]	; 0x40
 8003f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f2c:	e841 2300 	strex	r3, r2, [r1]
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e5      	bne.n	8003f04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3314      	adds	r3, #20
 8003f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e5      	bne.n	8003f38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d119      	bne.n	8003fa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f023 0310 	bic.w	r3, r3, #16
 8003f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	330c      	adds	r3, #12
 8003f92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f94:	61ba      	str	r2, [r7, #24]
 8003f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6979      	ldr	r1, [r7, #20]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e5      	bne.n	8003f74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fb6:	bf00      	nop
 8003fb8:	3754      	adds	r7, #84	; 0x54
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr

08003fc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff fed3 	bl	8003d86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b21      	cmp	r3, #33	; 0x21
 8003ffa:	d13e      	bne.n	800407a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	d114      	bne.n	8004030 <UART_Transmit_IT+0x48>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d110      	bne.n	8004030 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004022:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	1c9a      	adds	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]
 800402e:	e008      	b.n	8004042 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	1c59      	adds	r1, r3, #1
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6211      	str	r1, [r2, #32]
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4619      	mov	r1, r3
 8004050:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10f      	bne.n	8004076 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004064:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004074:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e000      	b.n	800407c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
  }
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fe64 	bl	8003d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b08c      	sub	sp, #48	; 0x30
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b22      	cmp	r3, #34	; 0x22
 80040c8:	f040 80ae 	bne.w	8004228 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d4:	d117      	bne.n	8004106 <UART_Receive_IT+0x50>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d113      	bne.n	8004106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28
 8004104:	e026      	b.n	8004154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004118:	d007      	beq.n	800412a <UART_Receive_IT+0x74>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <UART_Receive_IT+0x82>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	b2da      	uxtb	r2, r3
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	e008      	b.n	800414a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004144:	b2da      	uxtb	r2, r3
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29b      	uxth	r3, r3
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4619      	mov	r1, r3
 8004162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004164:	2b00      	cmp	r3, #0
 8004166:	d15d      	bne.n	8004224 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0220 	bic.w	r2, r2, #32
 8004176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d135      	bne.n	800421a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	613b      	str	r3, [r7, #16]
   return(result);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d4:	623a      	str	r2, [r7, #32]
 80041d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	69f9      	ldr	r1, [r7, #28]
 80041da:	6a3a      	ldr	r2, [r7, #32]
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e5      	bne.n	80041b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d10a      	bne.n	800420c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff fdc0 	bl	8003d98 <HAL_UARTEx_RxEventCallback>
 8004218:	e002      	b.n	8004220 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fc fb66 	bl	80008ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	e002      	b.n	800422a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	e000      	b.n	800422a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
  }
}
 800422a:	4618      	mov	r0, r3
 800422c:	3730      	adds	r7, #48	; 0x30
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800426e:	f023 030c 	bic.w	r3, r3, #12
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	430b      	orrs	r3, r1
 800427a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <UART_SetConfig+0x114>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d103      	bne.n	80042a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800429c:	f7fe ff22 	bl	80030e4 <HAL_RCC_GetPCLK2Freq>
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	e002      	b.n	80042aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042a4:	f7fe ff0a 	bl	80030bc <HAL_RCC_GetPCLK1Freq>
 80042a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	009a      	lsls	r2, r3, #2
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	4a22      	ldr	r2, [pc, #136]	; (800434c <UART_SetConfig+0x118>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	0119      	lsls	r1, r3, #4
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	009a      	lsls	r2, r3, #2
 80042d4:	441a      	add	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <UART_SetConfig+0x118>)
 80042e2:	fba3 0302 	umull	r0, r3, r3, r2
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2064      	movs	r0, #100	; 0x64
 80042ea:	fb00 f303 	mul.w	r3, r0, r3
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	3332      	adds	r3, #50	; 0x32
 80042f4:	4a15      	ldr	r2, [pc, #84]	; (800434c <UART_SetConfig+0x118>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004300:	4419      	add	r1, r3
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009a      	lsls	r2, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	fbb2 f2f3 	udiv	r2, r2, r3
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <UART_SetConfig+0x118>)
 800431a:	fba3 0302 	umull	r0, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	2064      	movs	r0, #100	; 0x64
 8004322:	fb00 f303 	mul.w	r3, r0, r3
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	3332      	adds	r3, #50	; 0x32
 800432c:	4a07      	ldr	r2, [pc, #28]	; (800434c <UART_SetConfig+0x118>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	f003 020f 	and.w	r2, r3, #15
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	440a      	add	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40013800 	.word	0x40013800
 800434c:	51eb851f 	.word	0x51eb851f

08004350 <siprintf>:
 8004350:	b40e      	push	{r1, r2, r3}
 8004352:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004356:	b500      	push	{lr}
 8004358:	b09c      	sub	sp, #112	; 0x70
 800435a:	ab1d      	add	r3, sp, #116	; 0x74
 800435c:	9002      	str	r0, [sp, #8]
 800435e:	9006      	str	r0, [sp, #24]
 8004360:	9107      	str	r1, [sp, #28]
 8004362:	9104      	str	r1, [sp, #16]
 8004364:	4808      	ldr	r0, [pc, #32]	; (8004388 <siprintf+0x38>)
 8004366:	4909      	ldr	r1, [pc, #36]	; (800438c <siprintf+0x3c>)
 8004368:	f853 2b04 	ldr.w	r2, [r3], #4
 800436c:	9105      	str	r1, [sp, #20]
 800436e:	6800      	ldr	r0, [r0, #0]
 8004370:	a902      	add	r1, sp, #8
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	f000 f9ba 	bl	80046ec <_svfiprintf_r>
 8004378:	2200      	movs	r2, #0
 800437a:	9b02      	ldr	r3, [sp, #8]
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	b01c      	add	sp, #112	; 0x70
 8004380:	f85d eb04 	ldr.w	lr, [sp], #4
 8004384:	b003      	add	sp, #12
 8004386:	4770      	bx	lr
 8004388:	20000058 	.word	0x20000058
 800438c:	ffff0208 	.word	0xffff0208

08004390 <siscanf>:
 8004390:	b40e      	push	{r1, r2, r3}
 8004392:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004396:	b530      	push	{r4, r5, lr}
 8004398:	b09c      	sub	sp, #112	; 0x70
 800439a:	ac1f      	add	r4, sp, #124	; 0x7c
 800439c:	f854 5b04 	ldr.w	r5, [r4], #4
 80043a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80043a4:	9002      	str	r0, [sp, #8]
 80043a6:	9006      	str	r0, [sp, #24]
 80043a8:	f7fb fed0 	bl	800014c <strlen>
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <siscanf+0x4c>)
 80043ae:	9003      	str	r0, [sp, #12]
 80043b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80043b2:	2300      	movs	r3, #0
 80043b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80043b6:	9314      	str	r3, [sp, #80]	; 0x50
 80043b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043bc:	9007      	str	r0, [sp, #28]
 80043be:	4808      	ldr	r0, [pc, #32]	; (80043e0 <siscanf+0x50>)
 80043c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80043c4:	462a      	mov	r2, r5
 80043c6:	4623      	mov	r3, r4
 80043c8:	a902      	add	r1, sp, #8
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	9401      	str	r4, [sp, #4]
 80043ce:	f000 fae5 	bl	800499c <__ssvfiscanf_r>
 80043d2:	b01c      	add	sp, #112	; 0x70
 80043d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043d8:	b003      	add	sp, #12
 80043da:	4770      	bx	lr
 80043dc:	080043e5 	.word	0x080043e5
 80043e0:	20000058 	.word	0x20000058

080043e4 <__seofread>:
 80043e4:	2000      	movs	r0, #0
 80043e6:	4770      	bx	lr

080043e8 <memset>:
 80043e8:	4603      	mov	r3, r0
 80043ea:	4402      	add	r2, r0
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d100      	bne.n	80043f2 <memset+0xa>
 80043f0:	4770      	bx	lr
 80043f2:	f803 1b01 	strb.w	r1, [r3], #1
 80043f6:	e7f9      	b.n	80043ec <memset+0x4>

080043f8 <__errno>:
 80043f8:	4b01      	ldr	r3, [pc, #4]	; (8004400 <__errno+0x8>)
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000058 	.word	0x20000058

08004404 <__libc_init_array>:
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	2600      	movs	r6, #0
 8004408:	4d0c      	ldr	r5, [pc, #48]	; (800443c <__libc_init_array+0x38>)
 800440a:	4c0d      	ldr	r4, [pc, #52]	; (8004440 <__libc_init_array+0x3c>)
 800440c:	1b64      	subs	r4, r4, r5
 800440e:	10a4      	asrs	r4, r4, #2
 8004410:	42a6      	cmp	r6, r4
 8004412:	d109      	bne.n	8004428 <__libc_init_array+0x24>
 8004414:	f001 f8fe 	bl	8005614 <_init>
 8004418:	2600      	movs	r6, #0
 800441a:	4d0a      	ldr	r5, [pc, #40]	; (8004444 <__libc_init_array+0x40>)
 800441c:	4c0a      	ldr	r4, [pc, #40]	; (8004448 <__libc_init_array+0x44>)
 800441e:	1b64      	subs	r4, r4, r5
 8004420:	10a4      	asrs	r4, r4, #2
 8004422:	42a6      	cmp	r6, r4
 8004424:	d105      	bne.n	8004432 <__libc_init_array+0x2e>
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	f855 3b04 	ldr.w	r3, [r5], #4
 800442c:	4798      	blx	r3
 800442e:	3601      	adds	r6, #1
 8004430:	e7ee      	b.n	8004410 <__libc_init_array+0xc>
 8004432:	f855 3b04 	ldr.w	r3, [r5], #4
 8004436:	4798      	blx	r3
 8004438:	3601      	adds	r6, #1
 800443a:	e7f2      	b.n	8004422 <__libc_init_array+0x1e>
 800443c:	08005878 	.word	0x08005878
 8004440:	08005878 	.word	0x08005878
 8004444:	08005878 	.word	0x08005878
 8004448:	0800587c 	.word	0x0800587c

0800444c <__retarget_lock_acquire_recursive>:
 800444c:	4770      	bx	lr

0800444e <__retarget_lock_release_recursive>:
 800444e:	4770      	bx	lr

08004450 <_free_r>:
 8004450:	b538      	push	{r3, r4, r5, lr}
 8004452:	4605      	mov	r5, r0
 8004454:	2900      	cmp	r1, #0
 8004456:	d040      	beq.n	80044da <_free_r+0x8a>
 8004458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800445c:	1f0c      	subs	r4, r1, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	bfb8      	it	lt
 8004462:	18e4      	addlt	r4, r4, r3
 8004464:	f000 f8dc 	bl	8004620 <__malloc_lock>
 8004468:	4a1c      	ldr	r2, [pc, #112]	; (80044dc <_free_r+0x8c>)
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	b933      	cbnz	r3, 800447c <_free_r+0x2c>
 800446e:	6063      	str	r3, [r4, #4]
 8004470:	6014      	str	r4, [r2, #0]
 8004472:	4628      	mov	r0, r5
 8004474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004478:	f000 b8d8 	b.w	800462c <__malloc_unlock>
 800447c:	42a3      	cmp	r3, r4
 800447e:	d908      	bls.n	8004492 <_free_r+0x42>
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	1821      	adds	r1, r4, r0
 8004484:	428b      	cmp	r3, r1
 8004486:	bf01      	itttt	eq
 8004488:	6819      	ldreq	r1, [r3, #0]
 800448a:	685b      	ldreq	r3, [r3, #4]
 800448c:	1809      	addeq	r1, r1, r0
 800448e:	6021      	streq	r1, [r4, #0]
 8004490:	e7ed      	b.n	800446e <_free_r+0x1e>
 8004492:	461a      	mov	r2, r3
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	b10b      	cbz	r3, 800449c <_free_r+0x4c>
 8004498:	42a3      	cmp	r3, r4
 800449a:	d9fa      	bls.n	8004492 <_free_r+0x42>
 800449c:	6811      	ldr	r1, [r2, #0]
 800449e:	1850      	adds	r0, r2, r1
 80044a0:	42a0      	cmp	r0, r4
 80044a2:	d10b      	bne.n	80044bc <_free_r+0x6c>
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	4401      	add	r1, r0
 80044a8:	1850      	adds	r0, r2, r1
 80044aa:	4283      	cmp	r3, r0
 80044ac:	6011      	str	r1, [r2, #0]
 80044ae:	d1e0      	bne.n	8004472 <_free_r+0x22>
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4408      	add	r0, r1
 80044b6:	6010      	str	r0, [r2, #0]
 80044b8:	6053      	str	r3, [r2, #4]
 80044ba:	e7da      	b.n	8004472 <_free_r+0x22>
 80044bc:	d902      	bls.n	80044c4 <_free_r+0x74>
 80044be:	230c      	movs	r3, #12
 80044c0:	602b      	str	r3, [r5, #0]
 80044c2:	e7d6      	b.n	8004472 <_free_r+0x22>
 80044c4:	6820      	ldr	r0, [r4, #0]
 80044c6:	1821      	adds	r1, r4, r0
 80044c8:	428b      	cmp	r3, r1
 80044ca:	bf01      	itttt	eq
 80044cc:	6819      	ldreq	r1, [r3, #0]
 80044ce:	685b      	ldreq	r3, [r3, #4]
 80044d0:	1809      	addeq	r1, r1, r0
 80044d2:	6021      	streq	r1, [r4, #0]
 80044d4:	6063      	str	r3, [r4, #4]
 80044d6:	6054      	str	r4, [r2, #4]
 80044d8:	e7cb      	b.n	8004472 <_free_r+0x22>
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	20000330 	.word	0x20000330

080044e0 <sbrk_aligned>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	4e0e      	ldr	r6, [pc, #56]	; (800451c <sbrk_aligned+0x3c>)
 80044e4:	460c      	mov	r4, r1
 80044e6:	6831      	ldr	r1, [r6, #0]
 80044e8:	4605      	mov	r5, r0
 80044ea:	b911      	cbnz	r1, 80044f2 <sbrk_aligned+0x12>
 80044ec:	f000 ff3a 	bl	8005364 <_sbrk_r>
 80044f0:	6030      	str	r0, [r6, #0]
 80044f2:	4621      	mov	r1, r4
 80044f4:	4628      	mov	r0, r5
 80044f6:	f000 ff35 	bl	8005364 <_sbrk_r>
 80044fa:	1c43      	adds	r3, r0, #1
 80044fc:	d00a      	beq.n	8004514 <sbrk_aligned+0x34>
 80044fe:	1cc4      	adds	r4, r0, #3
 8004500:	f024 0403 	bic.w	r4, r4, #3
 8004504:	42a0      	cmp	r0, r4
 8004506:	d007      	beq.n	8004518 <sbrk_aligned+0x38>
 8004508:	1a21      	subs	r1, r4, r0
 800450a:	4628      	mov	r0, r5
 800450c:	f000 ff2a 	bl	8005364 <_sbrk_r>
 8004510:	3001      	adds	r0, #1
 8004512:	d101      	bne.n	8004518 <sbrk_aligned+0x38>
 8004514:	f04f 34ff 	mov.w	r4, #4294967295
 8004518:	4620      	mov	r0, r4
 800451a:	bd70      	pop	{r4, r5, r6, pc}
 800451c:	20000334 	.word	0x20000334

08004520 <_malloc_r>:
 8004520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004524:	1ccd      	adds	r5, r1, #3
 8004526:	f025 0503 	bic.w	r5, r5, #3
 800452a:	3508      	adds	r5, #8
 800452c:	2d0c      	cmp	r5, #12
 800452e:	bf38      	it	cc
 8004530:	250c      	movcc	r5, #12
 8004532:	2d00      	cmp	r5, #0
 8004534:	4607      	mov	r7, r0
 8004536:	db01      	blt.n	800453c <_malloc_r+0x1c>
 8004538:	42a9      	cmp	r1, r5
 800453a:	d905      	bls.n	8004548 <_malloc_r+0x28>
 800453c:	230c      	movs	r3, #12
 800453e:	2600      	movs	r6, #0
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4630      	mov	r0, r6
 8004544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004548:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800461c <_malloc_r+0xfc>
 800454c:	f000 f868 	bl	8004620 <__malloc_lock>
 8004550:	f8d8 3000 	ldr.w	r3, [r8]
 8004554:	461c      	mov	r4, r3
 8004556:	bb5c      	cbnz	r4, 80045b0 <_malloc_r+0x90>
 8004558:	4629      	mov	r1, r5
 800455a:	4638      	mov	r0, r7
 800455c:	f7ff ffc0 	bl	80044e0 <sbrk_aligned>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	4604      	mov	r4, r0
 8004564:	d155      	bne.n	8004612 <_malloc_r+0xf2>
 8004566:	f8d8 4000 	ldr.w	r4, [r8]
 800456a:	4626      	mov	r6, r4
 800456c:	2e00      	cmp	r6, #0
 800456e:	d145      	bne.n	80045fc <_malloc_r+0xdc>
 8004570:	2c00      	cmp	r4, #0
 8004572:	d048      	beq.n	8004606 <_malloc_r+0xe6>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	4631      	mov	r1, r6
 8004578:	4638      	mov	r0, r7
 800457a:	eb04 0903 	add.w	r9, r4, r3
 800457e:	f000 fef1 	bl	8005364 <_sbrk_r>
 8004582:	4581      	cmp	r9, r0
 8004584:	d13f      	bne.n	8004606 <_malloc_r+0xe6>
 8004586:	6821      	ldr	r1, [r4, #0]
 8004588:	4638      	mov	r0, r7
 800458a:	1a6d      	subs	r5, r5, r1
 800458c:	4629      	mov	r1, r5
 800458e:	f7ff ffa7 	bl	80044e0 <sbrk_aligned>
 8004592:	3001      	adds	r0, #1
 8004594:	d037      	beq.n	8004606 <_malloc_r+0xe6>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	442b      	add	r3, r5
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	f8d8 3000 	ldr.w	r3, [r8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d038      	beq.n	8004616 <_malloc_r+0xf6>
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	42a2      	cmp	r2, r4
 80045a8:	d12b      	bne.n	8004602 <_malloc_r+0xe2>
 80045aa:	2200      	movs	r2, #0
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	e00f      	b.n	80045d0 <_malloc_r+0xb0>
 80045b0:	6822      	ldr	r2, [r4, #0]
 80045b2:	1b52      	subs	r2, r2, r5
 80045b4:	d41f      	bmi.n	80045f6 <_malloc_r+0xd6>
 80045b6:	2a0b      	cmp	r2, #11
 80045b8:	d917      	bls.n	80045ea <_malloc_r+0xca>
 80045ba:	1961      	adds	r1, r4, r5
 80045bc:	42a3      	cmp	r3, r4
 80045be:	6025      	str	r5, [r4, #0]
 80045c0:	bf18      	it	ne
 80045c2:	6059      	strne	r1, [r3, #4]
 80045c4:	6863      	ldr	r3, [r4, #4]
 80045c6:	bf08      	it	eq
 80045c8:	f8c8 1000 	streq.w	r1, [r8]
 80045cc:	5162      	str	r2, [r4, r5]
 80045ce:	604b      	str	r3, [r1, #4]
 80045d0:	4638      	mov	r0, r7
 80045d2:	f104 060b 	add.w	r6, r4, #11
 80045d6:	f000 f829 	bl	800462c <__malloc_unlock>
 80045da:	f026 0607 	bic.w	r6, r6, #7
 80045de:	1d23      	adds	r3, r4, #4
 80045e0:	1af2      	subs	r2, r6, r3
 80045e2:	d0ae      	beq.n	8004542 <_malloc_r+0x22>
 80045e4:	1b9b      	subs	r3, r3, r6
 80045e6:	50a3      	str	r3, [r4, r2]
 80045e8:	e7ab      	b.n	8004542 <_malloc_r+0x22>
 80045ea:	42a3      	cmp	r3, r4
 80045ec:	6862      	ldr	r2, [r4, #4]
 80045ee:	d1dd      	bne.n	80045ac <_malloc_r+0x8c>
 80045f0:	f8c8 2000 	str.w	r2, [r8]
 80045f4:	e7ec      	b.n	80045d0 <_malloc_r+0xb0>
 80045f6:	4623      	mov	r3, r4
 80045f8:	6864      	ldr	r4, [r4, #4]
 80045fa:	e7ac      	b.n	8004556 <_malloc_r+0x36>
 80045fc:	4634      	mov	r4, r6
 80045fe:	6876      	ldr	r6, [r6, #4]
 8004600:	e7b4      	b.n	800456c <_malloc_r+0x4c>
 8004602:	4613      	mov	r3, r2
 8004604:	e7cc      	b.n	80045a0 <_malloc_r+0x80>
 8004606:	230c      	movs	r3, #12
 8004608:	4638      	mov	r0, r7
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	f000 f80e 	bl	800462c <__malloc_unlock>
 8004610:	e797      	b.n	8004542 <_malloc_r+0x22>
 8004612:	6025      	str	r5, [r4, #0]
 8004614:	e7dc      	b.n	80045d0 <_malloc_r+0xb0>
 8004616:	605b      	str	r3, [r3, #4]
 8004618:	deff      	udf	#255	; 0xff
 800461a:	bf00      	nop
 800461c:	20000330 	.word	0x20000330

08004620 <__malloc_lock>:
 8004620:	4801      	ldr	r0, [pc, #4]	; (8004628 <__malloc_lock+0x8>)
 8004622:	f7ff bf13 	b.w	800444c <__retarget_lock_acquire_recursive>
 8004626:	bf00      	nop
 8004628:	2000032c 	.word	0x2000032c

0800462c <__malloc_unlock>:
 800462c:	4801      	ldr	r0, [pc, #4]	; (8004634 <__malloc_unlock+0x8>)
 800462e:	f7ff bf0e 	b.w	800444e <__retarget_lock_release_recursive>
 8004632:	bf00      	nop
 8004634:	2000032c 	.word	0x2000032c

08004638 <__ssputs_r>:
 8004638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463c:	461f      	mov	r7, r3
 800463e:	688e      	ldr	r6, [r1, #8]
 8004640:	4682      	mov	sl, r0
 8004642:	42be      	cmp	r6, r7
 8004644:	460c      	mov	r4, r1
 8004646:	4690      	mov	r8, r2
 8004648:	680b      	ldr	r3, [r1, #0]
 800464a:	d82c      	bhi.n	80046a6 <__ssputs_r+0x6e>
 800464c:	898a      	ldrh	r2, [r1, #12]
 800464e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004652:	d026      	beq.n	80046a2 <__ssputs_r+0x6a>
 8004654:	6965      	ldr	r5, [r4, #20]
 8004656:	6909      	ldr	r1, [r1, #16]
 8004658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800465c:	eba3 0901 	sub.w	r9, r3, r1
 8004660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004664:	1c7b      	adds	r3, r7, #1
 8004666:	444b      	add	r3, r9
 8004668:	106d      	asrs	r5, r5, #1
 800466a:	429d      	cmp	r5, r3
 800466c:	bf38      	it	cc
 800466e:	461d      	movcc	r5, r3
 8004670:	0553      	lsls	r3, r2, #21
 8004672:	d527      	bpl.n	80046c4 <__ssputs_r+0x8c>
 8004674:	4629      	mov	r1, r5
 8004676:	f7ff ff53 	bl	8004520 <_malloc_r>
 800467a:	4606      	mov	r6, r0
 800467c:	b360      	cbz	r0, 80046d8 <__ssputs_r+0xa0>
 800467e:	464a      	mov	r2, r9
 8004680:	6921      	ldr	r1, [r4, #16]
 8004682:	f000 fe8d 	bl	80053a0 <memcpy>
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800468c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004690:	81a3      	strh	r3, [r4, #12]
 8004692:	6126      	str	r6, [r4, #16]
 8004694:	444e      	add	r6, r9
 8004696:	6026      	str	r6, [r4, #0]
 8004698:	463e      	mov	r6, r7
 800469a:	6165      	str	r5, [r4, #20]
 800469c:	eba5 0509 	sub.w	r5, r5, r9
 80046a0:	60a5      	str	r5, [r4, #8]
 80046a2:	42be      	cmp	r6, r7
 80046a4:	d900      	bls.n	80046a8 <__ssputs_r+0x70>
 80046a6:	463e      	mov	r6, r7
 80046a8:	4632      	mov	r2, r6
 80046aa:	4641      	mov	r1, r8
 80046ac:	6820      	ldr	r0, [r4, #0]
 80046ae:	f000 fe3e 	bl	800532e <memmove>
 80046b2:	2000      	movs	r0, #0
 80046b4:	68a3      	ldr	r3, [r4, #8]
 80046b6:	1b9b      	subs	r3, r3, r6
 80046b8:	60a3      	str	r3, [r4, #8]
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	4433      	add	r3, r6
 80046be:	6023      	str	r3, [r4, #0]
 80046c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c4:	462a      	mov	r2, r5
 80046c6:	f000 fe79 	bl	80053bc <_realloc_r>
 80046ca:	4606      	mov	r6, r0
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d1e0      	bne.n	8004692 <__ssputs_r+0x5a>
 80046d0:	4650      	mov	r0, sl
 80046d2:	6921      	ldr	r1, [r4, #16]
 80046d4:	f7ff febc 	bl	8004450 <_free_r>
 80046d8:	230c      	movs	r3, #12
 80046da:	f8ca 3000 	str.w	r3, [sl]
 80046de:	89a3      	ldrh	r3, [r4, #12]
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e8:	81a3      	strh	r3, [r4, #12]
 80046ea:	e7e9      	b.n	80046c0 <__ssputs_r+0x88>

080046ec <_svfiprintf_r>:
 80046ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f0:	4698      	mov	r8, r3
 80046f2:	898b      	ldrh	r3, [r1, #12]
 80046f4:	4607      	mov	r7, r0
 80046f6:	061b      	lsls	r3, r3, #24
 80046f8:	460d      	mov	r5, r1
 80046fa:	4614      	mov	r4, r2
 80046fc:	b09d      	sub	sp, #116	; 0x74
 80046fe:	d50e      	bpl.n	800471e <_svfiprintf_r+0x32>
 8004700:	690b      	ldr	r3, [r1, #16]
 8004702:	b963      	cbnz	r3, 800471e <_svfiprintf_r+0x32>
 8004704:	2140      	movs	r1, #64	; 0x40
 8004706:	f7ff ff0b 	bl	8004520 <_malloc_r>
 800470a:	6028      	str	r0, [r5, #0]
 800470c:	6128      	str	r0, [r5, #16]
 800470e:	b920      	cbnz	r0, 800471a <_svfiprintf_r+0x2e>
 8004710:	230c      	movs	r3, #12
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	f04f 30ff 	mov.w	r0, #4294967295
 8004718:	e0d0      	b.n	80048bc <_svfiprintf_r+0x1d0>
 800471a:	2340      	movs	r3, #64	; 0x40
 800471c:	616b      	str	r3, [r5, #20]
 800471e:	2300      	movs	r3, #0
 8004720:	9309      	str	r3, [sp, #36]	; 0x24
 8004722:	2320      	movs	r3, #32
 8004724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004728:	2330      	movs	r3, #48	; 0x30
 800472a:	f04f 0901 	mov.w	r9, #1
 800472e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004732:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80048d4 <_svfiprintf_r+0x1e8>
 8004736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800473a:	4623      	mov	r3, r4
 800473c:	469a      	mov	sl, r3
 800473e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004742:	b10a      	cbz	r2, 8004748 <_svfiprintf_r+0x5c>
 8004744:	2a25      	cmp	r2, #37	; 0x25
 8004746:	d1f9      	bne.n	800473c <_svfiprintf_r+0x50>
 8004748:	ebba 0b04 	subs.w	fp, sl, r4
 800474c:	d00b      	beq.n	8004766 <_svfiprintf_r+0x7a>
 800474e:	465b      	mov	r3, fp
 8004750:	4622      	mov	r2, r4
 8004752:	4629      	mov	r1, r5
 8004754:	4638      	mov	r0, r7
 8004756:	f7ff ff6f 	bl	8004638 <__ssputs_r>
 800475a:	3001      	adds	r0, #1
 800475c:	f000 80a9 	beq.w	80048b2 <_svfiprintf_r+0x1c6>
 8004760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004762:	445a      	add	r2, fp
 8004764:	9209      	str	r2, [sp, #36]	; 0x24
 8004766:	f89a 3000 	ldrb.w	r3, [sl]
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 80a1 	beq.w	80048b2 <_svfiprintf_r+0x1c6>
 8004770:	2300      	movs	r3, #0
 8004772:	f04f 32ff 	mov.w	r2, #4294967295
 8004776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800477a:	f10a 0a01 	add.w	sl, sl, #1
 800477e:	9304      	str	r3, [sp, #16]
 8004780:	9307      	str	r3, [sp, #28]
 8004782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004786:	931a      	str	r3, [sp, #104]	; 0x68
 8004788:	4654      	mov	r4, sl
 800478a:	2205      	movs	r2, #5
 800478c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004790:	4850      	ldr	r0, [pc, #320]	; (80048d4 <_svfiprintf_r+0x1e8>)
 8004792:	f000 fdf7 	bl	8005384 <memchr>
 8004796:	9a04      	ldr	r2, [sp, #16]
 8004798:	b9d8      	cbnz	r0, 80047d2 <_svfiprintf_r+0xe6>
 800479a:	06d0      	lsls	r0, r2, #27
 800479c:	bf44      	itt	mi
 800479e:	2320      	movmi	r3, #32
 80047a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a4:	0711      	lsls	r1, r2, #28
 80047a6:	bf44      	itt	mi
 80047a8:	232b      	movmi	r3, #43	; 0x2b
 80047aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ae:	f89a 3000 	ldrb.w	r3, [sl]
 80047b2:	2b2a      	cmp	r3, #42	; 0x2a
 80047b4:	d015      	beq.n	80047e2 <_svfiprintf_r+0xf6>
 80047b6:	4654      	mov	r4, sl
 80047b8:	2000      	movs	r0, #0
 80047ba:	f04f 0c0a 	mov.w	ip, #10
 80047be:	9a07      	ldr	r2, [sp, #28]
 80047c0:	4621      	mov	r1, r4
 80047c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047c6:	3b30      	subs	r3, #48	; 0x30
 80047c8:	2b09      	cmp	r3, #9
 80047ca:	d94d      	bls.n	8004868 <_svfiprintf_r+0x17c>
 80047cc:	b1b0      	cbz	r0, 80047fc <_svfiprintf_r+0x110>
 80047ce:	9207      	str	r2, [sp, #28]
 80047d0:	e014      	b.n	80047fc <_svfiprintf_r+0x110>
 80047d2:	eba0 0308 	sub.w	r3, r0, r8
 80047d6:	fa09 f303 	lsl.w	r3, r9, r3
 80047da:	4313      	orrs	r3, r2
 80047dc:	46a2      	mov	sl, r4
 80047de:	9304      	str	r3, [sp, #16]
 80047e0:	e7d2      	b.n	8004788 <_svfiprintf_r+0x9c>
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	1d19      	adds	r1, r3, #4
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	9103      	str	r1, [sp, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bfbb      	ittet	lt
 80047ee:	425b      	neglt	r3, r3
 80047f0:	f042 0202 	orrlt.w	r2, r2, #2
 80047f4:	9307      	strge	r3, [sp, #28]
 80047f6:	9307      	strlt	r3, [sp, #28]
 80047f8:	bfb8      	it	lt
 80047fa:	9204      	strlt	r2, [sp, #16]
 80047fc:	7823      	ldrb	r3, [r4, #0]
 80047fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004800:	d10c      	bne.n	800481c <_svfiprintf_r+0x130>
 8004802:	7863      	ldrb	r3, [r4, #1]
 8004804:	2b2a      	cmp	r3, #42	; 0x2a
 8004806:	d134      	bne.n	8004872 <_svfiprintf_r+0x186>
 8004808:	9b03      	ldr	r3, [sp, #12]
 800480a:	3402      	adds	r4, #2
 800480c:	1d1a      	adds	r2, r3, #4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	9203      	str	r2, [sp, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	bfb8      	it	lt
 8004816:	f04f 33ff 	movlt.w	r3, #4294967295
 800481a:	9305      	str	r3, [sp, #20]
 800481c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80048d8 <_svfiprintf_r+0x1ec>
 8004820:	2203      	movs	r2, #3
 8004822:	4650      	mov	r0, sl
 8004824:	7821      	ldrb	r1, [r4, #0]
 8004826:	f000 fdad 	bl	8005384 <memchr>
 800482a:	b138      	cbz	r0, 800483c <_svfiprintf_r+0x150>
 800482c:	2240      	movs	r2, #64	; 0x40
 800482e:	9b04      	ldr	r3, [sp, #16]
 8004830:	eba0 000a 	sub.w	r0, r0, sl
 8004834:	4082      	lsls	r2, r0
 8004836:	4313      	orrs	r3, r2
 8004838:	3401      	adds	r4, #1
 800483a:	9304      	str	r3, [sp, #16]
 800483c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004840:	2206      	movs	r2, #6
 8004842:	4826      	ldr	r0, [pc, #152]	; (80048dc <_svfiprintf_r+0x1f0>)
 8004844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004848:	f000 fd9c 	bl	8005384 <memchr>
 800484c:	2800      	cmp	r0, #0
 800484e:	d038      	beq.n	80048c2 <_svfiprintf_r+0x1d6>
 8004850:	4b23      	ldr	r3, [pc, #140]	; (80048e0 <_svfiprintf_r+0x1f4>)
 8004852:	bb1b      	cbnz	r3, 800489c <_svfiprintf_r+0x1b0>
 8004854:	9b03      	ldr	r3, [sp, #12]
 8004856:	3307      	adds	r3, #7
 8004858:	f023 0307 	bic.w	r3, r3, #7
 800485c:	3308      	adds	r3, #8
 800485e:	9303      	str	r3, [sp, #12]
 8004860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004862:	4433      	add	r3, r6
 8004864:	9309      	str	r3, [sp, #36]	; 0x24
 8004866:	e768      	b.n	800473a <_svfiprintf_r+0x4e>
 8004868:	460c      	mov	r4, r1
 800486a:	2001      	movs	r0, #1
 800486c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004870:	e7a6      	b.n	80047c0 <_svfiprintf_r+0xd4>
 8004872:	2300      	movs	r3, #0
 8004874:	f04f 0c0a 	mov.w	ip, #10
 8004878:	4619      	mov	r1, r3
 800487a:	3401      	adds	r4, #1
 800487c:	9305      	str	r3, [sp, #20]
 800487e:	4620      	mov	r0, r4
 8004880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004884:	3a30      	subs	r2, #48	; 0x30
 8004886:	2a09      	cmp	r2, #9
 8004888:	d903      	bls.n	8004892 <_svfiprintf_r+0x1a6>
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0c6      	beq.n	800481c <_svfiprintf_r+0x130>
 800488e:	9105      	str	r1, [sp, #20]
 8004890:	e7c4      	b.n	800481c <_svfiprintf_r+0x130>
 8004892:	4604      	mov	r4, r0
 8004894:	2301      	movs	r3, #1
 8004896:	fb0c 2101 	mla	r1, ip, r1, r2
 800489a:	e7f0      	b.n	800487e <_svfiprintf_r+0x192>
 800489c:	ab03      	add	r3, sp, #12
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	462a      	mov	r2, r5
 80048a2:	4638      	mov	r0, r7
 80048a4:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <_svfiprintf_r+0x1f8>)
 80048a6:	a904      	add	r1, sp, #16
 80048a8:	f3af 8000 	nop.w
 80048ac:	1c42      	adds	r2, r0, #1
 80048ae:	4606      	mov	r6, r0
 80048b0:	d1d6      	bne.n	8004860 <_svfiprintf_r+0x174>
 80048b2:	89ab      	ldrh	r3, [r5, #12]
 80048b4:	065b      	lsls	r3, r3, #25
 80048b6:	f53f af2d 	bmi.w	8004714 <_svfiprintf_r+0x28>
 80048ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048bc:	b01d      	add	sp, #116	; 0x74
 80048be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c2:	ab03      	add	r3, sp, #12
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	462a      	mov	r2, r5
 80048c8:	4638      	mov	r0, r7
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <_svfiprintf_r+0x1f8>)
 80048cc:	a904      	add	r1, sp, #16
 80048ce:	f000 fa4f 	bl	8004d70 <_printf_i>
 80048d2:	e7eb      	b.n	80048ac <_svfiprintf_r+0x1c0>
 80048d4:	08005726 	.word	0x08005726
 80048d8:	0800572c 	.word	0x0800572c
 80048dc:	08005730 	.word	0x08005730
 80048e0:	00000000 	.word	0x00000000
 80048e4:	08004639 	.word	0x08004639

080048e8 <_sungetc_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	1c4b      	adds	r3, r1, #1
 80048ec:	4614      	mov	r4, r2
 80048ee:	d103      	bne.n	80048f8 <_sungetc_r+0x10>
 80048f0:	f04f 35ff 	mov.w	r5, #4294967295
 80048f4:	4628      	mov	r0, r5
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	8993      	ldrh	r3, [r2, #12]
 80048fa:	b2cd      	uxtb	r5, r1
 80048fc:	f023 0320 	bic.w	r3, r3, #32
 8004900:	8193      	strh	r3, [r2, #12]
 8004902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004904:	6852      	ldr	r2, [r2, #4]
 8004906:	b18b      	cbz	r3, 800492c <_sungetc_r+0x44>
 8004908:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800490a:	4293      	cmp	r3, r2
 800490c:	dd08      	ble.n	8004920 <_sungetc_r+0x38>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	1e5a      	subs	r2, r3, #1
 8004912:	6022      	str	r2, [r4, #0]
 8004914:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004918:	6863      	ldr	r3, [r4, #4]
 800491a:	3301      	adds	r3, #1
 800491c:	6063      	str	r3, [r4, #4]
 800491e:	e7e9      	b.n	80048f4 <_sungetc_r+0xc>
 8004920:	4621      	mov	r1, r4
 8004922:	f000 fccc 	bl	80052be <__submore>
 8004926:	2800      	cmp	r0, #0
 8004928:	d0f1      	beq.n	800490e <_sungetc_r+0x26>
 800492a:	e7e1      	b.n	80048f0 <_sungetc_r+0x8>
 800492c:	6921      	ldr	r1, [r4, #16]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	b151      	cbz	r1, 8004948 <_sungetc_r+0x60>
 8004932:	4299      	cmp	r1, r3
 8004934:	d208      	bcs.n	8004948 <_sungetc_r+0x60>
 8004936:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800493a:	42a9      	cmp	r1, r5
 800493c:	d104      	bne.n	8004948 <_sungetc_r+0x60>
 800493e:	3b01      	subs	r3, #1
 8004940:	3201      	adds	r2, #1
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	6062      	str	r2, [r4, #4]
 8004946:	e7d5      	b.n	80048f4 <_sungetc_r+0xc>
 8004948:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800494c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004950:	6363      	str	r3, [r4, #52]	; 0x34
 8004952:	2303      	movs	r3, #3
 8004954:	63a3      	str	r3, [r4, #56]	; 0x38
 8004956:	4623      	mov	r3, r4
 8004958:	f803 5f46 	strb.w	r5, [r3, #70]!
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	2301      	movs	r3, #1
 8004960:	e7dc      	b.n	800491c <_sungetc_r+0x34>

08004962 <__ssrefill_r>:
 8004962:	b510      	push	{r4, lr}
 8004964:	460c      	mov	r4, r1
 8004966:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004968:	b169      	cbz	r1, 8004986 <__ssrefill_r+0x24>
 800496a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800496e:	4299      	cmp	r1, r3
 8004970:	d001      	beq.n	8004976 <__ssrefill_r+0x14>
 8004972:	f7ff fd6d 	bl	8004450 <_free_r>
 8004976:	2000      	movs	r0, #0
 8004978:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800497a:	6360      	str	r0, [r4, #52]	; 0x34
 800497c:	6063      	str	r3, [r4, #4]
 800497e:	b113      	cbz	r3, 8004986 <__ssrefill_r+0x24>
 8004980:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	bd10      	pop	{r4, pc}
 8004986:	6923      	ldr	r3, [r4, #16]
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	2300      	movs	r3, #0
 8004990:	6063      	str	r3, [r4, #4]
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	f043 0320 	orr.w	r3, r3, #32
 8004998:	81a3      	strh	r3, [r4, #12]
 800499a:	e7f3      	b.n	8004984 <__ssrefill_r+0x22>

0800499c <__ssvfiscanf_r>:
 800499c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a0:	460c      	mov	r4, r1
 80049a2:	2100      	movs	r1, #0
 80049a4:	4606      	mov	r6, r0
 80049a6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80049aa:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80049ae:	49a6      	ldr	r1, [pc, #664]	; (8004c48 <__ssvfiscanf_r+0x2ac>)
 80049b0:	f10d 0804 	add.w	r8, sp, #4
 80049b4:	91a0      	str	r1, [sp, #640]	; 0x280
 80049b6:	49a5      	ldr	r1, [pc, #660]	; (8004c4c <__ssvfiscanf_r+0x2b0>)
 80049b8:	4fa5      	ldr	r7, [pc, #660]	; (8004c50 <__ssvfiscanf_r+0x2b4>)
 80049ba:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004c54 <__ssvfiscanf_r+0x2b8>
 80049be:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80049c2:	91a1      	str	r1, [sp, #644]	; 0x284
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	7813      	ldrb	r3, [r2, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 815a 	beq.w	8004c82 <__ssvfiscanf_r+0x2e6>
 80049ce:	5cf9      	ldrb	r1, [r7, r3]
 80049d0:	1c55      	adds	r5, r2, #1
 80049d2:	f011 0108 	ands.w	r1, r1, #8
 80049d6:	d019      	beq.n	8004a0c <__ssvfiscanf_r+0x70>
 80049d8:	6863      	ldr	r3, [r4, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	dd0f      	ble.n	80049fe <__ssvfiscanf_r+0x62>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	5cba      	ldrb	r2, [r7, r2]
 80049e4:	0712      	lsls	r2, r2, #28
 80049e6:	d401      	bmi.n	80049ec <__ssvfiscanf_r+0x50>
 80049e8:	462a      	mov	r2, r5
 80049ea:	e7ec      	b.n	80049c6 <__ssvfiscanf_r+0x2a>
 80049ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80049ee:	3301      	adds	r3, #1
 80049f0:	3201      	adds	r2, #1
 80049f2:	9245      	str	r2, [sp, #276]	; 0x114
 80049f4:	6862      	ldr	r2, [r4, #4]
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	3a01      	subs	r2, #1
 80049fa:	6062      	str	r2, [r4, #4]
 80049fc:	e7ec      	b.n	80049d8 <__ssvfiscanf_r+0x3c>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4630      	mov	r0, r6
 8004a02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004a04:	4798      	blx	r3
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d0e9      	beq.n	80049de <__ssvfiscanf_r+0x42>
 8004a0a:	e7ed      	b.n	80049e8 <__ssvfiscanf_r+0x4c>
 8004a0c:	2b25      	cmp	r3, #37	; 0x25
 8004a0e:	d012      	beq.n	8004a36 <__ssvfiscanf_r+0x9a>
 8004a10:	469a      	mov	sl, r3
 8004a12:	6863      	ldr	r3, [r4, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f340 8092 	ble.w	8004b3e <__ssvfiscanf_r+0x1a2>
 8004a1a:	6822      	ldr	r2, [r4, #0]
 8004a1c:	7813      	ldrb	r3, [r2, #0]
 8004a1e:	4553      	cmp	r3, sl
 8004a20:	f040 812f 	bne.w	8004c82 <__ssvfiscanf_r+0x2e6>
 8004a24:	6863      	ldr	r3, [r4, #4]
 8004a26:	3201      	adds	r2, #1
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	6063      	str	r3, [r4, #4]
 8004a2c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004a2e:	6022      	str	r2, [r4, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	9345      	str	r3, [sp, #276]	; 0x114
 8004a34:	e7d8      	b.n	80049e8 <__ssvfiscanf_r+0x4c>
 8004a36:	9141      	str	r1, [sp, #260]	; 0x104
 8004a38:	9143      	str	r1, [sp, #268]	; 0x10c
 8004a3a:	7853      	ldrb	r3, [r2, #1]
 8004a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3e:	bf04      	itt	eq
 8004a40:	2310      	moveq	r3, #16
 8004a42:	1c95      	addeq	r5, r2, #2
 8004a44:	f04f 020a 	mov.w	r2, #10
 8004a48:	bf08      	it	eq
 8004a4a:	9341      	streq	r3, [sp, #260]	; 0x104
 8004a4c:	46aa      	mov	sl, r5
 8004a4e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004a52:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004a56:	2b09      	cmp	r3, #9
 8004a58:	d91c      	bls.n	8004a94 <__ssvfiscanf_r+0xf8>
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	487d      	ldr	r0, [pc, #500]	; (8004c54 <__ssvfiscanf_r+0x2b8>)
 8004a5e:	f000 fc91 	bl	8005384 <memchr>
 8004a62:	b138      	cbz	r0, 8004a74 <__ssvfiscanf_r+0xd8>
 8004a64:	2301      	movs	r3, #1
 8004a66:	4655      	mov	r5, sl
 8004a68:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004a6a:	eba0 0009 	sub.w	r0, r0, r9
 8004a6e:	4083      	lsls	r3, r0
 8004a70:	4313      	orrs	r3, r2
 8004a72:	9341      	str	r3, [sp, #260]	; 0x104
 8004a74:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a78:	2b78      	cmp	r3, #120	; 0x78
 8004a7a:	d806      	bhi.n	8004a8a <__ssvfiscanf_r+0xee>
 8004a7c:	2b57      	cmp	r3, #87	; 0x57
 8004a7e:	d810      	bhi.n	8004aa2 <__ssvfiscanf_r+0x106>
 8004a80:	2b25      	cmp	r3, #37	; 0x25
 8004a82:	d0c5      	beq.n	8004a10 <__ssvfiscanf_r+0x74>
 8004a84:	d856      	bhi.n	8004b34 <__ssvfiscanf_r+0x198>
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d064      	beq.n	8004b54 <__ssvfiscanf_r+0x1b8>
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	9347      	str	r3, [sp, #284]	; 0x11c
 8004a8e:	230a      	movs	r3, #10
 8004a90:	9342      	str	r3, [sp, #264]	; 0x108
 8004a92:	e075      	b.n	8004b80 <__ssvfiscanf_r+0x1e4>
 8004a94:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004a96:	4655      	mov	r5, sl
 8004a98:	fb02 1103 	mla	r1, r2, r3, r1
 8004a9c:	3930      	subs	r1, #48	; 0x30
 8004a9e:	9143      	str	r1, [sp, #268]	; 0x10c
 8004aa0:	e7d4      	b.n	8004a4c <__ssvfiscanf_r+0xb0>
 8004aa2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8004aa6:	2a20      	cmp	r2, #32
 8004aa8:	d8ef      	bhi.n	8004a8a <__ssvfiscanf_r+0xee>
 8004aaa:	a101      	add	r1, pc, #4	; (adr r1, 8004ab0 <__ssvfiscanf_r+0x114>)
 8004aac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ab0:	08004b63 	.word	0x08004b63
 8004ab4:	08004a8b 	.word	0x08004a8b
 8004ab8:	08004a8b 	.word	0x08004a8b
 8004abc:	08004bc1 	.word	0x08004bc1
 8004ac0:	08004a8b 	.word	0x08004a8b
 8004ac4:	08004a8b 	.word	0x08004a8b
 8004ac8:	08004a8b 	.word	0x08004a8b
 8004acc:	08004a8b 	.word	0x08004a8b
 8004ad0:	08004a8b 	.word	0x08004a8b
 8004ad4:	08004a8b 	.word	0x08004a8b
 8004ad8:	08004a8b 	.word	0x08004a8b
 8004adc:	08004bd7 	.word	0x08004bd7
 8004ae0:	08004bbd 	.word	0x08004bbd
 8004ae4:	08004b3b 	.word	0x08004b3b
 8004ae8:	08004b3b 	.word	0x08004b3b
 8004aec:	08004b3b 	.word	0x08004b3b
 8004af0:	08004a8b 	.word	0x08004a8b
 8004af4:	08004b79 	.word	0x08004b79
 8004af8:	08004a8b 	.word	0x08004a8b
 8004afc:	08004a8b 	.word	0x08004a8b
 8004b00:	08004a8b 	.word	0x08004a8b
 8004b04:	08004a8b 	.word	0x08004a8b
 8004b08:	08004be7 	.word	0x08004be7
 8004b0c:	08004bb5 	.word	0x08004bb5
 8004b10:	08004b5b 	.word	0x08004b5b
 8004b14:	08004a8b 	.word	0x08004a8b
 8004b18:	08004a8b 	.word	0x08004a8b
 8004b1c:	08004be3 	.word	0x08004be3
 8004b20:	08004a8b 	.word	0x08004a8b
 8004b24:	08004bbd 	.word	0x08004bbd
 8004b28:	08004a8b 	.word	0x08004a8b
 8004b2c:	08004a8b 	.word	0x08004a8b
 8004b30:	08004b63 	.word	0x08004b63
 8004b34:	3b45      	subs	r3, #69	; 0x45
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d8a7      	bhi.n	8004a8a <__ssvfiscanf_r+0xee>
 8004b3a:	2305      	movs	r3, #5
 8004b3c:	e01f      	b.n	8004b7e <__ssvfiscanf_r+0x1e2>
 8004b3e:	4621      	mov	r1, r4
 8004b40:	4630      	mov	r0, r6
 8004b42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004b44:	4798      	blx	r3
 8004b46:	2800      	cmp	r0, #0
 8004b48:	f43f af67 	beq.w	8004a1a <__ssvfiscanf_r+0x7e>
 8004b4c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	f040 808d 	bne.w	8004c6e <__ssvfiscanf_r+0x2d2>
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295
 8004b58:	e08f      	b.n	8004c7a <__ssvfiscanf_r+0x2de>
 8004b5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004b5c:	f042 0220 	orr.w	r2, r2, #32
 8004b60:	9241      	str	r2, [sp, #260]	; 0x104
 8004b62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b68:	9241      	str	r2, [sp, #260]	; 0x104
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	2b6f      	cmp	r3, #111	; 0x6f
 8004b6e:	bf34      	ite	cc
 8004b70:	2303      	movcc	r3, #3
 8004b72:	2304      	movcs	r3, #4
 8004b74:	9242      	str	r2, [sp, #264]	; 0x108
 8004b76:	e002      	b.n	8004b7e <__ssvfiscanf_r+0x1e2>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	9342      	str	r3, [sp, #264]	; 0x108
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004b80:	6863      	ldr	r3, [r4, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	dd3d      	ble.n	8004c02 <__ssvfiscanf_r+0x266>
 8004b86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004b88:	0659      	lsls	r1, r3, #25
 8004b8a:	d404      	bmi.n	8004b96 <__ssvfiscanf_r+0x1fa>
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	781a      	ldrb	r2, [r3, #0]
 8004b90:	5cba      	ldrb	r2, [r7, r2]
 8004b92:	0712      	lsls	r2, r2, #28
 8004b94:	d43c      	bmi.n	8004c10 <__ssvfiscanf_r+0x274>
 8004b96:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	dc4b      	bgt.n	8004c34 <__ssvfiscanf_r+0x298>
 8004b9c:	466b      	mov	r3, sp
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	a941      	add	r1, sp, #260	; 0x104
 8004ba4:	f000 fa06 	bl	8004fb4 <_scanf_chars>
 8004ba8:	2801      	cmp	r0, #1
 8004baa:	d06a      	beq.n	8004c82 <__ssvfiscanf_r+0x2e6>
 8004bac:	2802      	cmp	r0, #2
 8004bae:	f47f af1b 	bne.w	80049e8 <__ssvfiscanf_r+0x4c>
 8004bb2:	e7cb      	b.n	8004b4c <__ssvfiscanf_r+0x1b0>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	9342      	str	r3, [sp, #264]	; 0x108
 8004bb8:	2304      	movs	r3, #4
 8004bba:	e7e0      	b.n	8004b7e <__ssvfiscanf_r+0x1e2>
 8004bbc:	220a      	movs	r2, #10
 8004bbe:	e7d5      	b.n	8004b6c <__ssvfiscanf_r+0x1d0>
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	f000 fb42 	bl	800524c <__sccl>
 8004bc8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004bca:	4605      	mov	r5, r0
 8004bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd0:	9341      	str	r3, [sp, #260]	; 0x104
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e7d3      	b.n	8004b7e <__ssvfiscanf_r+0x1e2>
 8004bd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bdc:	9341      	str	r3, [sp, #260]	; 0x104
 8004bde:	2300      	movs	r3, #0
 8004be0:	e7cd      	b.n	8004b7e <__ssvfiscanf_r+0x1e2>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e7cb      	b.n	8004b7e <__ssvfiscanf_r+0x1e2>
 8004be6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004be8:	06c3      	lsls	r3, r0, #27
 8004bea:	f53f aefd 	bmi.w	80049e8 <__ssvfiscanf_r+0x4c>
 8004bee:	9b00      	ldr	r3, [sp, #0]
 8004bf0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004bf2:	1d19      	adds	r1, r3, #4
 8004bf4:	9100      	str	r1, [sp, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	07c0      	lsls	r0, r0, #31
 8004bfa:	bf4c      	ite	mi
 8004bfc:	801a      	strhmi	r2, [r3, #0]
 8004bfe:	601a      	strpl	r2, [r3, #0]
 8004c00:	e6f2      	b.n	80049e8 <__ssvfiscanf_r+0x4c>
 8004c02:	4621      	mov	r1, r4
 8004c04:	4630      	mov	r0, r6
 8004c06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004c08:	4798      	blx	r3
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d0bb      	beq.n	8004b86 <__ssvfiscanf_r+0x1ea>
 8004c0e:	e79d      	b.n	8004b4c <__ssvfiscanf_r+0x1b0>
 8004c10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004c12:	3201      	adds	r2, #1
 8004c14:	9245      	str	r2, [sp, #276]	; 0x114
 8004c16:	6862      	ldr	r2, [r4, #4]
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	2a00      	cmp	r2, #0
 8004c1c:	6062      	str	r2, [r4, #4]
 8004c1e:	dd02      	ble.n	8004c26 <__ssvfiscanf_r+0x28a>
 8004c20:	3301      	adds	r3, #1
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	e7b2      	b.n	8004b8c <__ssvfiscanf_r+0x1f0>
 8004c26:	4621      	mov	r1, r4
 8004c28:	4630      	mov	r0, r6
 8004c2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004c2c:	4798      	blx	r3
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d0ac      	beq.n	8004b8c <__ssvfiscanf_r+0x1f0>
 8004c32:	e78b      	b.n	8004b4c <__ssvfiscanf_r+0x1b0>
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	dc0f      	bgt.n	8004c58 <__ssvfiscanf_r+0x2bc>
 8004c38:	466b      	mov	r3, sp
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	a941      	add	r1, sp, #260	; 0x104
 8004c40:	f000 fa12 	bl	8005068 <_scanf_i>
 8004c44:	e7b0      	b.n	8004ba8 <__ssvfiscanf_r+0x20c>
 8004c46:	bf00      	nop
 8004c48:	080048e9 	.word	0x080048e9
 8004c4c:	08004963 	.word	0x08004963
 8004c50:	08005775 	.word	0x08005775
 8004c54:	0800572c 	.word	0x0800572c
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <__ssvfiscanf_r+0x2ec>)
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f43f aec4 	beq.w	80049e8 <__ssvfiscanf_r+0x4c>
 8004c60:	466b      	mov	r3, sp
 8004c62:	4622      	mov	r2, r4
 8004c64:	4630      	mov	r0, r6
 8004c66:	a941      	add	r1, sp, #260	; 0x104
 8004c68:	f3af 8000 	nop.w
 8004c6c:	e79c      	b.n	8004ba8 <__ssvfiscanf_r+0x20c>
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c74:	bf18      	it	ne
 8004c76:	f04f 30ff 	movne.w	r0, #4294967295
 8004c7a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004c84:	e7f9      	b.n	8004c7a <__ssvfiscanf_r+0x2de>
 8004c86:	bf00      	nop
 8004c88:	00000000 	.word	0x00000000

08004c8c <_printf_common>:
 8004c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c90:	4616      	mov	r6, r2
 8004c92:	4699      	mov	r9, r3
 8004c94:	688a      	ldr	r2, [r1, #8]
 8004c96:	690b      	ldr	r3, [r1, #16]
 8004c98:	4607      	mov	r7, r0
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	bfb8      	it	lt
 8004c9e:	4613      	movlt	r3, r2
 8004ca0:	6033      	str	r3, [r6, #0]
 8004ca2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cac:	b10a      	cbz	r2, 8004cb2 <_printf_common+0x26>
 8004cae:	3301      	adds	r3, #1
 8004cb0:	6033      	str	r3, [r6, #0]
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	0699      	lsls	r1, r3, #26
 8004cb6:	bf42      	ittt	mi
 8004cb8:	6833      	ldrmi	r3, [r6, #0]
 8004cba:	3302      	addmi	r3, #2
 8004cbc:	6033      	strmi	r3, [r6, #0]
 8004cbe:	6825      	ldr	r5, [r4, #0]
 8004cc0:	f015 0506 	ands.w	r5, r5, #6
 8004cc4:	d106      	bne.n	8004cd4 <_printf_common+0x48>
 8004cc6:	f104 0a19 	add.w	sl, r4, #25
 8004cca:	68e3      	ldr	r3, [r4, #12]
 8004ccc:	6832      	ldr	r2, [r6, #0]
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	42ab      	cmp	r3, r5
 8004cd2:	dc2b      	bgt.n	8004d2c <_printf_common+0xa0>
 8004cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd8:	1e13      	subs	r3, r2, #0
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	bf18      	it	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	0692      	lsls	r2, r2, #26
 8004ce2:	d430      	bmi.n	8004d46 <_printf_common+0xba>
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cec:	47c0      	blx	r8
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d023      	beq.n	8004d3a <_printf_common+0xae>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	6922      	ldr	r2, [r4, #16]
 8004cf6:	f003 0306 	and.w	r3, r3, #6
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	bf14      	ite	ne
 8004cfe:	2500      	movne	r5, #0
 8004d00:	6833      	ldreq	r3, [r6, #0]
 8004d02:	f04f 0600 	mov.w	r6, #0
 8004d06:	bf08      	it	eq
 8004d08:	68e5      	ldreq	r5, [r4, #12]
 8004d0a:	f104 041a 	add.w	r4, r4, #26
 8004d0e:	bf08      	it	eq
 8004d10:	1aed      	subeq	r5, r5, r3
 8004d12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004d16:	bf08      	it	eq
 8004d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bfc4      	itt	gt
 8004d20:	1a9b      	subgt	r3, r3, r2
 8004d22:	18ed      	addgt	r5, r5, r3
 8004d24:	42b5      	cmp	r5, r6
 8004d26:	d11a      	bne.n	8004d5e <_printf_common+0xd2>
 8004d28:	2000      	movs	r0, #0
 8004d2a:	e008      	b.n	8004d3e <_printf_common+0xb2>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	4652      	mov	r2, sl
 8004d30:	4649      	mov	r1, r9
 8004d32:	4638      	mov	r0, r7
 8004d34:	47c0      	blx	r8
 8004d36:	3001      	adds	r0, #1
 8004d38:	d103      	bne.n	8004d42 <_printf_common+0xb6>
 8004d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d42:	3501      	adds	r5, #1
 8004d44:	e7c1      	b.n	8004cca <_printf_common+0x3e>
 8004d46:	2030      	movs	r0, #48	; 0x30
 8004d48:	18e1      	adds	r1, r4, r3
 8004d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d54:	4422      	add	r2, r4
 8004d56:	3302      	adds	r3, #2
 8004d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d5c:	e7c2      	b.n	8004ce4 <_printf_common+0x58>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4622      	mov	r2, r4
 8004d62:	4649      	mov	r1, r9
 8004d64:	4638      	mov	r0, r7
 8004d66:	47c0      	blx	r8
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d0e6      	beq.n	8004d3a <_printf_common+0xae>
 8004d6c:	3601      	adds	r6, #1
 8004d6e:	e7d9      	b.n	8004d24 <_printf_common+0x98>

08004d70 <_printf_i>:
 8004d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d74:	7e0f      	ldrb	r7, [r1, #24]
 8004d76:	4691      	mov	r9, r2
 8004d78:	2f78      	cmp	r7, #120	; 0x78
 8004d7a:	4680      	mov	r8, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	469a      	mov	sl, r3
 8004d80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d86:	d807      	bhi.n	8004d98 <_printf_i+0x28>
 8004d88:	2f62      	cmp	r7, #98	; 0x62
 8004d8a:	d80a      	bhi.n	8004da2 <_printf_i+0x32>
 8004d8c:	2f00      	cmp	r7, #0
 8004d8e:	f000 80d5 	beq.w	8004f3c <_printf_i+0x1cc>
 8004d92:	2f58      	cmp	r7, #88	; 0x58
 8004d94:	f000 80c1 	beq.w	8004f1a <_printf_i+0x1aa>
 8004d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004da0:	e03a      	b.n	8004e18 <_printf_i+0xa8>
 8004da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004da6:	2b15      	cmp	r3, #21
 8004da8:	d8f6      	bhi.n	8004d98 <_printf_i+0x28>
 8004daa:	a101      	add	r1, pc, #4	; (adr r1, 8004db0 <_printf_i+0x40>)
 8004dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004db0:	08004e09 	.word	0x08004e09
 8004db4:	08004e1d 	.word	0x08004e1d
 8004db8:	08004d99 	.word	0x08004d99
 8004dbc:	08004d99 	.word	0x08004d99
 8004dc0:	08004d99 	.word	0x08004d99
 8004dc4:	08004d99 	.word	0x08004d99
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004d99 	.word	0x08004d99
 8004dd0:	08004d99 	.word	0x08004d99
 8004dd4:	08004d99 	.word	0x08004d99
 8004dd8:	08004d99 	.word	0x08004d99
 8004ddc:	08004f23 	.word	0x08004f23
 8004de0:	08004e49 	.word	0x08004e49
 8004de4:	08004edd 	.word	0x08004edd
 8004de8:	08004d99 	.word	0x08004d99
 8004dec:	08004d99 	.word	0x08004d99
 8004df0:	08004f45 	.word	0x08004f45
 8004df4:	08004d99 	.word	0x08004d99
 8004df8:	08004e49 	.word	0x08004e49
 8004dfc:	08004d99 	.word	0x08004d99
 8004e00:	08004d99 	.word	0x08004d99
 8004e04:	08004ee5 	.word	0x08004ee5
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	1d1a      	adds	r2, r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	602a      	str	r2, [r5, #0]
 8004e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0a0      	b.n	8004f5e <_printf_i+0x1ee>
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	682b      	ldr	r3, [r5, #0]
 8004e20:	0607      	lsls	r7, r0, #24
 8004e22:	f103 0104 	add.w	r1, r3, #4
 8004e26:	6029      	str	r1, [r5, #0]
 8004e28:	d501      	bpl.n	8004e2e <_printf_i+0xbe>
 8004e2a:	681e      	ldr	r6, [r3, #0]
 8004e2c:	e003      	b.n	8004e36 <_printf_i+0xc6>
 8004e2e:	0646      	lsls	r6, r0, #25
 8004e30:	d5fb      	bpl.n	8004e2a <_printf_i+0xba>
 8004e32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e36:	2e00      	cmp	r6, #0
 8004e38:	da03      	bge.n	8004e42 <_printf_i+0xd2>
 8004e3a:	232d      	movs	r3, #45	; 0x2d
 8004e3c:	4276      	negs	r6, r6
 8004e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e42:	230a      	movs	r3, #10
 8004e44:	4859      	ldr	r0, [pc, #356]	; (8004fac <_printf_i+0x23c>)
 8004e46:	e012      	b.n	8004e6e <_printf_i+0xfe>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	6820      	ldr	r0, [r4, #0]
 8004e4c:	1d19      	adds	r1, r3, #4
 8004e4e:	6029      	str	r1, [r5, #0]
 8004e50:	0605      	lsls	r5, r0, #24
 8004e52:	d501      	bpl.n	8004e58 <_printf_i+0xe8>
 8004e54:	681e      	ldr	r6, [r3, #0]
 8004e56:	e002      	b.n	8004e5e <_printf_i+0xee>
 8004e58:	0641      	lsls	r1, r0, #25
 8004e5a:	d5fb      	bpl.n	8004e54 <_printf_i+0xe4>
 8004e5c:	881e      	ldrh	r6, [r3, #0]
 8004e5e:	2f6f      	cmp	r7, #111	; 0x6f
 8004e60:	bf0c      	ite	eq
 8004e62:	2308      	moveq	r3, #8
 8004e64:	230a      	movne	r3, #10
 8004e66:	4851      	ldr	r0, [pc, #324]	; (8004fac <_printf_i+0x23c>)
 8004e68:	2100      	movs	r1, #0
 8004e6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e6e:	6865      	ldr	r5, [r4, #4]
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	bfa8      	it	ge
 8004e74:	6821      	ldrge	r1, [r4, #0]
 8004e76:	60a5      	str	r5, [r4, #8]
 8004e78:	bfa4      	itt	ge
 8004e7a:	f021 0104 	bicge.w	r1, r1, #4
 8004e7e:	6021      	strge	r1, [r4, #0]
 8004e80:	b90e      	cbnz	r6, 8004e86 <_printf_i+0x116>
 8004e82:	2d00      	cmp	r5, #0
 8004e84:	d04b      	beq.n	8004f1e <_printf_i+0x1ae>
 8004e86:	4615      	mov	r5, r2
 8004e88:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e8c:	fb03 6711 	mls	r7, r3, r1, r6
 8004e90:	5dc7      	ldrb	r7, [r0, r7]
 8004e92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e96:	4637      	mov	r7, r6
 8004e98:	42bb      	cmp	r3, r7
 8004e9a:	460e      	mov	r6, r1
 8004e9c:	d9f4      	bls.n	8004e88 <_printf_i+0x118>
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d10b      	bne.n	8004eba <_printf_i+0x14a>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	07de      	lsls	r6, r3, #31
 8004ea6:	d508      	bpl.n	8004eba <_printf_i+0x14a>
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	6861      	ldr	r1, [r4, #4]
 8004eac:	4299      	cmp	r1, r3
 8004eae:	bfde      	ittt	le
 8004eb0:	2330      	movle	r3, #48	; 0x30
 8004eb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eba:	1b52      	subs	r2, r2, r5
 8004ebc:	6122      	str	r2, [r4, #16]
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	f8cd a000 	str.w	sl, [sp]
 8004ec8:	aa03      	add	r2, sp, #12
 8004eca:	f7ff fedf 	bl	8004c8c <_printf_common>
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d14a      	bne.n	8004f68 <_printf_i+0x1f8>
 8004ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed6:	b004      	add	sp, #16
 8004ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	f043 0320 	orr.w	r3, r3, #32
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	2778      	movs	r7, #120	; 0x78
 8004ee6:	4832      	ldr	r0, [pc, #200]	; (8004fb0 <_printf_i+0x240>)
 8004ee8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	6829      	ldr	r1, [r5, #0]
 8004ef0:	061f      	lsls	r7, r3, #24
 8004ef2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ef6:	d402      	bmi.n	8004efe <_printf_i+0x18e>
 8004ef8:	065f      	lsls	r7, r3, #25
 8004efa:	bf48      	it	mi
 8004efc:	b2b6      	uxthmi	r6, r6
 8004efe:	07df      	lsls	r7, r3, #31
 8004f00:	bf48      	it	mi
 8004f02:	f043 0320 	orrmi.w	r3, r3, #32
 8004f06:	6029      	str	r1, [r5, #0]
 8004f08:	bf48      	it	mi
 8004f0a:	6023      	strmi	r3, [r4, #0]
 8004f0c:	b91e      	cbnz	r6, 8004f16 <_printf_i+0x1a6>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	f023 0320 	bic.w	r3, r3, #32
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	2310      	movs	r3, #16
 8004f18:	e7a6      	b.n	8004e68 <_printf_i+0xf8>
 8004f1a:	4824      	ldr	r0, [pc, #144]	; (8004fac <_printf_i+0x23c>)
 8004f1c:	e7e4      	b.n	8004ee8 <_printf_i+0x178>
 8004f1e:	4615      	mov	r5, r2
 8004f20:	e7bd      	b.n	8004e9e <_printf_i+0x12e>
 8004f22:	682b      	ldr	r3, [r5, #0]
 8004f24:	6826      	ldr	r6, [r4, #0]
 8004f26:	1d18      	adds	r0, r3, #4
 8004f28:	6961      	ldr	r1, [r4, #20]
 8004f2a:	6028      	str	r0, [r5, #0]
 8004f2c:	0635      	lsls	r5, r6, #24
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	d501      	bpl.n	8004f36 <_printf_i+0x1c6>
 8004f32:	6019      	str	r1, [r3, #0]
 8004f34:	e002      	b.n	8004f3c <_printf_i+0x1cc>
 8004f36:	0670      	lsls	r0, r6, #25
 8004f38:	d5fb      	bpl.n	8004f32 <_printf_i+0x1c2>
 8004f3a:	8019      	strh	r1, [r3, #0]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4615      	mov	r5, r2
 8004f40:	6123      	str	r3, [r4, #16]
 8004f42:	e7bc      	b.n	8004ebe <_printf_i+0x14e>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	2100      	movs	r1, #0
 8004f48:	1d1a      	adds	r2, r3, #4
 8004f4a:	602a      	str	r2, [r5, #0]
 8004f4c:	681d      	ldr	r5, [r3, #0]
 8004f4e:	6862      	ldr	r2, [r4, #4]
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 fa17 	bl	8005384 <memchr>
 8004f56:	b108      	cbz	r0, 8004f5c <_printf_i+0x1ec>
 8004f58:	1b40      	subs	r0, r0, r5
 8004f5a:	6060      	str	r0, [r4, #4]
 8004f5c:	6863      	ldr	r3, [r4, #4]
 8004f5e:	6123      	str	r3, [r4, #16]
 8004f60:	2300      	movs	r3, #0
 8004f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f66:	e7aa      	b.n	8004ebe <_printf_i+0x14e>
 8004f68:	462a      	mov	r2, r5
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	6923      	ldr	r3, [r4, #16]
 8004f70:	47d0      	blx	sl
 8004f72:	3001      	adds	r0, #1
 8004f74:	d0ad      	beq.n	8004ed2 <_printf_i+0x162>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	079b      	lsls	r3, r3, #30
 8004f7a:	d413      	bmi.n	8004fa4 <_printf_i+0x234>
 8004f7c:	68e0      	ldr	r0, [r4, #12]
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	4298      	cmp	r0, r3
 8004f82:	bfb8      	it	lt
 8004f84:	4618      	movlt	r0, r3
 8004f86:	e7a6      	b.n	8004ed6 <_printf_i+0x166>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	4632      	mov	r2, r6
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	4640      	mov	r0, r8
 8004f90:	47d0      	blx	sl
 8004f92:	3001      	adds	r0, #1
 8004f94:	d09d      	beq.n	8004ed2 <_printf_i+0x162>
 8004f96:	3501      	adds	r5, #1
 8004f98:	68e3      	ldr	r3, [r4, #12]
 8004f9a:	9903      	ldr	r1, [sp, #12]
 8004f9c:	1a5b      	subs	r3, r3, r1
 8004f9e:	42ab      	cmp	r3, r5
 8004fa0:	dcf2      	bgt.n	8004f88 <_printf_i+0x218>
 8004fa2:	e7eb      	b.n	8004f7c <_printf_i+0x20c>
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	f104 0619 	add.w	r6, r4, #25
 8004faa:	e7f5      	b.n	8004f98 <_printf_i+0x228>
 8004fac:	08005737 	.word	0x08005737
 8004fb0:	08005748 	.word	0x08005748

08004fb4 <_scanf_chars>:
 8004fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb8:	4615      	mov	r5, r2
 8004fba:	688a      	ldr	r2, [r1, #8]
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	b932      	cbnz	r2, 8004fd0 <_scanf_chars+0x1c>
 8004fc2:	698a      	ldr	r2, [r1, #24]
 8004fc4:	2a00      	cmp	r2, #0
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2201      	moveq	r2, #1
 8004fca:	f04f 32ff 	movne.w	r2, #4294967295
 8004fce:	608a      	str	r2, [r1, #8]
 8004fd0:	2700      	movs	r7, #0
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005064 <_scanf_chars+0xb0>
 8004fd8:	06d1      	lsls	r1, r2, #27
 8004fda:	bf5f      	itttt	pl
 8004fdc:	681a      	ldrpl	r2, [r3, #0]
 8004fde:	1d11      	addpl	r1, r2, #4
 8004fe0:	6019      	strpl	r1, [r3, #0]
 8004fe2:	6816      	ldrpl	r6, [r2, #0]
 8004fe4:	69a0      	ldr	r0, [r4, #24]
 8004fe6:	b188      	cbz	r0, 800500c <_scanf_chars+0x58>
 8004fe8:	2801      	cmp	r0, #1
 8004fea:	d107      	bne.n	8004ffc <_scanf_chars+0x48>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	781a      	ldrb	r2, [r3, #0]
 8004ff0:	6963      	ldr	r3, [r4, #20]
 8004ff2:	5c9b      	ldrb	r3, [r3, r2]
 8004ff4:	b953      	cbnz	r3, 800500c <_scanf_chars+0x58>
 8004ff6:	2f00      	cmp	r7, #0
 8004ff8:	d031      	beq.n	800505e <_scanf_chars+0xaa>
 8004ffa:	e022      	b.n	8005042 <_scanf_chars+0x8e>
 8004ffc:	2802      	cmp	r0, #2
 8004ffe:	d120      	bne.n	8005042 <_scanf_chars+0x8e>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005008:	071b      	lsls	r3, r3, #28
 800500a:	d41a      	bmi.n	8005042 <_scanf_chars+0x8e>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	3701      	adds	r7, #1
 8005010:	06da      	lsls	r2, r3, #27
 8005012:	bf5e      	ittt	pl
 8005014:	682b      	ldrpl	r3, [r5, #0]
 8005016:	781b      	ldrbpl	r3, [r3, #0]
 8005018:	f806 3b01 	strbpl.w	r3, [r6], #1
 800501c:	682a      	ldr	r2, [r5, #0]
 800501e:	686b      	ldr	r3, [r5, #4]
 8005020:	3201      	adds	r2, #1
 8005022:	602a      	str	r2, [r5, #0]
 8005024:	68a2      	ldr	r2, [r4, #8]
 8005026:	3b01      	subs	r3, #1
 8005028:	3a01      	subs	r2, #1
 800502a:	606b      	str	r3, [r5, #4]
 800502c:	60a2      	str	r2, [r4, #8]
 800502e:	b142      	cbz	r2, 8005042 <_scanf_chars+0x8e>
 8005030:	2b00      	cmp	r3, #0
 8005032:	dcd7      	bgt.n	8004fe4 <_scanf_chars+0x30>
 8005034:	4629      	mov	r1, r5
 8005036:	4640      	mov	r0, r8
 8005038:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800503c:	4798      	blx	r3
 800503e:	2800      	cmp	r0, #0
 8005040:	d0d0      	beq.n	8004fe4 <_scanf_chars+0x30>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	f013 0310 	ands.w	r3, r3, #16
 8005048:	d105      	bne.n	8005056 <_scanf_chars+0xa2>
 800504a:	68e2      	ldr	r2, [r4, #12]
 800504c:	3201      	adds	r2, #1
 800504e:	60e2      	str	r2, [r4, #12]
 8005050:	69a2      	ldr	r2, [r4, #24]
 8005052:	b102      	cbz	r2, 8005056 <_scanf_chars+0xa2>
 8005054:	7033      	strb	r3, [r6, #0]
 8005056:	2000      	movs	r0, #0
 8005058:	6923      	ldr	r3, [r4, #16]
 800505a:	443b      	add	r3, r7
 800505c:	6123      	str	r3, [r4, #16]
 800505e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005062:	bf00      	nop
 8005064:	08005775 	.word	0x08005775

08005068 <_scanf_i>:
 8005068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506c:	460c      	mov	r4, r1
 800506e:	4698      	mov	r8, r3
 8005070:	4b72      	ldr	r3, [pc, #456]	; (800523c <_scanf_i+0x1d4>)
 8005072:	b087      	sub	sp, #28
 8005074:	4682      	mov	sl, r0
 8005076:	4616      	mov	r6, r2
 8005078:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800507c:	ab03      	add	r3, sp, #12
 800507e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005082:	4b6f      	ldr	r3, [pc, #444]	; (8005240 <_scanf_i+0x1d8>)
 8005084:	69a1      	ldr	r1, [r4, #24]
 8005086:	4a6f      	ldr	r2, [pc, #444]	; (8005244 <_scanf_i+0x1dc>)
 8005088:	4627      	mov	r7, r4
 800508a:	2903      	cmp	r1, #3
 800508c:	bf18      	it	ne
 800508e:	461a      	movne	r2, r3
 8005090:	68a3      	ldr	r3, [r4, #8]
 8005092:	9201      	str	r2, [sp, #4]
 8005094:	1e5a      	subs	r2, r3, #1
 8005096:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800509a:	bf81      	itttt	hi
 800509c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80050a0:	eb03 0905 	addhi.w	r9, r3, r5
 80050a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80050a8:	60a3      	strhi	r3, [r4, #8]
 80050aa:	f857 3b1c 	ldr.w	r3, [r7], #28
 80050ae:	bf98      	it	ls
 80050b0:	f04f 0900 	movls.w	r9, #0
 80050b4:	463d      	mov	r5, r7
 80050b6:	f04f 0b00 	mov.w	fp, #0
 80050ba:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	6831      	ldr	r1, [r6, #0]
 80050c2:	ab03      	add	r3, sp, #12
 80050c4:	2202      	movs	r2, #2
 80050c6:	7809      	ldrb	r1, [r1, #0]
 80050c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80050cc:	f000 f95a 	bl	8005384 <memchr>
 80050d0:	b328      	cbz	r0, 800511e <_scanf_i+0xb6>
 80050d2:	f1bb 0f01 	cmp.w	fp, #1
 80050d6:	d159      	bne.n	800518c <_scanf_i+0x124>
 80050d8:	6862      	ldr	r2, [r4, #4]
 80050da:	b92a      	cbnz	r2, 80050e8 <_scanf_i+0x80>
 80050dc:	2308      	movs	r3, #8
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	6063      	str	r3, [r4, #4]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e6:	6022      	str	r2, [r4, #0]
 80050e8:	6822      	ldr	r2, [r4, #0]
 80050ea:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80050ee:	6022      	str	r2, [r4, #0]
 80050f0:	68a2      	ldr	r2, [r4, #8]
 80050f2:	1e51      	subs	r1, r2, #1
 80050f4:	60a1      	str	r1, [r4, #8]
 80050f6:	b192      	cbz	r2, 800511e <_scanf_i+0xb6>
 80050f8:	6832      	ldr	r2, [r6, #0]
 80050fa:	1c51      	adds	r1, r2, #1
 80050fc:	6031      	str	r1, [r6, #0]
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	f805 2b01 	strb.w	r2, [r5], #1
 8005104:	6872      	ldr	r2, [r6, #4]
 8005106:	3a01      	subs	r2, #1
 8005108:	2a00      	cmp	r2, #0
 800510a:	6072      	str	r2, [r6, #4]
 800510c:	dc07      	bgt.n	800511e <_scanf_i+0xb6>
 800510e:	4631      	mov	r1, r6
 8005110:	4650      	mov	r0, sl
 8005112:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005116:	4790      	blx	r2
 8005118:	2800      	cmp	r0, #0
 800511a:	f040 8085 	bne.w	8005228 <_scanf_i+0x1c0>
 800511e:	f10b 0b01 	add.w	fp, fp, #1
 8005122:	f1bb 0f03 	cmp.w	fp, #3
 8005126:	d1cb      	bne.n	80050c0 <_scanf_i+0x58>
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	b90b      	cbnz	r3, 8005130 <_scanf_i+0xc8>
 800512c:	230a      	movs	r3, #10
 800512e:	6063      	str	r3, [r4, #4]
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	4945      	ldr	r1, [pc, #276]	; (8005248 <_scanf_i+0x1e0>)
 8005134:	6960      	ldr	r0, [r4, #20]
 8005136:	1ac9      	subs	r1, r1, r3
 8005138:	f000 f888 	bl	800524c <__sccl>
 800513c:	f04f 0b00 	mov.w	fp, #0
 8005140:	68a3      	ldr	r3, [r4, #8]
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03d      	beq.n	80051c4 <_scanf_i+0x15c>
 8005148:	6831      	ldr	r1, [r6, #0]
 800514a:	6960      	ldr	r0, [r4, #20]
 800514c:	f891 c000 	ldrb.w	ip, [r1]
 8005150:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005154:	2800      	cmp	r0, #0
 8005156:	d035      	beq.n	80051c4 <_scanf_i+0x15c>
 8005158:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800515c:	d124      	bne.n	80051a8 <_scanf_i+0x140>
 800515e:	0510      	lsls	r0, r2, #20
 8005160:	d522      	bpl.n	80051a8 <_scanf_i+0x140>
 8005162:	f10b 0b01 	add.w	fp, fp, #1
 8005166:	f1b9 0f00 	cmp.w	r9, #0
 800516a:	d003      	beq.n	8005174 <_scanf_i+0x10c>
 800516c:	3301      	adds	r3, #1
 800516e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	6873      	ldr	r3, [r6, #4]
 8005176:	3b01      	subs	r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	6073      	str	r3, [r6, #4]
 800517c:	dd1b      	ble.n	80051b6 <_scanf_i+0x14e>
 800517e:	6833      	ldr	r3, [r6, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	6033      	str	r3, [r6, #0]
 8005184:	68a3      	ldr	r3, [r4, #8]
 8005186:	3b01      	subs	r3, #1
 8005188:	60a3      	str	r3, [r4, #8]
 800518a:	e7d9      	b.n	8005140 <_scanf_i+0xd8>
 800518c:	f1bb 0f02 	cmp.w	fp, #2
 8005190:	d1ae      	bne.n	80050f0 <_scanf_i+0x88>
 8005192:	6822      	ldr	r2, [r4, #0]
 8005194:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005198:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800519c:	d1bf      	bne.n	800511e <_scanf_i+0xb6>
 800519e:	2310      	movs	r3, #16
 80051a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a4:	6063      	str	r3, [r4, #4]
 80051a6:	e7a2      	b.n	80050ee <_scanf_i+0x86>
 80051a8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80051ac:	6022      	str	r2, [r4, #0]
 80051ae:	780b      	ldrb	r3, [r1, #0]
 80051b0:	f805 3b01 	strb.w	r3, [r5], #1
 80051b4:	e7de      	b.n	8005174 <_scanf_i+0x10c>
 80051b6:	4631      	mov	r1, r6
 80051b8:	4650      	mov	r0, sl
 80051ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80051be:	4798      	blx	r3
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d0df      	beq.n	8005184 <_scanf_i+0x11c>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	05d9      	lsls	r1, r3, #23
 80051c8:	d50d      	bpl.n	80051e6 <_scanf_i+0x17e>
 80051ca:	42bd      	cmp	r5, r7
 80051cc:	d909      	bls.n	80051e2 <_scanf_i+0x17a>
 80051ce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80051d2:	4632      	mov	r2, r6
 80051d4:	4650      	mov	r0, sl
 80051d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051da:	f105 39ff 	add.w	r9, r5, #4294967295
 80051de:	4798      	blx	r3
 80051e0:	464d      	mov	r5, r9
 80051e2:	42bd      	cmp	r5, r7
 80051e4:	d028      	beq.n	8005238 <_scanf_i+0x1d0>
 80051e6:	6822      	ldr	r2, [r4, #0]
 80051e8:	f012 0210 	ands.w	r2, r2, #16
 80051ec:	d113      	bne.n	8005216 <_scanf_i+0x1ae>
 80051ee:	702a      	strb	r2, [r5, #0]
 80051f0:	4639      	mov	r1, r7
 80051f2:	6863      	ldr	r3, [r4, #4]
 80051f4:	4650      	mov	r0, sl
 80051f6:	9e01      	ldr	r6, [sp, #4]
 80051f8:	47b0      	blx	r6
 80051fa:	f8d8 3000 	ldr.w	r3, [r8]
 80051fe:	6821      	ldr	r1, [r4, #0]
 8005200:	1d1a      	adds	r2, r3, #4
 8005202:	f8c8 2000 	str.w	r2, [r8]
 8005206:	f011 0f20 	tst.w	r1, #32
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	d00f      	beq.n	800522e <_scanf_i+0x1c6>
 800520e:	6018      	str	r0, [r3, #0]
 8005210:	68e3      	ldr	r3, [r4, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	60e3      	str	r3, [r4, #12]
 8005216:	2000      	movs	r0, #0
 8005218:	6923      	ldr	r3, [r4, #16]
 800521a:	1bed      	subs	r5, r5, r7
 800521c:	445d      	add	r5, fp
 800521e:	442b      	add	r3, r5
 8005220:	6123      	str	r3, [r4, #16]
 8005222:	b007      	add	sp, #28
 8005224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005228:	f04f 0b00 	mov.w	fp, #0
 800522c:	e7ca      	b.n	80051c4 <_scanf_i+0x15c>
 800522e:	07ca      	lsls	r2, r1, #31
 8005230:	bf4c      	ite	mi
 8005232:	8018      	strhmi	r0, [r3, #0]
 8005234:	6018      	strpl	r0, [r3, #0]
 8005236:	e7eb      	b.n	8005210 <_scanf_i+0x1a8>
 8005238:	2001      	movs	r0, #1
 800523a:	e7f2      	b.n	8005222 <_scanf_i+0x1ba>
 800523c:	080056f0 	.word	0x080056f0
 8005240:	08005601 	.word	0x08005601
 8005244:	08005519 	.word	0x08005519
 8005248:	08005769 	.word	0x08005769

0800524c <__sccl>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	780b      	ldrb	r3, [r1, #0]
 8005250:	4604      	mov	r4, r0
 8005252:	2b5e      	cmp	r3, #94	; 0x5e
 8005254:	bf0b      	itete	eq
 8005256:	784b      	ldrbeq	r3, [r1, #1]
 8005258:	1c4a      	addne	r2, r1, #1
 800525a:	1c8a      	addeq	r2, r1, #2
 800525c:	2100      	movne	r1, #0
 800525e:	bf08      	it	eq
 8005260:	2101      	moveq	r1, #1
 8005262:	3801      	subs	r0, #1
 8005264:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005268:	f800 1f01 	strb.w	r1, [r0, #1]!
 800526c:	42a8      	cmp	r0, r5
 800526e:	d1fb      	bne.n	8005268 <__sccl+0x1c>
 8005270:	b90b      	cbnz	r3, 8005276 <__sccl+0x2a>
 8005272:	1e50      	subs	r0, r2, #1
 8005274:	bd70      	pop	{r4, r5, r6, pc}
 8005276:	f081 0101 	eor.w	r1, r1, #1
 800527a:	4610      	mov	r0, r2
 800527c:	54e1      	strb	r1, [r4, r3]
 800527e:	4602      	mov	r2, r0
 8005280:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005284:	2d2d      	cmp	r5, #45	; 0x2d
 8005286:	d005      	beq.n	8005294 <__sccl+0x48>
 8005288:	2d5d      	cmp	r5, #93	; 0x5d
 800528a:	d016      	beq.n	80052ba <__sccl+0x6e>
 800528c:	2d00      	cmp	r5, #0
 800528e:	d0f1      	beq.n	8005274 <__sccl+0x28>
 8005290:	462b      	mov	r3, r5
 8005292:	e7f2      	b.n	800527a <__sccl+0x2e>
 8005294:	7846      	ldrb	r6, [r0, #1]
 8005296:	2e5d      	cmp	r6, #93	; 0x5d
 8005298:	d0fa      	beq.n	8005290 <__sccl+0x44>
 800529a:	42b3      	cmp	r3, r6
 800529c:	dcf8      	bgt.n	8005290 <__sccl+0x44>
 800529e:	461a      	mov	r2, r3
 80052a0:	3002      	adds	r0, #2
 80052a2:	3201      	adds	r2, #1
 80052a4:	4296      	cmp	r6, r2
 80052a6:	54a1      	strb	r1, [r4, r2]
 80052a8:	dcfb      	bgt.n	80052a2 <__sccl+0x56>
 80052aa:	1af2      	subs	r2, r6, r3
 80052ac:	3a01      	subs	r2, #1
 80052ae:	42b3      	cmp	r3, r6
 80052b0:	bfa8      	it	ge
 80052b2:	2200      	movge	r2, #0
 80052b4:	1c5d      	adds	r5, r3, #1
 80052b6:	18ab      	adds	r3, r5, r2
 80052b8:	e7e1      	b.n	800527e <__sccl+0x32>
 80052ba:	4610      	mov	r0, r2
 80052bc:	e7da      	b.n	8005274 <__sccl+0x28>

080052be <__submore>:
 80052be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c2:	460c      	mov	r4, r1
 80052c4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80052c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052ca:	4299      	cmp	r1, r3
 80052cc:	d11b      	bne.n	8005306 <__submore+0x48>
 80052ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052d2:	f7ff f925 	bl	8004520 <_malloc_r>
 80052d6:	b918      	cbnz	r0, 80052e0 <__submore+0x22>
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80052e6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80052ea:	6360      	str	r0, [r4, #52]	; 0x34
 80052ec:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80052f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80052f4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80052f8:	7043      	strb	r3, [r0, #1]
 80052fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80052fe:	7003      	strb	r3, [r0, #0]
 8005300:	6020      	str	r0, [r4, #0]
 8005302:	2000      	movs	r0, #0
 8005304:	e7ea      	b.n	80052dc <__submore+0x1e>
 8005306:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005308:	0077      	lsls	r7, r6, #1
 800530a:	463a      	mov	r2, r7
 800530c:	f000 f856 	bl	80053bc <_realloc_r>
 8005310:	4605      	mov	r5, r0
 8005312:	2800      	cmp	r0, #0
 8005314:	d0e0      	beq.n	80052d8 <__submore+0x1a>
 8005316:	eb00 0806 	add.w	r8, r0, r6
 800531a:	4601      	mov	r1, r0
 800531c:	4632      	mov	r2, r6
 800531e:	4640      	mov	r0, r8
 8005320:	f000 f83e 	bl	80053a0 <memcpy>
 8005324:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005328:	f8c4 8000 	str.w	r8, [r4]
 800532c:	e7e9      	b.n	8005302 <__submore+0x44>

0800532e <memmove>:
 800532e:	4288      	cmp	r0, r1
 8005330:	b510      	push	{r4, lr}
 8005332:	eb01 0402 	add.w	r4, r1, r2
 8005336:	d902      	bls.n	800533e <memmove+0x10>
 8005338:	4284      	cmp	r4, r0
 800533a:	4623      	mov	r3, r4
 800533c:	d807      	bhi.n	800534e <memmove+0x20>
 800533e:	1e43      	subs	r3, r0, #1
 8005340:	42a1      	cmp	r1, r4
 8005342:	d008      	beq.n	8005356 <memmove+0x28>
 8005344:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005348:	f803 2f01 	strb.w	r2, [r3, #1]!
 800534c:	e7f8      	b.n	8005340 <memmove+0x12>
 800534e:	4601      	mov	r1, r0
 8005350:	4402      	add	r2, r0
 8005352:	428a      	cmp	r2, r1
 8005354:	d100      	bne.n	8005358 <memmove+0x2a>
 8005356:	bd10      	pop	{r4, pc}
 8005358:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800535c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005360:	e7f7      	b.n	8005352 <memmove+0x24>
	...

08005364 <_sbrk_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	2300      	movs	r3, #0
 8005368:	4d05      	ldr	r5, [pc, #20]	; (8005380 <_sbrk_r+0x1c>)
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	f7fb fe24 	bl	8000fbc <_sbrk>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_sbrk_r+0x1a>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_sbrk_r+0x1a>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	20000328 	.word	0x20000328

08005384 <memchr>:
 8005384:	4603      	mov	r3, r0
 8005386:	b510      	push	{r4, lr}
 8005388:	b2c9      	uxtb	r1, r1
 800538a:	4402      	add	r2, r0
 800538c:	4293      	cmp	r3, r2
 800538e:	4618      	mov	r0, r3
 8005390:	d101      	bne.n	8005396 <memchr+0x12>
 8005392:	2000      	movs	r0, #0
 8005394:	e003      	b.n	800539e <memchr+0x1a>
 8005396:	7804      	ldrb	r4, [r0, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	428c      	cmp	r4, r1
 800539c:	d1f6      	bne.n	800538c <memchr+0x8>
 800539e:	bd10      	pop	{r4, pc}

080053a0 <memcpy>:
 80053a0:	440a      	add	r2, r1
 80053a2:	4291      	cmp	r1, r2
 80053a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053a8:	d100      	bne.n	80053ac <memcpy+0xc>
 80053aa:	4770      	bx	lr
 80053ac:	b510      	push	{r4, lr}
 80053ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b2:	4291      	cmp	r1, r2
 80053b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053b8:	d1f9      	bne.n	80053ae <memcpy+0xe>
 80053ba:	bd10      	pop	{r4, pc}

080053bc <_realloc_r>:
 80053bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c0:	4680      	mov	r8, r0
 80053c2:	4614      	mov	r4, r2
 80053c4:	460e      	mov	r6, r1
 80053c6:	b921      	cbnz	r1, 80053d2 <_realloc_r+0x16>
 80053c8:	4611      	mov	r1, r2
 80053ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ce:	f7ff b8a7 	b.w	8004520 <_malloc_r>
 80053d2:	b92a      	cbnz	r2, 80053e0 <_realloc_r+0x24>
 80053d4:	f7ff f83c 	bl	8004450 <_free_r>
 80053d8:	4625      	mov	r5, r4
 80053da:	4628      	mov	r0, r5
 80053dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e0:	f000 f910 	bl	8005604 <_malloc_usable_size_r>
 80053e4:	4284      	cmp	r4, r0
 80053e6:	4607      	mov	r7, r0
 80053e8:	d802      	bhi.n	80053f0 <_realloc_r+0x34>
 80053ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053ee:	d812      	bhi.n	8005416 <_realloc_r+0x5a>
 80053f0:	4621      	mov	r1, r4
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7ff f894 	bl	8004520 <_malloc_r>
 80053f8:	4605      	mov	r5, r0
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d0ed      	beq.n	80053da <_realloc_r+0x1e>
 80053fe:	42bc      	cmp	r4, r7
 8005400:	4622      	mov	r2, r4
 8005402:	4631      	mov	r1, r6
 8005404:	bf28      	it	cs
 8005406:	463a      	movcs	r2, r7
 8005408:	f7ff ffca 	bl	80053a0 <memcpy>
 800540c:	4631      	mov	r1, r6
 800540e:	4640      	mov	r0, r8
 8005410:	f7ff f81e 	bl	8004450 <_free_r>
 8005414:	e7e1      	b.n	80053da <_realloc_r+0x1e>
 8005416:	4635      	mov	r5, r6
 8005418:	e7df      	b.n	80053da <_realloc_r+0x1e>
	...

0800541c <_strtol_l.constprop.0>:
 800541c:	2b01      	cmp	r3, #1
 800541e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005422:	4686      	mov	lr, r0
 8005424:	4690      	mov	r8, r2
 8005426:	d001      	beq.n	800542c <_strtol_l.constprop.0+0x10>
 8005428:	2b24      	cmp	r3, #36	; 0x24
 800542a:	d906      	bls.n	800543a <_strtol_l.constprop.0+0x1e>
 800542c:	f7fe ffe4 	bl	80043f8 <__errno>
 8005430:	2316      	movs	r3, #22
 8005432:	6003      	str	r3, [r0, #0]
 8005434:	2000      	movs	r0, #0
 8005436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543a:	460d      	mov	r5, r1
 800543c:	4835      	ldr	r0, [pc, #212]	; (8005514 <_strtol_l.constprop.0+0xf8>)
 800543e:	462a      	mov	r2, r5
 8005440:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005444:	5d06      	ldrb	r6, [r0, r4]
 8005446:	f016 0608 	ands.w	r6, r6, #8
 800544a:	d1f8      	bne.n	800543e <_strtol_l.constprop.0+0x22>
 800544c:	2c2d      	cmp	r4, #45	; 0x2d
 800544e:	d12e      	bne.n	80054ae <_strtol_l.constprop.0+0x92>
 8005450:	2601      	movs	r6, #1
 8005452:	782c      	ldrb	r4, [r5, #0]
 8005454:	1c95      	adds	r5, r2, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d057      	beq.n	800550a <_strtol_l.constprop.0+0xee>
 800545a:	2b10      	cmp	r3, #16
 800545c:	d109      	bne.n	8005472 <_strtol_l.constprop.0+0x56>
 800545e:	2c30      	cmp	r4, #48	; 0x30
 8005460:	d107      	bne.n	8005472 <_strtol_l.constprop.0+0x56>
 8005462:	782a      	ldrb	r2, [r5, #0]
 8005464:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005468:	2a58      	cmp	r2, #88	; 0x58
 800546a:	d149      	bne.n	8005500 <_strtol_l.constprop.0+0xe4>
 800546c:	2310      	movs	r3, #16
 800546e:	786c      	ldrb	r4, [r5, #1]
 8005470:	3502      	adds	r5, #2
 8005472:	2200      	movs	r2, #0
 8005474:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005478:	f10c 3cff 	add.w	ip, ip, #4294967295
 800547c:	fbbc f9f3 	udiv	r9, ip, r3
 8005480:	4610      	mov	r0, r2
 8005482:	fb03 ca19 	mls	sl, r3, r9, ip
 8005486:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800548a:	2f09      	cmp	r7, #9
 800548c:	d814      	bhi.n	80054b8 <_strtol_l.constprop.0+0x9c>
 800548e:	463c      	mov	r4, r7
 8005490:	42a3      	cmp	r3, r4
 8005492:	dd20      	ble.n	80054d6 <_strtol_l.constprop.0+0xba>
 8005494:	1c57      	adds	r7, r2, #1
 8005496:	d007      	beq.n	80054a8 <_strtol_l.constprop.0+0x8c>
 8005498:	4581      	cmp	r9, r0
 800549a:	d319      	bcc.n	80054d0 <_strtol_l.constprop.0+0xb4>
 800549c:	d101      	bne.n	80054a2 <_strtol_l.constprop.0+0x86>
 800549e:	45a2      	cmp	sl, r4
 80054a0:	db16      	blt.n	80054d0 <_strtol_l.constprop.0+0xb4>
 80054a2:	2201      	movs	r2, #1
 80054a4:	fb00 4003 	mla	r0, r0, r3, r4
 80054a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054ac:	e7eb      	b.n	8005486 <_strtol_l.constprop.0+0x6a>
 80054ae:	2c2b      	cmp	r4, #43	; 0x2b
 80054b0:	bf04      	itt	eq
 80054b2:	782c      	ldrbeq	r4, [r5, #0]
 80054b4:	1c95      	addeq	r5, r2, #2
 80054b6:	e7ce      	b.n	8005456 <_strtol_l.constprop.0+0x3a>
 80054b8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80054bc:	2f19      	cmp	r7, #25
 80054be:	d801      	bhi.n	80054c4 <_strtol_l.constprop.0+0xa8>
 80054c0:	3c37      	subs	r4, #55	; 0x37
 80054c2:	e7e5      	b.n	8005490 <_strtol_l.constprop.0+0x74>
 80054c4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80054c8:	2f19      	cmp	r7, #25
 80054ca:	d804      	bhi.n	80054d6 <_strtol_l.constprop.0+0xba>
 80054cc:	3c57      	subs	r4, #87	; 0x57
 80054ce:	e7df      	b.n	8005490 <_strtol_l.constprop.0+0x74>
 80054d0:	f04f 32ff 	mov.w	r2, #4294967295
 80054d4:	e7e8      	b.n	80054a8 <_strtol_l.constprop.0+0x8c>
 80054d6:	1c53      	adds	r3, r2, #1
 80054d8:	d108      	bne.n	80054ec <_strtol_l.constprop.0+0xd0>
 80054da:	2322      	movs	r3, #34	; 0x22
 80054dc:	4660      	mov	r0, ip
 80054de:	f8ce 3000 	str.w	r3, [lr]
 80054e2:	f1b8 0f00 	cmp.w	r8, #0
 80054e6:	d0a6      	beq.n	8005436 <_strtol_l.constprop.0+0x1a>
 80054e8:	1e69      	subs	r1, r5, #1
 80054ea:	e006      	b.n	80054fa <_strtol_l.constprop.0+0xde>
 80054ec:	b106      	cbz	r6, 80054f0 <_strtol_l.constprop.0+0xd4>
 80054ee:	4240      	negs	r0, r0
 80054f0:	f1b8 0f00 	cmp.w	r8, #0
 80054f4:	d09f      	beq.n	8005436 <_strtol_l.constprop.0+0x1a>
 80054f6:	2a00      	cmp	r2, #0
 80054f8:	d1f6      	bne.n	80054e8 <_strtol_l.constprop.0+0xcc>
 80054fa:	f8c8 1000 	str.w	r1, [r8]
 80054fe:	e79a      	b.n	8005436 <_strtol_l.constprop.0+0x1a>
 8005500:	2430      	movs	r4, #48	; 0x30
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1b5      	bne.n	8005472 <_strtol_l.constprop.0+0x56>
 8005506:	2308      	movs	r3, #8
 8005508:	e7b3      	b.n	8005472 <_strtol_l.constprop.0+0x56>
 800550a:	2c30      	cmp	r4, #48	; 0x30
 800550c:	d0a9      	beq.n	8005462 <_strtol_l.constprop.0+0x46>
 800550e:	230a      	movs	r3, #10
 8005510:	e7af      	b.n	8005472 <_strtol_l.constprop.0+0x56>
 8005512:	bf00      	nop
 8005514:	08005775 	.word	0x08005775

08005518 <_strtol_r>:
 8005518:	f7ff bf80 	b.w	800541c <_strtol_l.constprop.0>

0800551c <_strtoul_l.constprop.0>:
 800551c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005520:	4686      	mov	lr, r0
 8005522:	460d      	mov	r5, r1
 8005524:	4f35      	ldr	r7, [pc, #212]	; (80055fc <_strtoul_l.constprop.0+0xe0>)
 8005526:	4628      	mov	r0, r5
 8005528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800552c:	5d3e      	ldrb	r6, [r7, r4]
 800552e:	f016 0608 	ands.w	r6, r6, #8
 8005532:	d1f8      	bne.n	8005526 <_strtoul_l.constprop.0+0xa>
 8005534:	2c2d      	cmp	r4, #45	; 0x2d
 8005536:	d130      	bne.n	800559a <_strtoul_l.constprop.0+0x7e>
 8005538:	2601      	movs	r6, #1
 800553a:	782c      	ldrb	r4, [r5, #0]
 800553c:	1c85      	adds	r5, r0, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d057      	beq.n	80055f2 <_strtoul_l.constprop.0+0xd6>
 8005542:	2b10      	cmp	r3, #16
 8005544:	d109      	bne.n	800555a <_strtoul_l.constprop.0+0x3e>
 8005546:	2c30      	cmp	r4, #48	; 0x30
 8005548:	d107      	bne.n	800555a <_strtoul_l.constprop.0+0x3e>
 800554a:	7828      	ldrb	r0, [r5, #0]
 800554c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005550:	2858      	cmp	r0, #88	; 0x58
 8005552:	d149      	bne.n	80055e8 <_strtoul_l.constprop.0+0xcc>
 8005554:	2310      	movs	r3, #16
 8005556:	786c      	ldrb	r4, [r5, #1]
 8005558:	3502      	adds	r5, #2
 800555a:	f04f 38ff 	mov.w	r8, #4294967295
 800555e:	fbb8 f8f3 	udiv	r8, r8, r3
 8005562:	2700      	movs	r7, #0
 8005564:	fb03 f908 	mul.w	r9, r3, r8
 8005568:	4638      	mov	r0, r7
 800556a:	ea6f 0909 	mvn.w	r9, r9
 800556e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005572:	f1bc 0f09 	cmp.w	ip, #9
 8005576:	d815      	bhi.n	80055a4 <_strtoul_l.constprop.0+0x88>
 8005578:	4664      	mov	r4, ip
 800557a:	42a3      	cmp	r3, r4
 800557c:	dd23      	ble.n	80055c6 <_strtoul_l.constprop.0+0xaa>
 800557e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005582:	d007      	beq.n	8005594 <_strtoul_l.constprop.0+0x78>
 8005584:	4580      	cmp	r8, r0
 8005586:	d31b      	bcc.n	80055c0 <_strtoul_l.constprop.0+0xa4>
 8005588:	d101      	bne.n	800558e <_strtoul_l.constprop.0+0x72>
 800558a:	45a1      	cmp	r9, r4
 800558c:	db18      	blt.n	80055c0 <_strtoul_l.constprop.0+0xa4>
 800558e:	2701      	movs	r7, #1
 8005590:	fb00 4003 	mla	r0, r0, r3, r4
 8005594:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005598:	e7e9      	b.n	800556e <_strtoul_l.constprop.0+0x52>
 800559a:	2c2b      	cmp	r4, #43	; 0x2b
 800559c:	bf04      	itt	eq
 800559e:	782c      	ldrbeq	r4, [r5, #0]
 80055a0:	1c85      	addeq	r5, r0, #2
 80055a2:	e7cc      	b.n	800553e <_strtoul_l.constprop.0+0x22>
 80055a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80055a8:	f1bc 0f19 	cmp.w	ip, #25
 80055ac:	d801      	bhi.n	80055b2 <_strtoul_l.constprop.0+0x96>
 80055ae:	3c37      	subs	r4, #55	; 0x37
 80055b0:	e7e3      	b.n	800557a <_strtoul_l.constprop.0+0x5e>
 80055b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80055b6:	f1bc 0f19 	cmp.w	ip, #25
 80055ba:	d804      	bhi.n	80055c6 <_strtoul_l.constprop.0+0xaa>
 80055bc:	3c57      	subs	r4, #87	; 0x57
 80055be:	e7dc      	b.n	800557a <_strtoul_l.constprop.0+0x5e>
 80055c0:	f04f 37ff 	mov.w	r7, #4294967295
 80055c4:	e7e6      	b.n	8005594 <_strtoul_l.constprop.0+0x78>
 80055c6:	1c7b      	adds	r3, r7, #1
 80055c8:	d106      	bne.n	80055d8 <_strtoul_l.constprop.0+0xbc>
 80055ca:	2322      	movs	r3, #34	; 0x22
 80055cc:	4638      	mov	r0, r7
 80055ce:	f8ce 3000 	str.w	r3, [lr]
 80055d2:	b932      	cbnz	r2, 80055e2 <_strtoul_l.constprop.0+0xc6>
 80055d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055d8:	b106      	cbz	r6, 80055dc <_strtoul_l.constprop.0+0xc0>
 80055da:	4240      	negs	r0, r0
 80055dc:	2a00      	cmp	r2, #0
 80055de:	d0f9      	beq.n	80055d4 <_strtoul_l.constprop.0+0xb8>
 80055e0:	b107      	cbz	r7, 80055e4 <_strtoul_l.constprop.0+0xc8>
 80055e2:	1e69      	subs	r1, r5, #1
 80055e4:	6011      	str	r1, [r2, #0]
 80055e6:	e7f5      	b.n	80055d4 <_strtoul_l.constprop.0+0xb8>
 80055e8:	2430      	movs	r4, #48	; 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1b5      	bne.n	800555a <_strtoul_l.constprop.0+0x3e>
 80055ee:	2308      	movs	r3, #8
 80055f0:	e7b3      	b.n	800555a <_strtoul_l.constprop.0+0x3e>
 80055f2:	2c30      	cmp	r4, #48	; 0x30
 80055f4:	d0a9      	beq.n	800554a <_strtoul_l.constprop.0+0x2e>
 80055f6:	230a      	movs	r3, #10
 80055f8:	e7af      	b.n	800555a <_strtoul_l.constprop.0+0x3e>
 80055fa:	bf00      	nop
 80055fc:	08005775 	.word	0x08005775

08005600 <_strtoul_r>:
 8005600:	f7ff bf8c 	b.w	800551c <_strtoul_l.constprop.0>

08005604 <_malloc_usable_size_r>:
 8005604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005608:	1f18      	subs	r0, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	bfbc      	itt	lt
 800560e:	580b      	ldrlt	r3, [r1, r0]
 8005610:	18c0      	addlt	r0, r0, r3
 8005612:	4770      	bx	lr

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr

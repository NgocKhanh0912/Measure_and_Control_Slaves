
Measure_and_Control_Slaves.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c74  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08005d80  08005d80  00006d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fcc  08005fcc  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fcc  08005fcc  00006fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fd4  08005fd4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd4  08005fd4  00006fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005fdc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000005c  08006038  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08006038  00007390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010881  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002247  00000000  00000000  00017906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00019b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcf  00000000  00000000  0001ac98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183b0  00000000  00000000  0001ba67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c61  00000000  00000000  00033e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e906  00000000  00000000  00047a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d637e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c0  00000000  00000000  000d63c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000db684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d68 	.word	0x08005d68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005d68 	.word	0x08005d68

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <I2C_Write_Time>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);


static void I2C_Write_Time(DS3231_Time *DS3231)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af04      	add	r7, sp, #16
 8000162:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Write(DS3231->I2C, DS3231_ADDR, 0, I2C_MEMADD_SIZE_8BIT, DS3231->TxTimeBuff, 3, 1000);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	6818      	ldr	r0, [r3, #0]
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	330b      	adds	r3, #11
 800016c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000170:	9202      	str	r2, [sp, #8]
 8000172:	2203      	movs	r2, #3
 8000174:	9201      	str	r2, [sp, #4]
 8000176:	9300      	str	r3, [sp, #0]
 8000178:	2301      	movs	r3, #1
 800017a:	2200      	movs	r2, #0
 800017c:	21d0      	movs	r1, #208	@ 0xd0
 800017e:	f001 fe0b 	bl	8001d98 <HAL_I2C_Mem_Write>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}

0800018a <I2C_Read_Time>:

static void I2C_Read_Time(DS3231_Time *DS3231)
{
 800018a:	b580      	push	{r7, lr}
 800018c:	b086      	sub	sp, #24
 800018e:	af04      	add	r7, sp, #16
 8000190:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Read(DS3231->I2C, DS3231_ADDR, 0, I2C_MEMADD_SIZE_8BIT, DS3231->RxTimeBuff, 3, 1000);
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	6818      	ldr	r0, [r3, #0]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	330e      	adds	r3, #14
 800019a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800019e:	9202      	str	r2, [sp, #8]
 80001a0:	2203      	movs	r2, #3
 80001a2:	9201      	str	r2, [sp, #4]
 80001a4:	9300      	str	r3, [sp, #0]
 80001a6:	2301      	movs	r3, #1
 80001a8:	2200      	movs	r2, #0
 80001aa:	21d0      	movs	r1, #208	@ 0xd0
 80001ac:	f001 feee 	bl	8001f8c <HAL_I2C_Mem_Read>
}
 80001b0:	bf00      	nop
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}

080001b8 <I2C_Write_Date>:

static void I2C_Write_Date(DS3231_Time *DS3231)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b086      	sub	sp, #24
 80001bc:	af04      	add	r7, sp, #16
 80001be:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Write(DS3231->I2C, DS3231_ADDR, 3, I2C_MEMADD_SIZE_8BIT, DS3231->TxDateBuff, 4, 1000);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	6818      	ldr	r0, [r3, #0]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	3311      	adds	r3, #17
 80001c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80001cc:	9202      	str	r2, [sp, #8]
 80001ce:	2204      	movs	r2, #4
 80001d0:	9201      	str	r2, [sp, #4]
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	2203      	movs	r2, #3
 80001d8:	21d0      	movs	r1, #208	@ 0xd0
 80001da:	f001 fddd 	bl	8001d98 <HAL_I2C_Mem_Write>
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}

080001e6 <I2C_Read_Date>:

static void I2C_Read_Date(DS3231_Time *DS3231)
{
 80001e6:	b580      	push	{r7, lr}
 80001e8:	b086      	sub	sp, #24
 80001ea:	af04      	add	r7, sp, #16
 80001ec:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Read(DS3231->I2C, DS3231_ADDR, 3, I2C_MEMADD_SIZE_8BIT, DS3231->RxDateBuff, 4, 1000);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	6818      	ldr	r0, [r3, #0]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3315      	adds	r3, #21
 80001f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80001fa:	9202      	str	r2, [sp, #8]
 80001fc:	2204      	movs	r2, #4
 80001fe:	9201      	str	r2, [sp, #4]
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2301      	movs	r3, #1
 8000204:	2203      	movs	r2, #3
 8000206:	21d0      	movs	r1, #208	@ 0xd0
 8000208:	f001 fec0 	bl	8001f8c <HAL_I2C_Mem_Read>
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}

08000214 <BCD_DEC>:

static uint8_t BCD_DEC(uint8_t data)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
    return (data >> 4) * 10 + (data & 0x0F);
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	091b      	lsrs	r3, r3, #4
 8000222:	b2db      	uxtb	r3, r3
 8000224:	461a      	mov	r2, r3
 8000226:	0092      	lsls	r2, r2, #2
 8000228:	4413      	add	r3, r2
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	b2da      	uxtb	r2, r3
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 030f 	and.w	r3, r3, #15
 8000234:	b2db      	uxtb	r3, r3
 8000236:	4413      	add	r3, r2
 8000238:	b2db      	uxtb	r3, r3
}
 800023a:	4618      	mov	r0, r3
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr

08000244 <DEC_BCD>:

static uint8_t DEC_BCD(uint8_t data)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
    return (data / 10) << 4 | (data % 10);
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <DEC_BCD+0x44>)
 8000252:	fba2 2303 	umull	r2, r3, r2, r3
 8000256:	08db      	lsrs	r3, r3, #3
 8000258:	b2db      	uxtb	r3, r3
 800025a:	011b      	lsls	r3, r3, #4
 800025c:	b258      	sxtb	r0, r3
 800025e:	79fa      	ldrb	r2, [r7, #7]
 8000260:	4b09      	ldr	r3, [pc, #36]	@ (8000288 <DEC_BCD+0x44>)
 8000262:	fba3 1302 	umull	r1, r3, r3, r2
 8000266:	08d9      	lsrs	r1, r3, #3
 8000268:	460b      	mov	r3, r1
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	440b      	add	r3, r1
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	1ad3      	subs	r3, r2, r3
 8000272:	b2db      	uxtb	r3, r3
 8000274:	b25b      	sxtb	r3, r3
 8000276:	4303      	orrs	r3, r0
 8000278:	b25b      	sxtb	r3, r3
 800027a:	b2db      	uxtb	r3, r3
}
 800027c:	4618      	mov	r0, r3
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	cccccccd 	.word	0xcccccccd

0800028c <DS3231_Init>:

void DS3231_Init(DS3231_Time *DS3231, I2C_HandleTypeDef *I2C_In)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
    DS3231->I2C = I2C_In;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	683a      	ldr	r2, [r7, #0]
 800029a:	601a      	str	r2, [r3, #0]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr

080002a6 <DS3231_SetTime>:

void DS3231_SetTime(DS3231_Time *DS3231, uint8_t Hour, uint8_t Min, uint8_t Sec)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b082      	sub	sp, #8
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
 80002ae:	4608      	mov	r0, r1
 80002b0:	4611      	mov	r1, r2
 80002b2:	461a      	mov	r2, r3
 80002b4:	4603      	mov	r3, r0
 80002b6:	70fb      	strb	r3, [r7, #3]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70bb      	strb	r3, [r7, #2]
 80002bc:	4613      	mov	r3, r2
 80002be:	707b      	strb	r3, [r7, #1]
    DS3231->TxTimeBuff[0] = DEC_BCD(Sec);
 80002c0:	787b      	ldrb	r3, [r7, #1]
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ffbe 	bl	8000244 <DEC_BCD>
 80002c8:	4603      	mov	r3, r0
 80002ca:	461a      	mov	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	72da      	strb	r2, [r3, #11]
    DS3231->TxTimeBuff[1] = DEC_BCD(Min);
 80002d0:	78bb      	ldrb	r3, [r7, #2]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ffb6 	bl	8000244 <DEC_BCD>
 80002d8:	4603      	mov	r3, r0
 80002da:	461a      	mov	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	731a      	strb	r2, [r3, #12]
    DS3231->TxTimeBuff[2] = DEC_BCD(Hour);
 80002e0:	78fb      	ldrb	r3, [r7, #3]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffae 	bl	8000244 <DEC_BCD>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	735a      	strb	r2, [r3, #13]
    I2C_Write_Time(DS3231);
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f7ff ff33 	bl	800015c <I2C_Write_Time>
}
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <DS3231_GetTime>:

void DS3231_GetTime(DS3231_Time *DS3231)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b082      	sub	sp, #8
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]
    I2C_Read_Time(DS3231);
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f7ff ff3f 	bl	800018a <I2C_Read_Time>
    DS3231->Sec = BCD_DEC(DS3231->RxTimeBuff[0]);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7b9b      	ldrb	r3, [r3, #14]
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff7f 	bl	8000214 <BCD_DEC>
 8000316:	4603      	mov	r3, r0
 8000318:	461a      	mov	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	711a      	strb	r2, [r3, #4]
    DS3231->Min = BCD_DEC(DS3231->RxTimeBuff[1]);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	7bdb      	ldrb	r3, [r3, #15]
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff76 	bl	8000214 <BCD_DEC>
 8000328:	4603      	mov	r3, r0
 800032a:	461a      	mov	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	715a      	strb	r2, [r3, #5]
    DS3231->Hour = BCD_DEC(DS3231->RxTimeBuff[2]);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	7c1b      	ldrb	r3, [r3, #16]
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff6d 	bl	8000214 <BCD_DEC>
 800033a:	4603      	mov	r3, r0
 800033c:	461a      	mov	r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	719a      	strb	r2, [r3, #6]
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <DS3231_SetDate>:

void DS3231_SetDate(DS3231_Time *DS3231, uint8_t Day, uint8_t Date, uint8_t Month, uint8_t Year)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	b082      	sub	sp, #8
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
 8000352:	4608      	mov	r0, r1
 8000354:	4611      	mov	r1, r2
 8000356:	461a      	mov	r2, r3
 8000358:	4603      	mov	r3, r0
 800035a:	70fb      	strb	r3, [r7, #3]
 800035c:	460b      	mov	r3, r1
 800035e:	70bb      	strb	r3, [r7, #2]
 8000360:	4613      	mov	r3, r2
 8000362:	707b      	strb	r3, [r7, #1]
    DS3231->TxDateBuff[0] = DEC_BCD(Day);
 8000364:	78fb      	ldrb	r3, [r7, #3]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff6c 	bl	8000244 <DEC_BCD>
 800036c:	4603      	mov	r3, r0
 800036e:	461a      	mov	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	745a      	strb	r2, [r3, #17]
    DS3231->TxDateBuff[1] = DEC_BCD(Date);
 8000374:	78bb      	ldrb	r3, [r7, #2]
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff64 	bl	8000244 <DEC_BCD>
 800037c:	4603      	mov	r3, r0
 800037e:	461a      	mov	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	749a      	strb	r2, [r3, #18]
    DS3231->TxDateBuff[2] = DEC_BCD(Month);
 8000384:	787b      	ldrb	r3, [r7, #1]
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff5c 	bl	8000244 <DEC_BCD>
 800038c:	4603      	mov	r3, r0
 800038e:	461a      	mov	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	74da      	strb	r2, [r3, #19]
    DS3231->TxDateBuff[3] = DEC_BCD(Year);
 8000394:	7c3b      	ldrb	r3, [r7, #16]
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff54 	bl	8000244 <DEC_BCD>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	751a      	strb	r2, [r3, #20]
    I2C_Write_Date(DS3231);
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f7ff ff07 	bl	80001b8 <I2C_Write_Date>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <DS3231_GetDate>:

void DS3231_GetDate(DS3231_Time *DS3231)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
    I2C_Read_Date(DS3231);
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f7ff ff13 	bl	80001e6 <I2C_Read_Date>
    DS3231->Day = BCD_DEC(DS3231->RxDateBuff[0]);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	7d5b      	ldrb	r3, [r3, #21]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ff25 	bl	8000214 <BCD_DEC>
 80003ca:	4603      	mov	r3, r0
 80003cc:	461a      	mov	r2, r3
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	721a      	strb	r2, [r3, #8]
    DS3231->Date = BCD_DEC(DS3231->RxDateBuff[1]);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	7d9b      	ldrb	r3, [r3, #22]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ff1c 	bl	8000214 <BCD_DEC>
 80003dc:	4603      	mov	r3, r0
 80003de:	461a      	mov	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	71da      	strb	r2, [r3, #7]
    DS3231->Month = BCD_DEC(DS3231->RxDateBuff[2]);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7ddb      	ldrb	r3, [r3, #23]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff13 	bl	8000214 <BCD_DEC>
 80003ee:	4603      	mov	r3, r0
 80003f0:	461a      	mov	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	725a      	strb	r2, [r3, #9]
    DS3231->Year = BCD_DEC(DS3231->RxDateBuff[3]);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	7e1b      	ldrb	r3, [r3, #24]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff0a 	bl	8000214 <BCD_DEC>
 8000400:	4603      	mov	r3, r0
 8000402:	461a      	mov	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	729a      	strb	r2, [r3, #10]
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <DHT11_Init>:


// Hàm khởi tạo chân GPIO DHT11
void DHT11_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000424:	4b10      	ldr	r3, [pc, #64]	@ (8000468 <DHT11_Init+0x58>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a0f      	ldr	r2, [pc, #60]	@ (8000468 <DHT11_Init+0x58>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <DHT11_Init+0x58>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = DHT11_PIN;
 800043c:	2302      	movs	r3, #2
 800043e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000440:	2311      	movs	r3, #17
 8000442:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2302      	movs	r3, #2
 8000446:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	4619      	mov	r1, r3
 800044e:	4807      	ldr	r0, [pc, #28]	@ (800046c <DHT11_Init+0x5c>)
 8000450:	f001 f9aa 	bl	80017a8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2102      	movs	r1, #2
 8000458:	4804      	ldr	r0, [pc, #16]	@ (800046c <DHT11_Init+0x5c>)
 800045a:	f001 fb40 	bl	8001ade <HAL_GPIO_WritePin>
}
 800045e:	bf00      	nop
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	40010800 	.word	0x40010800

08000470 <delay_us>:


// Hàm delay x us, x được truyền vào hàm
void delay_us(uint32_t us)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	// Reset timer counter, mỗi lần đếm là 1 micro giây
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <delay_us+0x2c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2200      	movs	r2, #0
 800047e:	625a      	str	r2, [r3, #36]	@ 0x24

    // Đếm số us truyền vào
    while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 8000480:	bf00      	nop
 8000482:	4b06      	ldr	r3, [pc, #24]	@ (800049c <delay_us+0x2c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	429a      	cmp	r2, r3
 800048c:	d8f9      	bhi.n	8000482 <delay_us+0x12>
    {
      // Đợi đếm đủ
    }
}
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	20000078 	.word	0x20000078

080004a0 <Counting_Time>:


// Hàm đếm thời gian mà chân DHT11 đã ở mức Level (us)
static int Counting_Time(uint16_t Time_Max, int Level)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	80fb      	strh	r3, [r7, #6]
	int count = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == Level)
 80004b0:	e00a      	b.n	80004c8 <Counting_Time+0x28>
	{
		if (count++ > Time_Max)
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	1c5a      	adds	r2, r3, #1
 80004b6:	60fa      	str	r2, [r7, #12]
 80004b8:	88fa      	ldrh	r2, [r7, #6]
 80004ba:	4293      	cmp	r3, r2
 80004bc:	dd01      	ble.n	80004c2 <Counting_Time+0x22>
		    return HAL_TIMEOUT;
 80004be:	2303      	movs	r3, #3
 80004c0:	e00c      	b.n	80004dc <Counting_Time+0x3c>
		// Mỗi lần lặp sẽ tương ứng với 1 lần delay 1 micro giây
		delay_us(1);
 80004c2:	2001      	movs	r0, #1
 80004c4:	f7ff ffd4 	bl	8000470 <delay_us>
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == Level)
 80004c8:	2102      	movs	r1, #2
 80004ca:	4806      	ldr	r0, [pc, #24]	@ (80004e4 <Counting_Time+0x44>)
 80004cc:	f001 faf0 	bl	8001ab0 <HAL_GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d0eb      	beq.n	80004b2 <Counting_Time+0x12>
	}
	// Trả về số lần lặp đã xảy ra (số micro giây mà chân DHT11 đã ở mức Level)
	return count;
 80004da:	68fb      	ldr	r3, [r7, #12]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40010800 	.word	0x40010800

080004e8 <DHT11_ReadData>:


// Hàm đọc dữ liệu từ DHT11
uint8_t DHT11_ReadData(uint8_t *temp, uint8_t *hum)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	@ 0x28
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
    // Request data
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2102      	movs	r1, #2
 80004f6:	4847      	ldr	r0, [pc, #284]	@ (8000614 <DHT11_ReadData+0x12c>)
 80004f8:	f001 faf1 	bl	8001ade <HAL_GPIO_WritePin>
    // Kéo chân DHT11 xuống mức 0 trong 20ms
    delay_us(20*1000);
 80004fc:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000500:	f7ff ffb6 	bl	8000470 <delay_us>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2102      	movs	r1, #2
 8000508:	4842      	ldr	r0, [pc, #264]	@ (8000614 <DHT11_ReadData+0x12c>)
 800050a:	f001 fae8 	bl	8001ade <HAL_GPIO_WritePin>
    // Kéo chân DHT11 lên mức 1 trong 40us
    delay_us(40);
 800050e:	2028      	movs	r0, #40	@ 0x28
 8000510:	f7ff ffae 	bl	8000470 <delay_us>

    // Cấu hình lại chân DHT11 thành Input để đọc dữ liệu
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DHT11_PIN;
 8000522:	2302      	movs	r3, #2
 8000524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4619      	mov	r1, r3
 8000534:	4837      	ldr	r0, [pc, #220]	@ (8000614 <DHT11_ReadData+0x12c>)
 8000536:	f001 f937 	bl	80017a8 <HAL_GPIO_Init>

    // Đợi DHT11 phản hồi
    if (Counting_Time(80, 0) == HAL_TIMEOUT)
 800053a:	2100      	movs	r1, #0
 800053c:	2050      	movs	r0, #80	@ 0x50
 800053e:	f7ff ffaf 	bl	80004a0 <Counting_Time>
 8000542:	4603      	mov	r3, r0
 8000544:	2b03      	cmp	r3, #3
 8000546:	d101      	bne.n	800054c <DHT11_ReadData+0x64>
	    return 5;
 8000548:	2305      	movs	r3, #5
 800054a:	e05e      	b.n	800060a <DHT11_ReadData+0x122>

    if (Counting_Time(80, 1) == HAL_TIMEOUT)
 800054c:	2101      	movs	r1, #1
 800054e:	2050      	movs	r0, #80	@ 0x50
 8000550:	f7ff ffa6 	bl	80004a0 <Counting_Time>
 8000554:	4603      	mov	r3, r0
 8000556:	2b03      	cmp	r3, #3
 8000558:	d101      	bne.n	800055e <DHT11_ReadData+0x76>
  	    return 6;
 800055a:	2306      	movs	r3, #6
 800055c:	e055      	b.n	800060a <DHT11_ReadData+0x122>

    // Đọc 40 bit dữ liệu
    uint8_t data[5] = {0};
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	2300      	movs	r3, #0
 8000564:	743b      	strb	r3, [r7, #16]
    for (int i = 0; i < 40; i++)
 8000566:	2300      	movs	r3, #0
 8000568:	627b      	str	r3, [r7, #36]	@ 0x24
 800056a:	e035      	b.n	80005d8 <DHT11_ReadData+0xf0>
    {
        if (Counting_Time(50, 0) == HAL_TIMEOUT)
 800056c:	2100      	movs	r1, #0
 800056e:	2032      	movs	r0, #50	@ 0x32
 8000570:	f7ff ff96 	bl	80004a0 <Counting_Time>
 8000574:	4603      	mov	r3, r0
 8000576:	2b03      	cmp	r3, #3
 8000578:	d101      	bne.n	800057e <DHT11_ReadData+0x96>
    	    return 7;
 800057a:	2307      	movs	r3, #7
 800057c:	e045      	b.n	800060a <DHT11_ReadData+0x122>

        if (Counting_Time(70, 1) > 28)
 800057e:	2101      	movs	r1, #1
 8000580:	2046      	movs	r0, #70	@ 0x46
 8000582:	f7ff ff8d 	bl	80004a0 <Counting_Time>
 8000586:	4603      	mov	r3, r0
 8000588:	2b1c      	cmp	r3, #28
 800058a:	dd22      	ble.n	80005d2 <DHT11_ReadData+0xea>
    	    data[i/8] |= (1 << (7-(i%8)));
 800058c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800058e:	2b00      	cmp	r3, #0
 8000590:	da00      	bge.n	8000594 <DHT11_ReadData+0xac>
 8000592:	3307      	adds	r3, #7
 8000594:	10db      	asrs	r3, r3, #3
 8000596:	461a      	mov	r2, r3
 8000598:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 800059c:	443b      	add	r3, r7
 800059e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80005a2:	b259      	sxtb	r1, r3
 80005a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005a6:	4258      	negs	r0, r3
 80005a8:	f003 0307 	and.w	r3, r3, #7
 80005ac:	f000 0007 	and.w	r0, r0, #7
 80005b0:	bf58      	it	pl
 80005b2:	4243      	negpl	r3, r0
 80005b4:	f1c3 0307 	rsb	r3, r3, #7
 80005b8:	2001      	movs	r0, #1
 80005ba:	fa00 f303 	lsl.w	r3, r0, r3
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	430b      	orrs	r3, r1
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	b2d9      	uxtb	r1, r3
 80005c6:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 80005ca:	443b      	add	r3, r7
 80005cc:	460a      	mov	r2, r1
 80005ce:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (int i = 0; i < 40; i++)
 80005d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d4:	3301      	adds	r3, #1
 80005d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80005d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005da:	2b27      	cmp	r3, #39	@ 0x27
 80005dc:	ddc6      	ble.n	800056c <DHT11_ReadData+0x84>
    }

    // Checksum để kiểm tra CRC
    if ((uint8_t)(data[0] + data[1] + data[2] + data[3]) != data[4])
 80005de:	7b3a      	ldrb	r2, [r7, #12]
 80005e0:	7b7b      	ldrb	r3, [r7, #13]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	4413      	add	r3, r2
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	4413      	add	r3, r2
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	7c3b      	ldrb	r3, [r7, #16]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d001      	beq.n	80005fc <DHT11_ReadData+0x114>
        return HAL_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e006      	b.n	800060a <DHT11_ReadData+0x122>

    // Trả về giá trị nhiệt độ và độ ẩm
    *hum = data[0];
 80005fc:	7b3a      	ldrb	r2, [r7, #12]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	701a      	strb	r2, [r3, #0]
    *temp = data[2];
 8000602:	7bba      	ldrb	r2, [r7, #14]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	701a      	strb	r2, [r3, #0]

    return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3728      	adds	r7, #40	@ 0x28
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40010800 	.word	0x40010800

08000618 <MAX7219_Write>:


void MAX7219_Write(uint8_t reg, uint8_t data)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	460a      	mov	r2, r1
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	4613      	mov	r3, r2
 8000626:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // Set CS low
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800062e:	480d      	ldr	r0, [pc, #52]	@ (8000664 <MAX7219_Write+0x4c>)
 8000630:	f001 fa55 	bl	8001ade <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000634:	1df9      	adds	r1, r7, #7
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	2201      	movs	r2, #1
 800063c:	480a      	ldr	r0, [pc, #40]	@ (8000668 <MAX7219_Write+0x50>)
 800063e:	f002 ff55 	bl	80034ec <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000642:	1db9      	adds	r1, r7, #6
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2201      	movs	r2, #1
 800064a:	4807      	ldr	r0, [pc, #28]	@ (8000668 <MAX7219_Write+0x50>)
 800064c:	f002 ff4e 	bl	80034ec <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // Set CS high
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000656:	4803      	ldr	r0, [pc, #12]	@ (8000664 <MAX7219_Write+0x4c>)
 8000658:	f001 fa41 	bl	8001ade <HAL_GPIO_WritePin>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40010800 	.word	0x40010800
 8000668:	200001a4 	.word	0x200001a4

0800066c <MAX7219_Init>:


void MAX7219_Init()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
    MAX7219_Write(MAX7219_REG_SCANLIMIT, 0x07);        // Hiển thị 8 chữ số
 8000670:	2107      	movs	r1, #7
 8000672:	200b      	movs	r0, #11
 8000674:	f7ff ffd0 	bl	8000618 <MAX7219_Write>
    MAX7219_Write(MAX7219_REG_DECODEMODE, 0xFF);       // Chế độ giải mã BCD cho tất cả các chữ số
 8000678:	21ff      	movs	r1, #255	@ 0xff
 800067a:	2009      	movs	r0, #9
 800067c:	f7ff ffcc 	bl	8000618 <MAX7219_Write>
    MAX7219_Write(MAX7219_REG_DISPLAYTEST, 0x00);      // Tắt chế độ kiểm tra hiển thị
 8000680:	2100      	movs	r1, #0
 8000682:	200f      	movs	r0, #15
 8000684:	f7ff ffc8 	bl	8000618 <MAX7219_Write>
    MAX7219_Write(MAX7219_REG_SHUTDOWN, 0x01);         // Khởi động hiển thị
 8000688:	2101      	movs	r1, #1
 800068a:	200c      	movs	r0, #12
 800068c:	f7ff ffc4 	bl	8000618 <MAX7219_Write>
    MAX7219_Write(MAX7219_REG_INTENSITY, 0x0F);        // Độ sáng (tăng hoặc giảm giá trị này để điều chỉnh độ sáng)
 8000690:	210f      	movs	r1, #15
 8000692:	200a      	movs	r0, #10
 8000694:	f7ff ffc0 	bl	8000618 <MAX7219_Write>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <MAX7219_DisplayDigit>:


void MAX7219_DisplayDigit(uint8_t digit, uint8_t value)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	460a      	mov	r2, r1
 80006a6:	71fb      	strb	r3, [r7, #7]
 80006a8:	4613      	mov	r3, r2
 80006aa:	71bb      	strb	r3, [r7, #6]
    MAX7219_Write(digit + 1, value);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	3301      	adds	r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	79ba      	ldrb	r2, [r7, #6]
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffae 	bl	8000618 <MAX7219_Write>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <MAX7219_DisplayTime>:


void MAX7219_DisplayTime(DS3231_Time *DS3231)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    MAX7219_DisplayDigit(7, DS3231->Hour / 10);    // Hiển thị chữ số hàng chục của giờ
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	799b      	ldrb	r3, [r3, #6]
 80006d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000788 <MAX7219_DisplayTime+0xc4>)
 80006d2:	fba2 2303 	umull	r2, r3, r2, r3
 80006d6:	08db      	lsrs	r3, r3, #3
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	2007      	movs	r0, #7
 80006de:	f7ff ffdd 	bl	800069c <MAX7219_DisplayDigit>
    MAX7219_DisplayDigit(6, DS3231->Hour % 10);    // Hiển thị chữ số hàng đơn vị của giờ
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	799a      	ldrb	r2, [r3, #6]
 80006e6:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <MAX7219_DisplayTime+0xc4>)
 80006e8:	fba3 1302 	umull	r1, r3, r3, r2
 80006ec:	08d9      	lsrs	r1, r3, #3
 80006ee:	460b      	mov	r3, r1
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	2006      	movs	r0, #6
 80006fe:	f7ff ffcd 	bl	800069c <MAX7219_DisplayDigit>
    MAX7219_DisplayDigit(5, 0x0A);                  // Hiển thị dấu '-' ở vị trí thứ 5
 8000702:	210a      	movs	r1, #10
 8000704:	2005      	movs	r0, #5
 8000706:	f7ff ffc9 	bl	800069c <MAX7219_DisplayDigit>
    MAX7219_DisplayDigit(4, DS3231->Min / 10);     // Hiển thị chữ số hàng chục của phút
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	795b      	ldrb	r3, [r3, #5]
 800070e:	4a1e      	ldr	r2, [pc, #120]	@ (8000788 <MAX7219_DisplayTime+0xc4>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4619      	mov	r1, r3
 800071a:	2004      	movs	r0, #4
 800071c:	f7ff ffbe 	bl	800069c <MAX7219_DisplayDigit>
    MAX7219_DisplayDigit(3, DS3231->Min % 10);     // Hiển thị chữ số hàng đơn vị của phút
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	795a      	ldrb	r2, [r3, #5]
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MAX7219_DisplayTime+0xc4>)
 8000726:	fba3 1302 	umull	r1, r3, r3, r2
 800072a:	08d9      	lsrs	r1, r3, #3
 800072c:	460b      	mov	r3, r1
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4619      	mov	r1, r3
 800073a:	2003      	movs	r0, #3
 800073c:	f7ff ffae 	bl	800069c <MAX7219_DisplayDigit>
    MAX7219_DisplayDigit(2, 0x0A);                  // Hiển thị dấu '-' ở vị trí thứ 2
 8000740:	210a      	movs	r1, #10
 8000742:	2002      	movs	r0, #2
 8000744:	f7ff ffaa 	bl	800069c <MAX7219_DisplayDigit>
    MAX7219_DisplayDigit(1, DS3231->Sec / 10);     // Hiển thị chữ số hàng chục của giây
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	4a0e      	ldr	r2, [pc, #56]	@ (8000788 <MAX7219_DisplayTime+0xc4>)
 800074e:	fba2 2303 	umull	r2, r3, r2, r3
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	2001      	movs	r0, #1
 800075a:	f7ff ff9f 	bl	800069c <MAX7219_DisplayDigit>
    MAX7219_DisplayDigit(0, DS3231->Sec % 10);     // Hiển thị chữ số hàng đơn vị của giây
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791a      	ldrb	r2, [r3, #4]
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MAX7219_DisplayTime+0xc4>)
 8000764:	fba3 1302 	umull	r1, r3, r3, r2
 8000768:	08d9      	lsrs	r1, r3, #3
 800076a:	460b      	mov	r3, r1
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	440b      	add	r3, r1
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4619      	mov	r1, r3
 8000778:	2000      	movs	r0, #0
 800077a:	f7ff ff8f 	bl	800069c <MAX7219_DisplayDigit>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	cccccccd 	.word	0xcccccccd

0800078c <HAL_TIM_PeriodElapsedCallback>:
   Dữ liệu ... giữa '&' và 'H' là dữ liệu độ ẩm

   Dữ liệu lỗi sẽ được truyền theo chuỗi "Error: ...!", trong đó dữ liệu ... là loại lỗi
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b090      	sub	sp, #64	@ 0x40
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800079c:	f040 8096 	bne.w	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    {
    	uint8_t temperature = 0, humidity = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    	uint8_t status = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    	char buffer[50];
    	DHT11_Init();
 80007b2:	f7ff fe2d 	bl	8000410 <DHT11_Init>

        status = DHT11_ReadData(&temperature, &humidity);
 80007b6:	f107 023d 	add.w	r2, r7, #61	@ 0x3d
 80007ba:	f107 033e 	add.w	r3, r7, #62	@ 0x3e
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe91 	bl	80004e8 <DHT11_ReadData>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    	if (status == HAL_OK)
 80007cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d118      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x7a>
    	{
    	  sprintf(buffer, "T%d&%dH", temperature, humidity);
 80007d4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80007d8:	461a      	mov	r2, r3
 80007da:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80007de:	f107 0008 	add.w	r0, r7, #8
 80007e2:	493c      	ldr	r1, [pc, #240]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80007e4:	f004 f970 	bl	8004ac8 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fcad 	bl	800014c <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	f107 0108 	add.w	r1, r7, #8
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	4836      	ldr	r0, [pc, #216]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000800:	f003 fb3a 	bl	8003e78 <HAL_UART_Transmit>
    	{
    	  sprintf(buffer, "Error: CRC Error!");
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
    	}
    }
}
 8000804:	e062      	b.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    	else if (status == 5)
 8000806:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800080a:	2b05      	cmp	r3, #5
 800080c:	d114      	bne.n	8000838 <HAL_TIM_PeriodElapsedCallback+0xac>
    	  sprintf(buffer, "Error: Respond Level 0 Timeout!");
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4932      	ldr	r1, [pc, #200]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000814:	4618      	mov	r0, r3
 8000816:	f004 f957 	bl	8004ac8 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fc94 	bl	800014c <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	f107 0108 	add.w	r1, r7, #8
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	4829      	ldr	r0, [pc, #164]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000832:	f003 fb21 	bl	8003e78 <HAL_UART_Transmit>
}
 8000836:	e049      	b.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    	else if (status == 6)
 8000838:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800083c:	2b06      	cmp	r3, #6
 800083e:	d114      	bne.n	800086a <HAL_TIM_PeriodElapsedCallback+0xde>
    	  sprintf(buffer, "Error: Respond Level 1 Timeout!");
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4926      	ldr	r1, [pc, #152]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000846:	4618      	mov	r0, r3
 8000848:	f004 f93e 	bl	8004ac8 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fc7b 	bl	800014c <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29a      	uxth	r2, r3
 800085a:	f107 0108 	add.w	r1, r7, #8
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	481d      	ldr	r0, [pc, #116]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000864:	f003 fb08 	bl	8003e78 <HAL_UART_Transmit>
}
 8000868:	e030      	b.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    	else if (status == 7)
 800086a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800086e:	2b07      	cmp	r3, #7
 8000870:	d114      	bne.n	800089c <HAL_TIM_PeriodElapsedCallback+0x110>
    	  sprintf(buffer, "Error: Data Level 0 Timeout!");
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	491b      	ldr	r1, [pc, #108]	@ (80008e4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000878:	4618      	mov	r0, r3
 800087a:	f004 f925 	bl	8004ac8 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fc62 	bl	800014c <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	b29a      	uxth	r2, r3
 800088c:	f107 0108 	add.w	r1, r7, #8
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	4810      	ldr	r0, [pc, #64]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000896:	f003 faef 	bl	8003e78 <HAL_UART_Transmit>
}
 800089a:	e017      	b.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    	else if (status == HAL_ERROR)
 800089c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d113      	bne.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x140>
    	  sprintf(buffer, "Error: CRC Error!");
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	490f      	ldr	r1, [pc, #60]	@ (80008e8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 f90c 	bl	8004ac8 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fc49 	bl	800014c <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 0108 	add.w	r1, r7, #8
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80008c8:	f003 fad6 	bl	8003e78 <HAL_UART_Transmit>
}
 80008cc:	bf00      	nop
 80008ce:	3740      	adds	r7, #64	@ 0x40
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	08005d80 	.word	0x08005d80
 80008d8:	20000108 	.word	0x20000108
 80008dc:	08005d88 	.word	0x08005d88
 80008e0:	08005da8 	.word	0x08005da8
 80008e4:	08005dc8 	.word	0x08005dc8
 80008e8:	08005de8 	.word	0x08005de8

080008ec <HAL_UART_RxCpltCallback>:

   Dữ liệu set thứ, ngày, tháng, năm nhận được từ GUI có dạng: "D./../../..E"
   Ví dụ: "D2/15/04/24" thì 2 là thứ, 15 là ngày, 04 là tháng, 24 là năm (2024)
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a6f      	ldr	r2, [pc, #444]	@ (8000ab8 <HAL_UART_RxCpltCallback+0x1cc>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	f040 80d7 	bne.w	8000aae <HAL_UART_RxCpltCallback+0x1c2>
    {
    	// Phân tích chuỗi dữ liệu điều khiển LED
		if (rx_data == '#' && rx_index == 5 && rx_buffer[0] == '@' && rx_buffer[1] == 'R' && rx_buffer[2] == '2' && rx_buffer[3] == 'O')
 8000900:	4b6e      	ldr	r3, [pc, #440]	@ (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b23      	cmp	r3, #35	@ 0x23
 8000906:	d143      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
 8000908:	4b6d      	ldr	r3, [pc, #436]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b05      	cmp	r3, #5
 800090e:	d13f      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
 8000910:	4b6c      	ldr	r3, [pc, #432]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b40      	cmp	r3, #64	@ 0x40
 8000916:	d13b      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
 8000918:	4b6a      	ldr	r3, [pc, #424]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	2b52      	cmp	r3, #82	@ 0x52
 800091e:	d137      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
 8000920:	4b68      	ldr	r3, [pc, #416]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000922:	789b      	ldrb	r3, [r3, #2]
 8000924:	2b32      	cmp	r3, #50	@ 0x32
 8000926:	d133      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
 8000928:	4b66      	ldr	r3, [pc, #408]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 800092a:	78db      	ldrb	r3, [r3, #3]
 800092c:	2b4f      	cmp	r3, #79	@ 0x4f
 800092e:	d12f      	bne.n	8000990 <HAL_UART_RxCpltCallback+0xa4>
		{
			// Lưu kí tự '#' là kí tự kết thúc chuỗi dữ liệu
			rx_buffer[rx_index] = rx_data;
 8000930:	4b63      	ldr	r3, [pc, #396]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b61      	ldr	r3, [pc, #388]	@ (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000938:	7819      	ldrb	r1, [r3, #0]
 800093a:	4b62      	ldr	r3, [pc, #392]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 800093c:	5499      	strb	r1, [r3, r2]

			if (rx_buffer[4] == 'N') {
 800093e:	4b61      	ldr	r3, [pc, #388]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	2b4e      	cmp	r3, #78	@ 0x4e
 8000944:	d105      	bne.n	8000952 <HAL_UART_RxCpltCallback+0x66>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2140      	movs	r1, #64	@ 0x40
 800094a:	485f      	ldr	r0, [pc, #380]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x1dc>)
 800094c:	f001 f8c7 	bl	8001ade <HAL_GPIO_WritePin>
 8000950:	e008      	b.n	8000964 <HAL_UART_RxCpltCallback+0x78>
			}

			else if (rx_buffer[4] == 'F') {
 8000952:	4b5c      	ldr	r3, [pc, #368]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	2b46      	cmp	r3, #70	@ 0x46
 8000958:	d104      	bne.n	8000964 <HAL_UART_RxCpltCallback+0x78>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	@ 0x40
 800095e:	485a      	ldr	r0, [pc, #360]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000960:	f001 f8bd 	bl	8001ade <HAL_GPIO_WritePin>
			}

			// Response ngược lại dữ liệu nhận được lên GUI
			for (int i = 0; i < 6; i++) {
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e00b      	b.n	8000982 <HAL_UART_RxCpltCallback+0x96>
				HAL_UART_Transmit(&huart1, &rx_buffer[i], 1, HAL_MAX_DELAY);
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	4a55      	ldr	r2, [pc, #340]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 800096e:	1899      	adds	r1, r3, r2
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
 8000974:	2201      	movs	r2, #1
 8000976:	4855      	ldr	r0, [pc, #340]	@ (8000acc <HAL_UART_RxCpltCallback+0x1e0>)
 8000978:	f003 fa7e 	bl	8003e78 <HAL_UART_Transmit>
			for (int i = 0; i < 6; i++) {
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	2b05      	cmp	r3, #5
 8000986:	ddf0      	ble.n	800096a <HAL_UART_RxCpltCallback+0x7e>
			}
			rx_index = 0;
 8000988:	4b4d      	ldr	r3, [pc, #308]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
 800098e:	e089      	b.n	8000aa4 <HAL_UART_RxCpltCallback+0x1b8>
		}

		// Phân tích chuỗi dữ liệu set giờ, phút, giây
		else if (rx_data == 'M' && rx_buffer[0] == 'T' && rx_buffer[3] == ':' && rx_buffer[6] == ':')
 8000990:	4b4a      	ldr	r3, [pc, #296]	@ (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b4d      	cmp	r3, #77	@ 0x4d
 8000996:	d133      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x114>
 8000998:	4b4a      	ldr	r3, [pc, #296]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b54      	cmp	r3, #84	@ 0x54
 800099e:	d12f      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x114>
 80009a0:	4b48      	ldr	r3, [pc, #288]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	2b3a      	cmp	r3, #58	@ 0x3a
 80009a6:	d12b      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x114>
 80009a8:	4b46      	ldr	r3, [pc, #280]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 80009aa:	799b      	ldrb	r3, [r3, #6]
 80009ac:	2b3a      	cmp	r3, #58	@ 0x3a
 80009ae:	d127      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x114>
		{
			is_Time_set = 1;
 80009b0:	4b47      	ldr	r3, [pc, #284]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x1e4>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
			// Lưu kí tự kết thúc chuỗi dữ liệu
			rx_buffer[rx_index] = rx_data;
 80009b6:	4b42      	ldr	r3, [pc, #264]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b3f      	ldr	r3, [pc, #252]	@ (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 80009be:	7819      	ldrb	r1, [r3, #0]
 80009c0:	4b40      	ldr	r3, [pc, #256]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 80009c2:	5499      	strb	r1, [r3, r2]

			// Sao chép dữ liệu từ rx_buffer vào rx_buffer_char
			for (int i = 0; i < 12; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	e00b      	b.n	80009e2 <HAL_UART_RxCpltCallback+0xf6>
				rx_buffer_char[i] = rx_buffer[i];
 80009ca:	4a3e      	ldr	r2, [pc, #248]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	4413      	add	r3, r2
 80009d0:	7819      	ldrb	r1, [r3, #0]
 80009d2:	4a40      	ldr	r2, [pc, #256]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x1e8>)
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4413      	add	r3, r2
 80009d8:	460a      	mov	r2, r1
 80009da:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 12; i++) {
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	3301      	adds	r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	2b0b      	cmp	r3, #11
 80009e6:	ddf0      	ble.n	80009ca <HAL_UART_RxCpltCallback+0xde>
			}

			// Sử dụng hàm sscanf để phân tích chuỗi dữ liệu và lấy giờ, phút và giây
			sscanf(rx_buffer_char, "T%d:%d:%dM", &setHour, &setMin, &setSec);
 80009e8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x1ec>)
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	4b3b      	ldr	r3, [pc, #236]	@ (8000adc <HAL_UART_RxCpltCallback+0x1f0>)
 80009ee:	4a3c      	ldr	r2, [pc, #240]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x1f4>)
 80009f0:	493c      	ldr	r1, [pc, #240]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x1f8>)
 80009f2:	4838      	ldr	r0, [pc, #224]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x1e8>)
 80009f4:	f004 f888 	bl	8004b08 <siscanf>

			rx_index = 0;
 80009f8:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e051      	b.n	8000aa4 <HAL_UART_RxCpltCallback+0x1b8>
		}

		// Phân tích chuỗi dữ liệu set thứ, ngày, tháng, năm
		else if (rx_data == 'E' && rx_buffer[0] == 'D' && rx_buffer[2] == '/' && rx_buffer[5] == '/' && rx_buffer[8] == '/')
 8000a00:	4b2e      	ldr	r3, [pc, #184]	@ (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b45      	cmp	r3, #69	@ 0x45
 8000a06:	d139      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x190>
 8000a08:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b44      	cmp	r3, #68	@ 0x44
 8000a0e:	d135      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x190>
 8000a10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a12:	789b      	ldrb	r3, [r3, #2]
 8000a14:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a16:	d131      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x190>
 8000a18:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a1a:	795b      	ldrb	r3, [r3, #5]
 8000a1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a1e:	d12d      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x190>
 8000a20:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a22:	7a1b      	ldrb	r3, [r3, #8]
 8000a24:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a26:	d129      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x190>
		{
			is_Date_set = 1;
 8000a28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x1fc>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
			// Lưu kí tự kết thúc chuỗi dữ liệu
			rx_buffer[rx_index] = rx_data;
 8000a2e:	4b24      	ldr	r3, [pc, #144]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000a36:	7819      	ldrb	r1, [r3, #0]
 8000a38:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a3a:	5499      	strb	r1, [r3, r2]

			// Sao chép dữ liệu từ rx_buffer vào rx_buffer_char
			for (int i = 0; i < 12; i++) {
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	e00b      	b.n	8000a5a <HAL_UART_RxCpltCallback+0x16e>
				rx_buffer_char[i] = rx_buffer[i];
 8000a42:	4a20      	ldr	r2, [pc, #128]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	7819      	ldrb	r1, [r3, #0]
 8000a4a:	4a22      	ldr	r2, [pc, #136]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	460a      	mov	r2, r1
 8000a52:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 12; i++) {
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2b0b      	cmp	r3, #11
 8000a5e:	ddf0      	ble.n	8000a42 <HAL_UART_RxCpltCallback+0x156>
			}

			// Sử dụng hàm sscanf để phân tích chuỗi dữ liệu và lấy thứ, ngày, tháng, năm
			sscanf(rx_buffer_char, "D%d/%d/%d/%dM", &setDay, &setDate, &setMonth, &setYear);
 8000a60:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <HAL_UART_RxCpltCallback+0x200>)
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <HAL_UART_RxCpltCallback+0x204>)
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4b22      	ldr	r3, [pc, #136]	@ (8000af4 <HAL_UART_RxCpltCallback+0x208>)
 8000a6a:	4a23      	ldr	r2, [pc, #140]	@ (8000af8 <HAL_UART_RxCpltCallback+0x20c>)
 8000a6c:	4923      	ldr	r1, [pc, #140]	@ (8000afc <HAL_UART_RxCpltCallback+0x210>)
 8000a6e:	4819      	ldr	r0, [pc, #100]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a70:	f004 f84a 	bl	8004b08 <siscanf>

			rx_index = 0;
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	e013      	b.n	8000aa4 <HAL_UART_RxCpltCallback+0x1b8>
		}

		else {
			// Nếu chưa gặp kí tự kết thúc thì cứ lưu dữ liệu vào mảng buffer
			rx_buffer[rx_index] = rx_data;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000a84:	7819      	ldrb	r1, [r3, #0]
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x1d8>)
 8000a88:	5499      	strb	r1, [r3, r2]
			rx_index++;
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a94:	701a      	strb	r2, [r3, #0]

			if (rx_index >= 12) {
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b0b      	cmp	r3, #11
 8000a9c:	d902      	bls.n	8000aa4 <HAL_UART_RxCpltCallback+0x1b8>
				rx_index = 0;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4905      	ldr	r1, [pc, #20]	@ (8000abc <HAL_UART_RxCpltCallback+0x1d0>)
 8000aa8:	4808      	ldr	r0, [pc, #32]	@ (8000acc <HAL_UART_RxCpltCallback+0x1e0>)
 8000aaa:	f003 fa68 	bl	8003f7e <HAL_UART_Receive_IT>
    }
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40013800 	.word	0x40013800
 8000abc:	20000220 	.word	0x20000220
 8000ac0:	2000023c 	.word	0x2000023c
 8000ac4:	20000224 	.word	0x20000224
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	20000108 	.word	0x20000108
 8000ad0:	20000218 	.word	0x20000218
 8000ad4:	20000230 	.word	0x20000230
 8000ad8:	200001fc 	.word	0x200001fc
 8000adc:	20000200 	.word	0x20000200
 8000ae0:	20000204 	.word	0x20000204
 8000ae4:	08005dfc 	.word	0x08005dfc
 8000ae8:	2000021c 	.word	0x2000021c
 8000aec:	20000214 	.word	0x20000214
 8000af0:	20000210 	.word	0x20000210
 8000af4:	20000208 	.word	0x20000208
 8000af8:	2000020c 	.word	0x2000020c
 8000afc:	08005e08 	.word	0x08005e08

08000b00 <main>:


int main(void)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b097      	sub	sp, #92	@ 0x5c
 8000b04:	af02      	add	r7, sp, #8
    HAL_Init();
 8000b06:	f000 fc09 	bl	800131c <HAL_Init>

    SystemClock_Config();
 8000b0a:	f000 f8bd 	bl	8000c88 <SystemClock_Config>

    MX_GPIO_Init();
 8000b0e:	f000 f9d5 	bl	8000ebc <MX_GPIO_Init>

    MX_SPI1_Init();
 8000b12:	f000 f96f 	bl	8000df4 <MX_SPI1_Init>
    MAX7219_Init();
 8000b16:	f7ff fda9 	bl	800066c <MAX7219_Init>

    MX_I2C1_Init();
 8000b1a:	f000 f9a1 	bl	8000e60 <MX_I2C1_Init>

    MX_TIM1_Init();
 8000b1e:	f000 f8f5 	bl	8000d0c <MX_TIM1_Init>
    MX_TIM2_Init();
 8000b22:	f000 f919 	bl	8000d58 <MX_TIM2_Init>
    HAL_TIM_Base_Start(&htim1);
 8000b26:	4848      	ldr	r0, [pc, #288]	@ (8000c48 <main+0x148>)
 8000b28:	f002 ff1a 	bl	8003960 <HAL_TIM_Base_Start>

    HAL_TIM_Base_Start_IT(&htim2);
 8000b2c:	4847      	ldr	r0, [pc, #284]	@ (8000c4c <main+0x14c>)
 8000b2e:	f002 ff61 	bl	80039f4 <HAL_TIM_Base_Start_IT>

    MX_USART1_UART_Init();
 8000b32:	f000 f935 	bl	8000da0 <MX_USART1_UART_Init>
    HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	4945      	ldr	r1, [pc, #276]	@ (8000c50 <main+0x150>)
 8000b3a:	4846      	ldr	r0, [pc, #280]	@ (8000c54 <main+0x154>)
 8000b3c:	f003 fa1f 	bl	8003f7e <HAL_UART_Receive_IT>

    DS3231_Time ds3231;
    DS3231_Init(&ds3231, &hi2c1);
 8000b40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b44:	4944      	ldr	r1, [pc, #272]	@ (8000c58 <main+0x158>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fba0 	bl	800028c <DS3231_Init>

    while (1)
    {
		if (is_Time_set) {
 8000b4c:	4b43      	ldr	r3, [pc, #268]	@ (8000c5c <main+0x15c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00f      	beq.n	8000b74 <main+0x74>
			is_Time_set = 0;
 8000b54:	4b41      	ldr	r3, [pc, #260]	@ (8000c5c <main+0x15c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
			// Thiết lập giờ, phút, giây hiện tại
			DS3231_SetTime(&ds3231, setHour, setMin, setSec);
 8000b5a:	4b41      	ldr	r3, [pc, #260]	@ (8000c60 <main+0x160>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	b2d9      	uxtb	r1, r3
 8000b60:	4b40      	ldr	r3, [pc, #256]	@ (8000c64 <main+0x164>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b40      	ldr	r3, [pc, #256]	@ (8000c68 <main+0x168>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000b70:	f7ff fb99 	bl	80002a6 <DS3231_SetTime>
		}

		if (is_Date_set) {
 8000b74:	4b3d      	ldr	r3, [pc, #244]	@ (8000c6c <main+0x16c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d014      	beq.n	8000ba6 <main+0xa6>
			is_Date_set = 0;
 8000b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c6c <main+0x16c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
			// Thiết lập thứ, ngày, tháng, năm hiện tại
			DS3231_SetDate(&ds3231, setDay, setDate, setMonth, setYear);
 8000b82:	4b3b      	ldr	r3, [pc, #236]	@ (8000c70 <main+0x170>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	b2d9      	uxtb	r1, r3
 8000b88:	4b3a      	ldr	r3, [pc, #232]	@ (8000c74 <main+0x174>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c78 <main+0x178>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	b2dc      	uxtb	r4, r3
 8000b94:	4b39      	ldr	r3, [pc, #228]	@ (8000c7c <main+0x17c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	4623      	mov	r3, r4
 8000ba2:	f7ff fbd2 	bl	800034a <DS3231_SetDate>
		}

		char buffer[50];
		DS3231_GetTime(&ds3231);
 8000ba6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fba7 	bl	80002fe <DS3231_GetTime>

		// Hiển thị thời gian lên LED 7 đoạn
		MAX7219_DisplayTime(&ds3231);
 8000bb0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fd85 	bl	80006c4 <MAX7219_DisplayTime>

		DS3231_GetDate(&ds3231);
 8000bba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fbf7 	bl	80003b2 <DS3231_GetDate>

		// Gửi dữ liệu thứ, ngày, tháng, năm lên GUI
		sprintf(buffer, "D%01d/%02d/%02d/20%02dE", ds3231.Day, ds3231.Date, ds3231.Month, ds3231.Year);
 8000bc4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000bce:	461c      	mov	r4, r3
 8000bd0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000bd4:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000bd8:	4638      	mov	r0, r7
 8000bda:	9201      	str	r2, [sp, #4]
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	4623      	mov	r3, r4
 8000be0:	460a      	mov	r2, r1
 8000be2:	4927      	ldr	r1, [pc, #156]	@ (8000c80 <main+0x180>)
 8000be4:	f003 ff70 	bl	8004ac8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000be8:	463b      	mov	r3, r7
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff faae 	bl	800014c <strlen>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	4816      	ldr	r0, [pc, #88]	@ (8000c54 <main+0x154>)
 8000bfc:	f003 f93c 	bl	8003e78 <HAL_UART_Transmit>

		HAL_Delay(500);
 8000c00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c04:	f000 fbec 	bl	80013e0 <HAL_Delay>

		// Gửi dữ liệu giờ, phút, giây lên GUI
		sprintf(buffer, "T%02d:%02d:%02dM", ds3231.Hour, ds3231.Min, ds3231.Sec);
 8000c08:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8000c12:	4619      	mov	r1, r3
 8000c14:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000c18:	4638      	mov	r0, r7
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	4919      	ldr	r1, [pc, #100]	@ (8000c84 <main+0x184>)
 8000c20:	f003 ff52 	bl	8004ac8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c24:	463b      	mov	r3, r7
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fa90 	bl	800014c <strlen>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4639      	mov	r1, r7
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <main+0x154>)
 8000c38:	f003 f91e 	bl	8003e78 <HAL_UART_Transmit>

		HAL_Delay(500);
 8000c3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c40:	f000 fbce 	bl	80013e0 <HAL_Delay>
    {
 8000c44:	e782      	b.n	8000b4c <main+0x4c>
 8000c46:	bf00      	nop
 8000c48:	20000078 	.word	0x20000078
 8000c4c:	200000c0 	.word	0x200000c0
 8000c50:	20000220 	.word	0x20000220
 8000c54:	20000108 	.word	0x20000108
 8000c58:	20000150 	.word	0x20000150
 8000c5c:	20000218 	.word	0x20000218
 8000c60:	20000204 	.word	0x20000204
 8000c64:	20000200 	.word	0x20000200
 8000c68:	200001fc 	.word	0x200001fc
 8000c6c:	2000021c 	.word	0x2000021c
 8000c70:	2000020c 	.word	0x2000020c
 8000c74:	20000208 	.word	0x20000208
 8000c78:	20000210 	.word	0x20000210
 8000c7c:	20000214 	.word	0x20000214
 8000c80:	08005e18 	.word	0x08005e18
 8000c84:	08005e30 	.word	0x08005e30

08000c88 <SystemClock_Config>:
    }
}


void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	@ 0x40
 8000c8c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	2228      	movs	r2, #40	@ 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 ff62 	bl	8004b60 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cbe:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 ff7b 	bl	8002bc4 <HAL_RCC_OscConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x50>
    {
      Error_Handler();
 8000cd4:	f000 f940 	bl	8000f58 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000cd8:	230f      	movs	r3, #15
 8000cda:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ce8:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 f9e8 	bl	80030c8 <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x7a>
    {
      Error_Handler();
 8000cfe:	f000 f92b 	bl	8000f58 <Error_Handler>
    }
}
 8000d02:	bf00      	nop
 8000d04:	3740      	adds	r7, #64	@ 0x40
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <MX_TIM1_Init>:


static void MX_TIM1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	htim1.Instance = TIM1;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	@ (8000d50 <MX_TIM1_Init+0x44>)
 8000d12:	4a10      	ldr	r2, [pc, #64]	@ (8000d54 <MX_TIM1_Init+0x48>)
 8000d14:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 63;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_TIM1_Init+0x44>)
 8000d18:	223f      	movs	r2, #63	@ 0x3f
 8000d1a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_TIM1_Init+0x44>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <MX_TIM1_Init+0x44>)
 8000d24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d28:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_TIM1_Init+0x44>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <MX_TIM1_Init+0x44>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_TIM1_Init+0x44>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <MX_TIM1_Init+0x44>)
 8000d3e:	f002 fdbf 	bl	80038c0 <HAL_TIM_Base_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0x40>
	{
	  Error_Handler();
 8000d48:	f000 f906 	bl	8000f58 <Error_Handler>
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000078 	.word	0x20000078
 8000d54:	40012c00 	.word	0x40012c00

08000d58 <MX_TIM2_Init>:


static void MX_TIM2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
    htim2.Instance = TIM2;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_TIM2_Init+0x44>)
 8000d5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d62:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 63999;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <MX_TIM2_Init+0x44>)
 8000d66:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000d6a:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_TIM2_Init+0x44>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 2000;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <MX_TIM2_Init+0x44>)
 8000d74:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000d78:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_TIM2_Init+0x44>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_TIM2_Init+0x44>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_TIM2_Init+0x44>)
 8000d88:	f002 fd9a 	bl	80038c0 <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0x3e>
    {
      Error_Handler();
 8000d92:	f000 f8e1 	bl	8000f58 <Error_Handler>
    }
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200000c0 	.word	0x200000c0

08000da0 <MX_USART1_UART_Init>:


static void MX_USART1_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <MX_USART1_UART_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000db0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd8:	f002 fffe 	bl	8003dd8 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x46>
	{
	  Error_Handler();
 8000de2:	f000 f8b9 	bl	8000f58 <Error_Handler>
	}
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000108 	.word	0x20000108
 8000df0:	40013800 	.word	0x40013800

08000df4 <MX_SPI1_Init>:


static void MX_SPI1_Init(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000dfa:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <MX_SPI1_Init+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e04:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e24:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e28:	2238      	movs	r2, #56	@ 0x38
 8000e2a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e40:	220a      	movs	r2, #10
 8000e42:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e46:	f002 facd 	bl	80033e4 <HAL_SPI_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_SPI1_Init+0x60>
        Error_Handler();
 8000e50:	f000 f882 	bl	8000f58 <Error_Handler>
    }
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001a4 	.word	0x200001a4
 8000e5c:	40013000 	.word	0x40013000

08000e60 <MX_I2C1_Init>:


static void MX_I2C1_Init(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8000e64:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e66:	4a13      	ldr	r2, [pc, #76]	@ (8000eb4 <MX_I2C1_Init+0x54>)
 8000e68:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e6c:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <MX_I2C1_Init+0x58>)
 8000e6e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e82:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000e8a:	4b09      	ldr	r3, [pc, #36]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e90:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e96:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000e9c:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <MX_I2C1_Init+0x50>)
 8000e9e:	f000 fe37 	bl	8001b10 <HAL_I2C_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_I2C1_Init+0x4c>
        Error_Handler();
 8000ea8:	f000 f856 	bl	8000f58 <Error_Handler>
    }
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000150 	.word	0x20000150
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	000186a0 	.word	0x000186a0

08000ebc <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <MX_GPIO_Init+0x94>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f50 <MX_GPIO_Init+0x94>)
 8000ed6:	f043 0320 	orr.w	r3, r3, #32
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <MX_GPIO_Init+0x94>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0320 	and.w	r3, r3, #32
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <MX_GPIO_Init+0x94>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a18      	ldr	r2, [pc, #96]	@ (8000f50 <MX_GPIO_Init+0x94>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MX_GPIO_Init+0x94>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2140      	movs	r1, #64	@ 0x40
 8000f04:	4813      	ldr	r0, [pc, #76]	@ (8000f54 <MX_GPIO_Init+0x98>)
 8000f06:	f000 fdea 	bl	8001ade <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f0a:	2340      	movs	r3, #64	@ 0x40
 8000f0c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2302      	movs	r3, #2
 8000f14:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480d      	ldr	r0, [pc, #52]	@ (8000f54 <MX_GPIO_Init+0x98>)
 8000f1e:	f000 fc43 	bl	80017a8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f28:	480a      	ldr	r0, [pc, #40]	@ (8000f54 <MX_GPIO_Init+0x98>)
 8000f2a:	f000 fdd8 	bl	8001ade <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_5;
 8000f2e:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8000f32:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <MX_GPIO_Init+0x98>)
 8000f44:	f000 fc30 	bl	80017a8 <HAL_GPIO_Init>
}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800

08000f58 <Error_Handler>:


void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
    __disable_irq();
    while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <Error_Handler+0x8>

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a14      	ldr	r2, [pc, #80]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6193      	str	r3, [r2, #24]
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	61d3      	str	r3, [r2, #28]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_MspInit+0x60>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_MspInit+0x60>)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000

08000fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a15      	ldr	r2, [pc, #84]	@ (8001038 <HAL_I2C_MspInit+0x70>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d123      	bne.n	8001030 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_I2C_MspInit+0x74>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a13      	ldr	r2, [pc, #76]	@ (800103c <HAL_I2C_MspInit+0x74>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_I2C_MspInit+0x74>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001000:	23c0      	movs	r3, #192	@ 0xc0
 8001002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001004:	2312      	movs	r3, #18
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	480b      	ldr	r0, [pc, #44]	@ (8001040 <HAL_I2C_MspInit+0x78>)
 8001014:	f000 fbc8 	bl	80017a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <HAL_I2C_MspInit+0x74>)
 800101a:	69db      	ldr	r3, [r3, #28]
 800101c:	4a07      	ldr	r2, [pc, #28]	@ (800103c <HAL_I2C_MspInit+0x74>)
 800101e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001022:	61d3      	str	r3, [r2, #28]
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <HAL_I2C_MspInit+0x74>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40005400 	.word	0x40005400
 800103c:	40021000 	.word	0x40021000
 8001040:	40010c00 	.word	0x40010c00

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a15      	ldr	r2, [pc, #84]	@ (80010b4 <HAL_SPI_MspInit+0x70>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d123      	bne.n	80010ac <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <HAL_SPI_MspInit+0x74>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a13      	ldr	r2, [pc, #76]	@ (80010b8 <HAL_SPI_MspInit+0x74>)
 800106a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_SPI_MspInit+0x74>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_SPI_MspInit+0x74>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <HAL_SPI_MspInit+0x74>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_SPI_MspInit+0x74>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001094:	23a0      	movs	r3, #160	@ 0xa0
 8001096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <HAL_SPI_MspInit+0x78>)
 80010a8:	f000 fb7e 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40013000 	.word	0x40013000
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010800 	.word	0x40010800

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a16      	ldr	r2, [pc, #88]	@ (8001128 <HAL_TIM_Base_MspInit+0x68>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d10c      	bne.n	80010ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <HAL_TIM_Base_MspInit+0x6c>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	4a15      	ldr	r2, [pc, #84]	@ (800112c <HAL_TIM_Base_MspInit+0x6c>)
 80010d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010dc:	6193      	str	r3, [r2, #24]
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <HAL_TIM_Base_MspInit+0x6c>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ea:	e018      	b.n	800111e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010f4:	d113      	bne.n	800111e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <HAL_TIM_Base_MspInit+0x6c>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <HAL_TIM_Base_MspInit+0x6c>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_TIM_Base_MspInit+0x6c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	201c      	movs	r0, #28
 8001114:	f000 fa5f 	bl	80015d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001118:	201c      	movs	r0, #28
 800111a:	f000 fa78 	bl	800160e <HAL_NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012c00 	.word	0x40012c00
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a20      	ldr	r2, [pc, #128]	@ (80011cc <HAL_UART_MspInit+0x9c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d139      	bne.n	80011c4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <HAL_UART_MspInit+0xa0>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a1e      	ldr	r2, [pc, #120]	@ (80011d0 <HAL_UART_MspInit+0xa0>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <HAL_UART_MspInit+0xa0>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <HAL_UART_MspInit+0xa0>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a18      	ldr	r2, [pc, #96]	@ (80011d0 <HAL_UART_MspInit+0xa0>)
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <HAL_UART_MspInit+0xa0>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001180:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	480f      	ldr	r0, [pc, #60]	@ (80011d4 <HAL_UART_MspInit+0xa4>)
 8001196:	f000 fb07 	bl	80017a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800119a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800119e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	4809      	ldr	r0, [pc, #36]	@ (80011d4 <HAL_UART_MspInit+0xa4>)
 80011b0:	f000 fafa 	bl	80017a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2025      	movs	r0, #37	@ 0x25
 80011ba:	f000 fa0c 	bl	80015d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011be:	2025      	movs	r0, #37	@ 0x25
 80011c0:	f000 fa25 	bl	800160e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <NMI_Handler+0x4>

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <MemManage_Handler+0x4>

080011f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <UsageFault_Handler+0x4>

08001200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 f8be 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <TIM2_IRQHandler+0x10>)
 8001236:	f002 fc2f 	bl	8003a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200000c0 	.word	0x200000c0

08001244 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <USART1_IRQHandler+0x10>)
 800124a:	f002 febd 	bl	8003fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000108 	.word	0x20000108

08001258 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <_sbrk+0x5c>)
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <_sbrk+0x60>)
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d102      	bne.n	800127a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <_sbrk+0x64>)
 8001276:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <_sbrk+0x68>)
 8001278:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	d207      	bcs.n	8001298 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001288:	f003 fc72 	bl	8004b70 <__errno>
 800128c:	4603      	mov	r3, r0
 800128e:	220c      	movs	r2, #12
 8001290:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	e009      	b.n	80012ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800129e:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <_sbrk+0x64>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4413      	add	r3, r2
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <_sbrk+0x64>)
 80012a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20005000 	.word	0x20005000
 80012b8:	00000400 	.word	0x00000400
 80012bc:	20000240 	.word	0x20000240
 80012c0:	20000390 	.word	0x20000390

080012c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d0:	f7ff fff8 	bl	80012c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d4:	480b      	ldr	r0, [pc, #44]	@ (8001304 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012d6:	490c      	ldr	r1, [pc, #48]	@ (8001308 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012d8:	4a0c      	ldr	r2, [pc, #48]	@ (800130c <LoopFillZerobss+0x16>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a09      	ldr	r2, [pc, #36]	@ (8001310 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012ec:	4c09      	ldr	r4, [pc, #36]	@ (8001314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fa:	f003 fc3f 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012fe:	f7ff fbff 	bl	8000b00 <main>
  bx lr
 8001302:	4770      	bx	lr
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800130c:	08005fdc 	.word	0x08005fdc
  ldr r2, =_sbss
 8001310:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001314:	20000390 	.word	0x20000390

08001318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC1_2_IRQHandler>
	...

0800131c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_Init+0x28>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_Init+0x28>)
 8001326:	f043 0310 	orr.w	r3, r3, #16
 800132a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 f947 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	200f      	movs	r0, #15
 8001334:	f000 f808 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff fe14 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40022000 	.word	0x40022000

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f95f 	bl	800162a <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 f927 	bl	80015d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	@ (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <HAL_IncTick+0x1c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <HAL_IncTick+0x20>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a03      	ldr	r2, [pc, #12]	@ (80013c8 <HAL_IncTick+0x20>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000244 	.word	0x20000244

080013cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return uwTick;
 80013d0:	4b02      	ldr	r3, [pc, #8]	@ (80013dc <HAL_GetTick+0x10>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	20000244 	.word	0x20000244

080013e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e8:	f7ff fff0 	bl	80013cc <HAL_GetTick>
 80013ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f8:	d005      	beq.n	8001406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_Delay+0x44>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4413      	add	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001406:	bf00      	nop
 8001408:	f7ff ffe0 	bl	80013cc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d8f7      	bhi.n	8001408 <HAL_Delay+0x28>
  {
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0b      	blt.n	80014b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 021f 	and.w	r2, r3, #31
 80014a4:	4906      	ldr	r1, [pc, #24]	@ (80014c0 <__NVIC_EnableIRQ+0x34>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	2001      	movs	r0, #1
 80014ae:	fa00 f202 	lsl.w	r2, r0, r2
 80014b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	@ (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	@ (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f7ff ff90 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff2d 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff42 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff90 	bl	8001518 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5f 	bl	80014c4 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff35 	bl	800148c <__NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ffa2 	bl	800157c <SysTick_Config>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d008      	beq.n	800166c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e020      	b.n	80016ae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 020e 	bic.w	r2, r2, #14
 800167a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001694:	2101      	movs	r1, #1
 8001696:	fa01 f202 	lsl.w	r2, r1, r2
 800169a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d005      	beq.n	80016dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2204      	movs	r2, #4
 80016d4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e051      	b.n	8001780 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 020e 	bic.w	r2, r2, #14
 80016ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a22      	ldr	r2, [pc, #136]	@ (800178c <HAL_DMA_Abort_IT+0xd4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d029      	beq.n	800175a <HAL_DMA_Abort_IT+0xa2>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a21      	ldr	r2, [pc, #132]	@ (8001790 <HAL_DMA_Abort_IT+0xd8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d022      	beq.n	8001756 <HAL_DMA_Abort_IT+0x9e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1f      	ldr	r2, [pc, #124]	@ (8001794 <HAL_DMA_Abort_IT+0xdc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d01a      	beq.n	8001750 <HAL_DMA_Abort_IT+0x98>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1e      	ldr	r2, [pc, #120]	@ (8001798 <HAL_DMA_Abort_IT+0xe0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d012      	beq.n	800174a <HAL_DMA_Abort_IT+0x92>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1c      	ldr	r2, [pc, #112]	@ (800179c <HAL_DMA_Abort_IT+0xe4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00a      	beq.n	8001744 <HAL_DMA_Abort_IT+0x8c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a1b      	ldr	r2, [pc, #108]	@ (80017a0 <HAL_DMA_Abort_IT+0xe8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d102      	bne.n	800173e <HAL_DMA_Abort_IT+0x86>
 8001738:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800173c:	e00e      	b.n	800175c <HAL_DMA_Abort_IT+0xa4>
 800173e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001742:	e00b      	b.n	800175c <HAL_DMA_Abort_IT+0xa4>
 8001744:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001748:	e008      	b.n	800175c <HAL_DMA_Abort_IT+0xa4>
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	e005      	b.n	800175c <HAL_DMA_Abort_IT+0xa4>
 8001750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001754:	e002      	b.n	800175c <HAL_DMA_Abort_IT+0xa4>
 8001756:	2310      	movs	r3, #16
 8001758:	e000      	b.n	800175c <HAL_DMA_Abort_IT+0xa4>
 800175a:	2301      	movs	r3, #1
 800175c:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <HAL_DMA_Abort_IT+0xec>)
 800175e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	4798      	blx	r3
    } 
  }
  return status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020008 	.word	0x40020008
 8001790:	4002001c 	.word	0x4002001c
 8001794:	40020030 	.word	0x40020030
 8001798:	40020044 	.word	0x40020044
 800179c:	40020058 	.word	0x40020058
 80017a0:	4002006c 	.word	0x4002006c
 80017a4:	40020000 	.word	0x40020000

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	@ 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e169      	b.n	8001a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017bc:	2201      	movs	r2, #1
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8158 	bne.w	8001a8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a9a      	ldr	r2, [pc, #616]	@ (8001a48 <HAL_GPIO_Init+0x2a0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d05e      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017e4:	4a98      	ldr	r2, [pc, #608]	@ (8001a48 <HAL_GPIO_Init+0x2a0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d875      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017ea:	4a98      	ldr	r2, [pc, #608]	@ (8001a4c <HAL_GPIO_Init+0x2a4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d058      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017f0:	4a96      	ldr	r2, [pc, #600]	@ (8001a4c <HAL_GPIO_Init+0x2a4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d86f      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017f6:	4a96      	ldr	r2, [pc, #600]	@ (8001a50 <HAL_GPIO_Init+0x2a8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d052      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017fc:	4a94      	ldr	r2, [pc, #592]	@ (8001a50 <HAL_GPIO_Init+0x2a8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d869      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001802:	4a94      	ldr	r2, [pc, #592]	@ (8001a54 <HAL_GPIO_Init+0x2ac>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d04c      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001808:	4a92      	ldr	r2, [pc, #584]	@ (8001a54 <HAL_GPIO_Init+0x2ac>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d863      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800180e:	4a92      	ldr	r2, [pc, #584]	@ (8001a58 <HAL_GPIO_Init+0x2b0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d046      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001814:	4a90      	ldr	r2, [pc, #576]	@ (8001a58 <HAL_GPIO_Init+0x2b0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d85d      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d82a      	bhi.n	8001874 <HAL_GPIO_Init+0xcc>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d859      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001822:	a201      	add	r2, pc, #4	@ (adr r2, 8001828 <HAL_GPIO_Init+0x80>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	080018a3 	.word	0x080018a3
 800182c:	0800187d 	.word	0x0800187d
 8001830:	0800188f 	.word	0x0800188f
 8001834:	080018d1 	.word	0x080018d1
 8001838:	080018d7 	.word	0x080018d7
 800183c:	080018d7 	.word	0x080018d7
 8001840:	080018d7 	.word	0x080018d7
 8001844:	080018d7 	.word	0x080018d7
 8001848:	080018d7 	.word	0x080018d7
 800184c:	080018d7 	.word	0x080018d7
 8001850:	080018d7 	.word	0x080018d7
 8001854:	080018d7 	.word	0x080018d7
 8001858:	080018d7 	.word	0x080018d7
 800185c:	080018d7 	.word	0x080018d7
 8001860:	080018d7 	.word	0x080018d7
 8001864:	080018d7 	.word	0x080018d7
 8001868:	080018d7 	.word	0x080018d7
 800186c:	08001885 	.word	0x08001885
 8001870:	08001899 	.word	0x08001899
 8001874:	4a79      	ldr	r2, [pc, #484]	@ (8001a5c <HAL_GPIO_Init+0x2b4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187a:	e02c      	b.n	80018d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e029      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	3304      	adds	r3, #4
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e024      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	3308      	adds	r3, #8
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e01f      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	330c      	adds	r3, #12
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e01a      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018aa:	2304      	movs	r3, #4
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e013      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	611a      	str	r2, [r3, #16]
          break;
 80018c2:	e009      	b.n	80018d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	615a      	str	r2, [r3, #20]
          break;
 80018ce:	e003      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          break;
 80018d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	@ 0xff
 80018dc:	d801      	bhi.n	80018e2 <HAL_GPIO_Init+0x13a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	e001      	b.n	80018e6 <HAL_GPIO_Init+0x13e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3304      	adds	r3, #4
 80018e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	@ 0xff
 80018ec:	d802      	bhi.n	80018f4 <HAL_GPIO_Init+0x14c>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_Init+0x152>
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	3b08      	subs	r3, #8
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	210f      	movs	r1, #15
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80b1 	beq.w	8001a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001928:	4b4d      	ldr	r3, [pc, #308]	@ (8001a60 <HAL_GPIO_Init+0x2b8>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a60 <HAL_GPIO_Init+0x2b8>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b4a      	ldr	r3, [pc, #296]	@ (8001a60 <HAL_GPIO_Init+0x2b8>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001940:	4a48      	ldr	r2, [pc, #288]	@ (8001a64 <HAL_GPIO_Init+0x2bc>)
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a40      	ldr	r2, [pc, #256]	@ (8001a68 <HAL_GPIO_Init+0x2c0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d013      	beq.n	8001994 <HAL_GPIO_Init+0x1ec>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a6c <HAL_GPIO_Init+0x2c4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_GPIO_Init+0x1e8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3e      	ldr	r2, [pc, #248]	@ (8001a70 <HAL_GPIO_Init+0x2c8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_GPIO_Init+0x1e4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a74 <HAL_GPIO_Init+0x2cc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_GPIO_Init+0x1e0>
 8001984:	2303      	movs	r3, #3
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001988:	2304      	movs	r3, #4
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001994:	2300      	movs	r3, #0
 8001996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019a6:	492f      	ldr	r1, [pc, #188]	@ (8001a64 <HAL_GPIO_Init+0x2bc>)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	492c      	ldr	r1, [pc, #176]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4928      	ldr	r1, [pc, #160]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019d8:	4013      	ands	r3, r2
 80019da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e8:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4922      	ldr	r1, [pc, #136]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	491e      	ldr	r1, [pc, #120]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a10:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4918      	ldr	r1, [pc, #96]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4914      	ldr	r1, [pc, #80]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d021      	beq.n	8001a7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	490e      	ldr	r1, [pc, #56]	@ (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e021      	b.n	8001a8a <HAL_GPIO_Init+0x2e2>
 8001a46:	bf00      	nop
 8001a48:	10320000 	.word	0x10320000
 8001a4c:	10310000 	.word	0x10310000
 8001a50:	10220000 	.word	0x10220000
 8001a54:	10210000 	.word	0x10210000
 8001a58:	10120000 	.word	0x10120000
 8001a5c:	10110000 	.word	0x10110000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	40010c00 	.word	0x40010c00
 8001a70:	40011000 	.word	0x40011000
 8001a74:	40011400 	.word	0x40011400
 8001a78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <HAL_GPIO_Init+0x304>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4909      	ldr	r1, [pc, #36]	@ (8001aac <HAL_GPIO_Init+0x304>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f47f ae8e 	bne.w	80017bc <HAL_GPIO_Init+0x14>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	372c      	adds	r7, #44	@ 0x2c
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e001      	b.n	8001ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	807b      	strh	r3, [r7, #2]
 8001aea:	4613      	mov	r3, r2
 8001aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aee:	787b      	ldrb	r3, [r7, #1]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af4:	887a      	ldrh	r2, [r7, #2]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001afa:	e003      	b.n	8001b04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	041a      	lsls	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	611a      	str	r2, [r3, #16]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e12b      	b.n	8001d7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d106      	bne.n	8001b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fa46 	bl	8000fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2224      	movs	r2, #36	@ 0x24
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b74:	f001 fbf0 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8001b78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4a81      	ldr	r2, [pc, #516]	@ (8001d84 <HAL_I2C_Init+0x274>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d807      	bhi.n	8001b94 <HAL_I2C_Init+0x84>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4a80      	ldr	r2, [pc, #512]	@ (8001d88 <HAL_I2C_Init+0x278>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	bf94      	ite	ls
 8001b8c:	2301      	movls	r3, #1
 8001b8e:	2300      	movhi	r3, #0
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	e006      	b.n	8001ba2 <HAL_I2C_Init+0x92>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a7d      	ldr	r2, [pc, #500]	@ (8001d8c <HAL_I2C_Init+0x27c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	bf94      	ite	ls
 8001b9c:	2301      	movls	r3, #1
 8001b9e:	2300      	movhi	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e0e7      	b.n	8001d7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4a78      	ldr	r2, [pc, #480]	@ (8001d90 <HAL_I2C_Init+0x280>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0c9b      	lsrs	r3, r3, #18
 8001bb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8001d84 <HAL_I2C_Init+0x274>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d802      	bhi.n	8001be4 <HAL_I2C_Init+0xd4>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	3301      	adds	r3, #1
 8001be2:	e009      	b.n	8001bf8 <HAL_I2C_Init+0xe8>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	4a69      	ldr	r2, [pc, #420]	@ (8001d94 <HAL_I2C_Init+0x284>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	495c      	ldr	r1, [pc, #368]	@ (8001d84 <HAL_I2C_Init+0x274>)
 8001c14:	428b      	cmp	r3, r1
 8001c16:	d819      	bhi.n	8001c4c <HAL_I2C_Init+0x13c>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1e59      	subs	r1, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c26:	1c59      	adds	r1, r3, #1
 8001c28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c2c:	400b      	ands	r3, r1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_I2C_Init+0x138>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1e59      	subs	r1, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c40:	3301      	adds	r3, #1
 8001c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c46:	e051      	b.n	8001cec <HAL_I2C_Init+0x1dc>
 8001c48:	2304      	movs	r3, #4
 8001c4a:	e04f      	b.n	8001cec <HAL_I2C_Init+0x1dc>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d111      	bne.n	8001c78 <HAL_I2C_Init+0x168>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1e58      	subs	r0, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	440b      	add	r3, r1
 8001c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c66:	3301      	adds	r3, #1
 8001c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf0c      	ite	eq
 8001c70:	2301      	moveq	r3, #1
 8001c72:	2300      	movne	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	e012      	b.n	8001c9e <HAL_I2C_Init+0x18e>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1e58      	subs	r0, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	0099      	lsls	r1, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Init+0x196>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e022      	b.n	8001cec <HAL_I2C_Init+0x1dc>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10e      	bne.n	8001ccc <HAL_I2C_Init+0x1bc>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1e58      	subs	r0, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	440b      	add	r3, r1
 8001cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cca:	e00f      	b.n	8001cec <HAL_I2C_Init+0x1dc>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1e58      	subs	r0, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	0099      	lsls	r1, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	6809      	ldr	r1, [r1, #0]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69da      	ldr	r2, [r3, #28]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6911      	ldr	r1, [r2, #16]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68d2      	ldr	r2, [r2, #12]
 8001d26:	4311      	orrs	r1, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	000186a0 	.word	0x000186a0
 8001d88:	001e847f 	.word	0x001e847f
 8001d8c:	003d08ff 	.word	0x003d08ff
 8001d90:	431bde83 	.word	0x431bde83
 8001d94:	10624dd3 	.word	0x10624dd3

08001d98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	460b      	mov	r3, r1
 8001dac:	813b      	strh	r3, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001db2:	f7ff fb0b 	bl	80013cc <HAL_GetTick>
 8001db6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	f040 80d9 	bne.w	8001f78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2319      	movs	r3, #25
 8001dcc:	2201      	movs	r2, #1
 8001dce:	496d      	ldr	r1, [pc, #436]	@ (8001f84 <HAL_I2C_Mem_Write+0x1ec>)
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 fcc1 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e0cc      	b.n	8001f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_I2C_Mem_Write+0x56>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e0c5      	b.n	8001f7a <HAL_I2C_Mem_Write+0x1e2>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d007      	beq.n	8001e14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2221      	movs	r2, #33	@ 0x21
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2240      	movs	r2, #64	@ 0x40
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a3a      	ldr	r2, [r7, #32]
 8001e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4a4d      	ldr	r2, [pc, #308]	@ (8001f88 <HAL_I2C_Mem_Write+0x1f0>)
 8001e54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e56:	88f8      	ldrh	r0, [r7, #6]
 8001e58:	893a      	ldrh	r2, [r7, #8]
 8001e5a:	8979      	ldrh	r1, [r7, #10]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4603      	mov	r3, r0
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 faf8 	bl	800245c <I2C_RequestMemoryWrite>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d052      	beq.n	8001f18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e081      	b.n	8001f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fd86 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00d      	beq.n	8001ea2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d107      	bne.n	8001e9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e06b      	b.n	8001f7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	781a      	ldrb	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d11b      	bne.n	8001f18 <HAL_I2C_Mem_Write+0x180>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d017      	beq.n	8001f18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1aa      	bne.n	8001e76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 fd79 	bl	8002a1c <I2C_WaitOnBTFFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00d      	beq.n	8001f4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d107      	bne.n	8001f48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e016      	b.n	8001f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e000      	b.n	8001f7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f78:	2302      	movs	r3, #2
  }
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	00100002 	.word	0x00100002
 8001f88:	ffff0000 	.word	0xffff0000

08001f8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	@ 0x30
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	4608      	mov	r0, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	817b      	strh	r3, [r7, #10]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	813b      	strh	r3, [r7, #8]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001faa:	f7ff fa0f 	bl	80013cc <HAL_GetTick>
 8001fae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	f040 8244 	bne.w	8002446 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2319      	movs	r3, #25
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4982      	ldr	r1, [pc, #520]	@ (80021d0 <HAL_I2C_Mem_Read+0x244>)
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 fbc5 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e237      	b.n	8002448 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_I2C_Mem_Read+0x5a>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e230      	b.n	8002448 <HAL_I2C_Mem_Read+0x4bc>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d007      	beq.n	800200c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800201a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2222      	movs	r2, #34	@ 0x22
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2240      	movs	r2, #64	@ 0x40
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002036:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800203c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4a62      	ldr	r2, [pc, #392]	@ (80021d4 <HAL_I2C_Mem_Read+0x248>)
 800204c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800204e:	88f8      	ldrh	r0, [r7, #6]
 8002050:	893a      	ldrh	r2, [r7, #8]
 8002052:	8979      	ldrh	r1, [r7, #10]
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	4603      	mov	r3, r0
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fa92 	bl	8002588 <I2C_RequestMemoryRead>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e1ec      	b.n	8002448 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002072:	2b00      	cmp	r3, #0
 8002074:	d113      	bne.n	800209e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e1c0      	b.n	8002420 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d11e      	bne.n	80020e4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020b6:	b672      	cpsid	i
}
 80020b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020e0:	b662      	cpsie	i
}
 80020e2:	e035      	b.n	8002150 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d11e      	bne.n	800212a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020fc:	b672      	cpsid	i
}
 80020fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002124:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002126:	b662      	cpsie	i
}
 8002128:	e012      	b.n	8002150 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002138:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002150:	e166      	b.n	8002420 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002156:	2b03      	cmp	r3, #3
 8002158:	f200 811f 	bhi.w	800239a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002160:	2b01      	cmp	r3, #1
 8002162:	d123      	bne.n	80021ac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002166:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 fc9f 	bl	8002aac <I2C_WaitOnRXNEFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e167      	b.n	8002448 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021aa:	e139      	b.n	8002420 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d152      	bne.n	800225a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ba:	2200      	movs	r2, #0
 80021bc:	4906      	ldr	r1, [pc, #24]	@ (80021d8 <HAL_I2C_Mem_Read+0x24c>)
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 faca 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e13c      	b.n	8002448 <HAL_I2C_Mem_Read+0x4bc>
 80021ce:	bf00      	nop
 80021d0:	00100002 	.word	0x00100002
 80021d4:	ffff0000 	.word	0xffff0000
 80021d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80021dc:	b672      	cpsid	i
}
 80021de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002222:	b662      	cpsie	i
}
 8002224:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002258:	e0e2      	b.n	8002420 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002260:	2200      	movs	r2, #0
 8002262:	497b      	ldr	r1, [pc, #492]	@ (8002450 <HAL_I2C_Mem_Read+0x4c4>)
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fa77 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0e9      	b.n	8002448 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002282:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022ba:	4b66      	ldr	r3, [pc, #408]	@ (8002454 <HAL_I2C_Mem_Read+0x4c8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	4a65      	ldr	r2, [pc, #404]	@ (8002458 <HAL_I2C_Mem_Read+0x4cc>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0a1a      	lsrs	r2, r3, #8
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00da      	lsls	r2, r3, #3
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d118      	bne.n	8002312 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f043 0220 	orr.w	r2, r3, #32
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002302:	b662      	cpsie	i
}
 8002304:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e09a      	b.n	8002448 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b04      	cmp	r3, #4
 800231e:	d1d9      	bne.n	80022d4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002362:	b662      	cpsie	i
}
 8002364:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002398:	e042      	b.n	8002420 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fb84 	bl	8002aac <I2C_WaitOnRXNEFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e04c      	b.n	8002448 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d118      	bne.n	8002420 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	2b00      	cmp	r3, #0
 8002426:	f47f ae94 	bne.w	8002152 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3728      	adds	r7, #40	@ 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	00010004 	.word	0x00010004
 8002454:	20000000 	.word	0x20000000
 8002458:	14f8b589 	.word	0x14f8b589

0800245c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	4608      	mov	r0, r1
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	4603      	mov	r3, r0
 800246c:	817b      	strh	r3, [r7, #10]
 800246e:	460b      	mov	r3, r1
 8002470:	813b      	strh	r3, [r7, #8]
 8002472:	4613      	mov	r3, r2
 8002474:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	2200      	movs	r2, #0
 800248e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f960 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00d      	beq.n	80024ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ac:	d103      	bne.n	80024b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e05f      	b.n	800257a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ba:	897b      	ldrh	r3, [r7, #10]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	6a3a      	ldr	r2, [r7, #32]
 80024ce:	492d      	ldr	r1, [pc, #180]	@ (8002584 <I2C_RequestMemoryWrite+0x128>)
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f9bb 	bl	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e04c      	b.n	800257a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	6a39      	ldr	r1, [r7, #32]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fa46 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00d      	beq.n	8002522 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	2b04      	cmp	r3, #4
 800250c:	d107      	bne.n	800251e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800251c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e02b      	b.n	800257a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002528:	893b      	ldrh	r3, [r7, #8]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	611a      	str	r2, [r3, #16]
 8002532:	e021      	b.n	8002578 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002534:	893b      	ldrh	r3, [r7, #8]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	b29b      	uxth	r3, r3
 800253a:	b2da      	uxtb	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002544:	6a39      	ldr	r1, [r7, #32]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fa20 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	2b04      	cmp	r3, #4
 8002558:	d107      	bne.n	800256a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002568:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e005      	b.n	800257a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800256e:	893b      	ldrh	r3, [r7, #8]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	00010002 	.word	0x00010002

08002588 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4603      	mov	r3, r0
 8002598:	817b      	strh	r3, [r7, #10]
 800259a:	460b      	mov	r3, r1
 800259c:	813b      	strh	r3, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8c2 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025e8:	d103      	bne.n	80025f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0aa      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	4952      	ldr	r1, [pc, #328]	@ (8002754 <I2C_RequestMemoryRead+0x1cc>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f91d 	bl	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e097      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002634:	6a39      	ldr	r1, [r7, #32]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f9a8 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2b04      	cmp	r3, #4
 8002648:	d107      	bne.n	800265a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e076      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002664:	893b      	ldrh	r3, [r7, #8]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	611a      	str	r2, [r3, #16]
 800266e:	e021      	b.n	80026b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002670:	893b      	ldrh	r3, [r7, #8]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	b29b      	uxth	r3, r3
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f982 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b04      	cmp	r3, #4
 8002694:	d107      	bne.n	80026a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e050      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026aa:	893b      	ldrh	r3, [r7, #8]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b6:	6a39      	ldr	r1, [r7, #32]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f967 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d107      	bne.n	80026dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e035      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f82b 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002716:	d103      	bne.n	8002720 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e013      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002724:	897b      	ldrh	r3, [r7, #10]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	4906      	ldr	r1, [pc, #24]	@ (8002754 <I2C_RequestMemoryRead+0x1cc>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f886 	bl	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	00010002 	.word	0x00010002

08002758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002768:	e048      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d044      	beq.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7fe fe2b 	bl	80013cc <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d139      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10d      	bne.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	43da      	mvns	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	e00c      	b.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	43da      	mvns	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d116      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e023      	b.n	8002844 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10d      	bne.n	8002822 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	43da      	mvns	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4013      	ands	r3, r2
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	e00c      	b.n	800283c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	429a      	cmp	r2, r3
 8002840:	d093      	beq.n	800276a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800285a:	e071      	b.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286a:	d123      	bne.n	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002884:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f043 0204 	orr.w	r2, r3, #4
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e067      	b.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ba:	d041      	beq.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028bc:	f7fe fd86 	bl	80013cc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d302      	bcc.n	80028d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d136      	bne.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10c      	bne.n	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4013      	ands	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e00b      	b.n	800290e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e021      	b.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10c      	bne.n	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	43da      	mvns	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e00b      	b.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4013      	ands	r3, r2
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	bf14      	ite	ne
 8002976:	2301      	movne	r3, #1
 8002978:	2300      	moveq	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	f47f af6d 	bne.w	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002998:	e034      	b.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f8e3 	bl	8002b66 <I2C_IsAcknowledgeFailed>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e034      	b.n	8002a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d028      	beq.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7fe fd0b 	bl	80013cc <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d11d      	bne.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d2:	2b80      	cmp	r3, #128	@ 0x80
 80029d4:	d016      	beq.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	f043 0220 	orr.w	r2, r3, #32
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e007      	b.n	8002a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0e:	2b80      	cmp	r3, #128	@ 0x80
 8002a10:	d1c3      	bne.n	800299a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a28:	e034      	b.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f89b 	bl	8002b66 <I2C_IsAcknowledgeFailed>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e034      	b.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d028      	beq.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe fcc3 	bl	80013cc <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d016      	beq.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e007      	b.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d1c3      	bne.n	8002a2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ab8:	e049      	b.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d119      	bne.n	8002afc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0210 	mvn.w	r2, #16
 8002ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e030      	b.n	8002b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afc:	f7fe fc66 	bl	80013cc <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d302      	bcc.n	8002b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11d      	bne.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1c:	2b40      	cmp	r3, #64	@ 0x40
 8002b1e:	d016      	beq.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f043 0220 	orr.w	r2, r3, #32
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e007      	b.n	8002b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b58:	2b40      	cmp	r3, #64	@ 0x40
 8002b5a:	d1ae      	bne.n	8002aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7c:	d11b      	bne.n	8002bb6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e272      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8087 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be4:	4b92      	ldr	r3, [pc, #584]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d00c      	beq.n	8002c0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d112      	bne.n	8002c22 <HAL_RCC_OscConfig+0x5e>
 8002bfc:	4b8c      	ldr	r3, [pc, #560]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c08:	d10b      	bne.n	8002c22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0a:	4b89      	ldr	r3, [pc, #548]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d06c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x12c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d168      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e24c      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c2a:	d106      	bne.n	8002c3a <HAL_RCC_OscConfig+0x76>
 8002c2c:	4b80      	ldr	r3, [pc, #512]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a7f      	ldr	r2, [pc, #508]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e02e      	b.n	8002c98 <HAL_RCC_OscConfig+0xd4>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x98>
 8002c42:	4b7b      	ldr	r3, [pc, #492]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7a      	ldr	r2, [pc, #488]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b78      	ldr	r3, [pc, #480]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a77      	ldr	r2, [pc, #476]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e01d      	b.n	8002c98 <HAL_RCC_OscConfig+0xd4>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0xbc>
 8002c66:	4b72      	ldr	r3, [pc, #456]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a71      	ldr	r2, [pc, #452]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b6f      	ldr	r3, [pc, #444]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6e      	ldr	r2, [pc, #440]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0xd4>
 8002c80:	4b6b      	ldr	r3, [pc, #428]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6a      	ldr	r2, [pc, #424]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b68      	ldr	r3, [pc, #416]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a67      	ldr	r2, [pc, #412]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fb94 	bl	80013cc <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fb90 	bl	80013cc <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	@ 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e200      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b5d      	ldr	r3, [pc, #372]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xe4>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fb80 	bl	80013cc <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fb7c 	bl	80013cc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	@ 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e1ec      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x10c>
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d063      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d0a:	4b49      	ldr	r3, [pc, #292]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d11c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x18c>
 8002d16:	4b46      	ldr	r3, [pc, #280]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	4b43      	ldr	r3, [pc, #268]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x176>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e1c0      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4939      	ldr	r1, [pc, #228]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	e03a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d58:	4b36      	ldr	r3, [pc, #216]	@ (8002e34 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fb35 	bl	80013cc <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d66:	f7fe fb31 	bl	80013cc <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1a1      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	4b2d      	ldr	r3, [pc, #180]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b2a      	ldr	r3, [pc, #168]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4927      	ldr	r1, [pc, #156]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
 8002d98:	e015      	b.n	8002dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9a:	4b26      	ldr	r3, [pc, #152]	@ (8002e34 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe fb14 	bl	80013cc <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da8:	f7fe fb10 	bl	80013cc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e180      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d03a      	beq.n	8002e48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d019      	beq.n	8002e0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b17      	ldr	r3, [pc, #92]	@ (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de0:	f7fe faf4 	bl	80013cc <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe faf0 	bl	80013cc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e160      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e06:	2001      	movs	r0, #1
 8002e08:	f000 face 	bl	80033a8 <RCC_Delay>
 8002e0c:	e01c      	b.n	8002e48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_RCC_OscConfig+0x274>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e14:	f7fe fada 	bl	80013cc <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1a:	e00f      	b.n	8002e3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1c:	f7fe fad6 	bl	80013cc <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d908      	bls.n	8002e3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e146      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	42420000 	.word	0x42420000
 8002e38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	4b92      	ldr	r3, [pc, #584]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e9      	bne.n	8002e1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a6 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e56:	2300      	movs	r3, #0
 8002e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10d      	bne.n	8002e82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	4b88      	ldr	r3, [pc, #544]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	4a87      	ldr	r2, [pc, #540]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	61d3      	str	r3, [r2, #28]
 8002e72:	4b85      	ldr	r3, [pc, #532]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e82:	4b82      	ldr	r3, [pc, #520]	@ (800308c <HAL_RCC_OscConfig+0x4c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d118      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800308c <HAL_RCC_OscConfig+0x4c8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7e      	ldr	r2, [pc, #504]	@ (800308c <HAL_RCC_OscConfig+0x4c8>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e9a:	f7fe fa97 	bl	80013cc <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7fe fa93 	bl	80013cc <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b64      	cmp	r3, #100	@ 0x64
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e103      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	4b75      	ldr	r3, [pc, #468]	@ (800308c <HAL_RCC_OscConfig+0x4c8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x312>
 8002ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6213      	str	r3, [r2, #32]
 8002ed4:	e02d      	b.n	8002f32 <HAL_RCC_OscConfig+0x36e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x334>
 8002ede:	4b6a      	ldr	r3, [pc, #424]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	4a69      	ldr	r2, [pc, #420]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6213      	str	r3, [r2, #32]
 8002eea:	4b67      	ldr	r3, [pc, #412]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	4a66      	ldr	r2, [pc, #408]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f023 0304 	bic.w	r3, r3, #4
 8002ef4:	6213      	str	r3, [r2, #32]
 8002ef6:	e01c      	b.n	8002f32 <HAL_RCC_OscConfig+0x36e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x356>
 8002f00:	4b61      	ldr	r3, [pc, #388]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a60      	ldr	r2, [pc, #384]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	f043 0304 	orr.w	r3, r3, #4
 8002f0a:	6213      	str	r3, [r2, #32]
 8002f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	4a5d      	ldr	r2, [pc, #372]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6213      	str	r3, [r2, #32]
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0x36e>
 8002f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a5a      	ldr	r2, [pc, #360]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6213      	str	r3, [r2, #32]
 8002f26:	4b58      	ldr	r3, [pc, #352]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a57      	ldr	r2, [pc, #348]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d015      	beq.n	8002f66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fa47 	bl	80013cc <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	e00a      	b.n	8002f58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fe fa43 	bl	80013cc <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0b1      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	4b4b      	ldr	r3, [pc, #300]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ee      	beq.n	8002f42 <HAL_RCC_OscConfig+0x37e>
 8002f64:	e014      	b.n	8002f90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f66:	f7fe fa31 	bl	80013cc <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe fa2d 	bl	80013cc <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e09b      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	4b40      	ldr	r3, [pc, #256]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ee      	bne.n	8002f6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f96:	4b3c      	ldr	r3, [pc, #240]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4a3b      	ldr	r2, [pc, #236]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8087 	beq.w	80030ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fac:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d061      	beq.n	800307c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d146      	bne.n	800304e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b33      	ldr	r3, [pc, #204]	@ (8003090 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fa01 	bl	80013cc <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe f9fd 	bl	80013cc <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e06d      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe0:	4b29      	ldr	r3, [pc, #164]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff4:	d108      	bne.n	8003008 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ff6:	4b24      	ldr	r3, [pc, #144]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	4921      	ldr	r1, [pc, #132]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003008:	4b1f      	ldr	r3, [pc, #124]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a19      	ldr	r1, [r3, #32]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	430b      	orrs	r3, r1
 800301a:	491b      	ldr	r1, [pc, #108]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x4cc>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fe f9d1 	bl	80013cc <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302e:	f7fe f9cd 	bl	80013cc <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e03d      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003040:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x46a>
 800304c:	e035      	b.n	80030ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <HAL_RCC_OscConfig+0x4cc>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe f9ba 	bl	80013cc <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe f9b6 	bl	80013cc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e026      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x498>
 800307a:	e01e      	b.n	80030ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e019      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
 8003088:	40021000 	.word	0x40021000
 800308c:	40007000 	.word	0x40007000
 8003090:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <HAL_RCC_OscConfig+0x500>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0d0      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b67      	ldr	r3, [pc, #412]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 0207 	bic.w	r2, r3, #7
 80030f2:	4965      	ldr	r1, [pc, #404]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b63      	ldr	r3, [pc, #396]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b59      	ldr	r3, [pc, #356]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4a58      	ldr	r2, [pc, #352]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800312a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800312e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b53      	ldr	r3, [pc, #332]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a52      	ldr	r2, [pc, #328]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003146:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b50      	ldr	r3, [pc, #320]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d040      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b47      	ldr	r3, [pc, #284]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d115      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b41      	ldr	r3, [pc, #260]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e073      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003196:	4b3d      	ldr	r3, [pc, #244]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06b      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b39      	ldr	r3, [pc, #228]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4936      	ldr	r1, [pc, #216]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b8:	f7fe f908 	bl	80013cc <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7fe f904 	bl	80013cc <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e053      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	4b2d      	ldr	r3, [pc, #180]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b27      	ldr	r3, [pc, #156]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d210      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4922      	ldr	r1, [pc, #136]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b20      	ldr	r3, [pc, #128]	@ (8003288 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b19      	ldr	r3, [pc, #100]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003242:	4b12      	ldr	r3, [pc, #72]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490a      	ldr	r1, [pc, #40]	@ (8003290 <HAL_RCC_ClockConfig+0x1c8>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	@ (8003294 <HAL_RCC_ClockConfig+0x1cc>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RCC_ClockConfig+0x1d0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe f866 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40022000 	.word	0x40022000
 800328c:	40021000 	.word	0x40021000
 8003290:	08005e50 	.word	0x08005e50
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004

0800329c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x94>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d002      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x30>
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d003      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x36>
 80032ca:	e027      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032cc:	4b19      	ldr	r3, [pc, #100]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ce:	613b      	str	r3, [r7, #16]
      break;
 80032d0:	e027      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	0c9b      	lsrs	r3, r3, #18
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	4a17      	ldr	r2, [pc, #92]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032dc:	5cd3      	ldrb	r3, [r2, r3]
 80032de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d010      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ea:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <HAL_RCC_GetSysClockFreq+0x94>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	0c5b      	lsrs	r3, r3, #17
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	4a11      	ldr	r2, [pc, #68]	@ (800333c <HAL_RCC_GetSysClockFreq+0xa0>)
 80032f6:	5cd3      	ldrb	r3, [r2, r3]
 80032f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x98>)
 80032fe:	fb03 f202 	mul.w	r2, r3, r2
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e004      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0c      	ldr	r2, [pc, #48]	@ (8003340 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	613b      	str	r3, [r7, #16]
      break;
 800331a:	e002      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x98>)
 800331e:	613b      	str	r3, [r7, #16]
      break;
 8003320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003322:	693b      	ldr	r3, [r7, #16]
}
 8003324:	4618      	mov	r0, r3
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	007a1200 	.word	0x007a1200
 8003338:	08005e68 	.word	0x08005e68
 800333c:	08005e78 	.word	0x08005e78
 8003340:	003d0900 	.word	0x003d0900

08003344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003348:	4b02      	ldr	r3, [pc, #8]	@ (8003354 <HAL_RCC_GetHCLKFreq+0x10>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	20000000 	.word	0x20000000

08003358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800335c:	f7ff fff2 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	@ (800337c <HAL_RCC_GetPCLK1Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	08005e60 	.word	0x08005e60

08003380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003384:	f7ff ffde 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	0adb      	lsrs	r3, r3, #11
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4903      	ldr	r1, [pc, #12]	@ (80033a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08005e60 	.word	0x08005e60

080033a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033b0:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <RCC_Delay+0x34>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <RCC_Delay+0x38>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0a5b      	lsrs	r3, r3, #9
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033c4:	bf00      	nop
  }
  while (Delay --);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	60fa      	str	r2, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f9      	bne.n	80033c4 <RCC_Delay+0x1c>
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	20000000 	.word	0x20000000
 80033e0:	10624dd3 	.word	0x10624dd3

080033e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e076      	b.n	80034e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d108      	bne.n	8003410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003406:	d009      	beq.n	800341c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
 800340e:	e005      	b.n	800341c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fe04 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003452:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a0:	ea42 0103 	orr.w	r1, r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	0c1a      	lsrs	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f002 0204 	and.w	r2, r2, #4
 80034c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_SPI_Transmit+0x22>
 800350a:	2302      	movs	r3, #2
 800350c:	e12d      	b.n	800376a <HAL_SPI_Transmit+0x27e>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003516:	f7fd ff59 	bl	80013cc <HAL_GetTick>
 800351a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d002      	beq.n	8003532 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800352c:	2302      	movs	r3, #2
 800352e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003530:	e116      	b.n	8003760 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_SPI_Transmit+0x52>
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003542:	e10d      	b.n	8003760 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2203      	movs	r2, #3
 8003548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800358a:	d10f      	bne.n	80035ac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800359a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	d007      	beq.n	80035ca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d2:	d14f      	bne.n	8003674 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_SPI_Transmit+0xf6>
 80035dc:	8afb      	ldrh	r3, [r7, #22]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d142      	bne.n	8003668 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	881a      	ldrh	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	1c9a      	adds	r2, r3, #2
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003606:	e02f      	b.n	8003668 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d112      	bne.n	800363c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	881a      	ldrh	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	1c9a      	adds	r2, r3, #2
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	86da      	strh	r2, [r3, #54]	@ 0x36
 800363a:	e015      	b.n	8003668 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363c:	f7fd fec6 	bl	80013cc <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d803      	bhi.n	8003654 <HAL_SPI_Transmit+0x168>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003652:	d102      	bne.n	800365a <HAL_SPI_Transmit+0x16e>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003666:	e07b      	b.n	8003760 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ca      	bne.n	8003608 <HAL_SPI_Transmit+0x11c>
 8003672:	e050      	b.n	8003716 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_SPI_Transmit+0x196>
 800367c:	8afb      	ldrh	r3, [r7, #22]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d144      	bne.n	800370c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036a8:	e030      	b.n	800370c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d113      	bne.n	80036e0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	7812      	ldrb	r2, [r2, #0]
 80036c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036de:	e015      	b.n	800370c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e0:	f7fd fe74 	bl	80013cc <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d803      	bhi.n	80036f8 <HAL_SPI_Transmit+0x20c>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f6:	d102      	bne.n	80036fe <HAL_SPI_Transmit+0x212>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800370a:	e029      	b.n	8003760 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1c9      	bne.n	80036aa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f8b2 	bl	8003884 <SPI_EndRxTxTransaction>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e003      	b.n	8003760 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003768:	7ffb      	ldrb	r3, [r7, #31]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4613      	mov	r3, r2
 8003782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003784:	f7fd fe22 	bl	80013cc <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	4413      	add	r3, r2
 8003792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003794:	f7fd fe1a 	bl	80013cc <HAL_GetTick>
 8003798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800379a:	4b39      	ldr	r3, [pc, #228]	@ (8003880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	015b      	lsls	r3, r3, #5
 80037a0:	0d1b      	lsrs	r3, r3, #20
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	fb02 f303 	mul.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037aa:	e054      	b.n	8003856 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d050      	beq.n	8003856 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037b4:	f7fd fe0a 	bl	80013cc <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d902      	bls.n	80037ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d13d      	bne.n	8003846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037e2:	d111      	bne.n	8003808 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ec:	d004      	beq.n	80037f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f6:	d107      	bne.n	8003808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003810:	d10f      	bne.n	8003832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e017      	b.n	8003876 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3b01      	subs	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4013      	ands	r3, r2
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	429a      	cmp	r2, r3
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	461a      	mov	r2, r3
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	429a      	cmp	r2, r3
 8003872:	d19b      	bne.n	80037ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000000 	.word	0x20000000

08003884 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2200      	movs	r2, #0
 8003898:	2180      	movs	r1, #128	@ 0x80
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f7ff ff6a 	bl	8003774 <SPI_WaitFlagStateUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e000      	b.n	80038b8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e041      	b.n	8003956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fbea 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f000 f9f6 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d001      	beq.n	8003978 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e032      	b.n	80039de <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a18      	ldr	r2, [pc, #96]	@ (80039e8 <HAL_TIM_Base_Start+0x88>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00e      	beq.n	80039a8 <HAL_TIM_Base_Start+0x48>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003992:	d009      	beq.n	80039a8 <HAL_TIM_Base_Start+0x48>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a14      	ldr	r2, [pc, #80]	@ (80039ec <HAL_TIM_Base_Start+0x8c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d004      	beq.n	80039a8 <HAL_TIM_Base_Start+0x48>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a13      	ldr	r2, [pc, #76]	@ (80039f0 <HAL_TIM_Base_Start+0x90>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d111      	bne.n	80039cc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d010      	beq.n	80039dc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ca:	e007      	b.n	80039dc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800

080039f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d001      	beq.n	8003a0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e03a      	b.n	8003a82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a18      	ldr	r2, [pc, #96]	@ (8003a8c <HAL_TIM_Base_Start_IT+0x98>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x58>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a36:	d009      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x58>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a14      	ldr	r2, [pc, #80]	@ (8003a90 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_TIM_Base_Start_IT+0x58>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a13      	ldr	r2, [pc, #76]	@ (8003a94 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d111      	bne.n	8003a70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b06      	cmp	r3, #6
 8003a5c:	d010      	beq.n	8003a80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6e:	e007      	b.n	8003a80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800

08003a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d122      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d11b      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0202 	mvn.w	r2, #2
 8003ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f8ed 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003ae0:	e005      	b.n	8003aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8e0 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f8ef 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d122      	bne.n	8003b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d11b      	bne.n	8003b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0204 	mvn.w	r2, #4
 8003b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8c3 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8b6 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f8c5 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d122      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d11b      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0208 	mvn.w	r2, #8
 8003b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2204      	movs	r2, #4
 8003b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f899 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f88c 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f89b 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d122      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d11b      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0210 	mvn.w	r2, #16
 8003bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f86f 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003bdc:	e005      	b.n	8003bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f862 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f871 	bl	8003ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d10e      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0201 	mvn.w	r2, #1
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fc fdb8 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b80      	cmp	r3, #128	@ 0x80
 8003c28:	d10e      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c34:	2b80      	cmp	r3, #128	@ 0x80
 8003c36:	d107      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8bf 	bl	8003dc6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c52:	2b40      	cmp	r3, #64	@ 0x40
 8003c54:	d10e      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c60:	2b40      	cmp	r3, #64	@ 0x40
 8003c62:	d107      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f835 	bl	8003cde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d10e      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0220 	mvn.w	r2, #32
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f88a 	bl	8003db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a29      	ldr	r2, [pc, #164]	@ (8003da8 <TIM_Base_SetConfig+0xb8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00b      	beq.n	8003d20 <TIM_Base_SetConfig+0x30>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0e:	d007      	beq.n	8003d20 <TIM_Base_SetConfig+0x30>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a26      	ldr	r2, [pc, #152]	@ (8003dac <TIM_Base_SetConfig+0xbc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_Base_SetConfig+0x30>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a25      	ldr	r2, [pc, #148]	@ (8003db0 <TIM_Base_SetConfig+0xc0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d108      	bne.n	8003d32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a1c      	ldr	r2, [pc, #112]	@ (8003da8 <TIM_Base_SetConfig+0xb8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <TIM_Base_SetConfig+0x62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d40:	d007      	beq.n	8003d52 <TIM_Base_SetConfig+0x62>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a19      	ldr	r2, [pc, #100]	@ (8003dac <TIM_Base_SetConfig+0xbc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_Base_SetConfig+0x62>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a18      	ldr	r2, [pc, #96]	@ (8003db0 <TIM_Base_SetConfig+0xc0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d108      	bne.n	8003d64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a07      	ldr	r2, [pc, #28]	@ (8003da8 <TIM_Base_SetConfig+0xb8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d103      	bne.n	8003d98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	615a      	str	r2, [r3, #20]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	40012c00 	.word	0x40012c00
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800

08003db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e042      	b.n	8003e70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd f996 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	@ 0x24
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fdc5 	bl	80049ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	@ 0x28
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d16d      	bne.n	8003f74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_UART_Transmit+0x2c>
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e066      	b.n	8003f76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2221      	movs	r2, #33	@ 0x21
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eb6:	f7fd fa89 	bl	80013cc <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	88fa      	ldrh	r2, [r7, #6]
 8003ec0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	88fa      	ldrh	r2, [r7, #6]
 8003ec6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed0:	d108      	bne.n	8003ee4 <HAL_UART_Transmit+0x6c>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	e003      	b.n	8003eec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eec:	e02a      	b.n	8003f44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	@ 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fb14 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e036      	b.n	8003f76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	3302      	adds	r3, #2
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e007      	b.n	8003f36 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1cf      	bne.n	8003eee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2140      	movs	r1, #64	@ 0x40
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fae4 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e006      	b.n	8003f76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d112      	bne.n	8003fbe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_UART_Receive_IT+0x26>
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e00b      	b.n	8003fc0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fb24 	bl	8004602 <UART_Start_Receive_IT>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	e000      	b.n	8003fc0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fbe:	2302      	movs	r3, #2
  }
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b0ba      	sub	sp, #232	@ 0xe8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10f      	bne.n	800402e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004012:	f003 0320 	and.w	r3, r3, #32
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_UART_IRQHandler+0x66>
 800401a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fc01 	bl	800482e <UART_Receive_IT>
      return;
 800402c:	e25b      	b.n	80044e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800402e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80de 	beq.w	80041f4 <HAL_UART_IRQHandler+0x22c>
 8004038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004048:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80d1 	beq.w	80041f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <HAL_UART_IRQHandler+0xae>
 800405e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	f043 0201 	orr.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_UART_IRQHandler+0xd2>
 8004082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	f043 0202 	orr.w	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_UART_IRQHandler+0xf6>
 80040a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d011      	beq.n	80040ee <HAL_UART_IRQHandler+0x126>
 80040ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	f043 0208 	orr.w	r2, r3, #8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 81f2 	beq.w	80044dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f003 0320 	and.w	r3, r3, #32
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_UART_IRQHandler+0x14e>
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fb8c 	bl	800482e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d103      	bne.n	8004142 <HAL_UART_IRQHandler+0x17a>
 800413a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d04f      	beq.n	80041e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa96 	bl	8004674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d041      	beq.n	80041da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3314      	adds	r3, #20
 800415c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800416c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3314      	adds	r3, #20
 800417e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004182:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004186:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800418e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800419a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1d9      	bne.n	8004156 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d013      	beq.n	80041d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ae:	4a7e      	ldr	r2, [pc, #504]	@ (80043a8 <HAL_UART_IRQHandler+0x3e0>)
 80041b0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fd fa7e 	bl	80016b8 <HAL_DMA_Abort_IT>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d016      	beq.n	80041f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041cc:	4610      	mov	r0, r2
 80041ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	e00e      	b.n	80041f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f993 	bl	80044fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	e00a      	b.n	80041f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f98f 	bl	80044fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	e006      	b.n	80041f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f98b 	bl	80044fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041ee:	e175      	b.n	80044dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	bf00      	nop
    return;
 80041f2:	e173      	b.n	80044dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	f040 814f 	bne.w	800449c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8148 	beq.w	800449c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8141 	beq.w	800449c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80b6 	beq.w	80043ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800424c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8145 	beq.w	80044e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800425a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800425e:	429a      	cmp	r2, r3
 8004260:	f080 813e 	bcs.w	80044e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800426a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b20      	cmp	r3, #32
 8004274:	f000 8088 	beq.w	8004388 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800428e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004292:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004296:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042a4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1d9      	bne.n	8004278 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042e8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e1      	bne.n	80042c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004324:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004326:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800432a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004332:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e3      	bne.n	8004300 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004358:	f023 0310 	bic.w	r3, r3, #16
 800435c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800436a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800436c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004370:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e3      	bne.n	8004346 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004382:	4618      	mov	r0, r3
 8004384:	f7fd f95d 	bl	8001642 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004396:	b29b      	uxth	r3, r3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	b29b      	uxth	r3, r3
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8b6 	bl	8004510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043a4:	e09c      	b.n	80044e0 <HAL_UART_IRQHandler+0x518>
 80043a6:	bf00      	nop
 80043a8:	08004739 	.word	0x08004739
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 808e 	beq.w	80044e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8089 	beq.w	80044e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	330c      	adds	r3, #12
 80043d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80043f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e3      	bne.n	80043d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	623b      	str	r3, [r7, #32]
   return(result);
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800442e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800443c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e3      	bne.n	800440a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0310 	bic.w	r3, r3, #16
 8004466:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004474:	61fa      	str	r2, [r7, #28]
 8004476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	69b9      	ldr	r1, [r7, #24]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	617b      	str	r3, [r7, #20]
   return(result);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e3      	bne.n	8004450 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800448e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004492:	4619      	mov	r1, r3
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f83b 	bl	8004510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800449a:	e023      	b.n	80044e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <HAL_UART_IRQHandler+0x4f4>
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f953 	bl	8004760 <UART_Transmit_IT>
    return;
 80044ba:	e014      	b.n	80044e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00e      	beq.n	80044e6 <HAL_UART_IRQHandler+0x51e>
 80044c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d008      	beq.n	80044e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f992 	bl	80047fe <UART_EndTransmit_IT>
    return;
 80044da:	e004      	b.n	80044e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80044dc:	bf00      	nop
 80044de:	e002      	b.n	80044e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044e0:	bf00      	nop
 80044e2:	e000      	b.n	80044e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80044e4:	bf00      	nop
  }
}
 80044e6:	37e8      	adds	r7, #232	@ 0xe8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr

080044fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b090      	sub	sp, #64	@ 0x40
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	e050      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d04c      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0x30>
 8004546:	f7fc ff41 	bl	80013cc <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004552:	429a      	cmp	r2, r3
 8004554:	d241      	bcs.n	80045da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800456c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004576:	637a      	str	r2, [r7, #52]	@ 0x34
 8004578:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800457c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e5      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	613b      	str	r3, [r7, #16]
   return(result);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3314      	adds	r3, #20
 80045a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045aa:	623a      	str	r2, [r7, #32]
 80045ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	69f9      	ldr	r1, [r7, #28]
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e00f      	b.n	80045fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d09f      	beq.n	8004538 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3740      	adds	r7, #64	@ 0x40
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	4613      	mov	r3, r2
 800460e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	88fa      	ldrh	r2, [r7, #6]
 800461a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2222      	movs	r2, #34	@ 0x22
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004646:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0220 	orr.w	r2, r2, #32
 8004666:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004674:	b480      	push	{r7}
 8004676:	b095      	sub	sp, #84	@ 0x54
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800468c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800469c:	643a      	str	r2, [r7, #64]	@ 0x40
 800469e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e5      	bne.n	800467c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3314      	adds	r3, #20
 80046b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3314      	adds	r3, #20
 80046ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e5      	bne.n	80046b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d119      	bne.n	8004720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	330c      	adds	r3, #12
 80046f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f023 0310 	bic.w	r3, r3, #16
 8004702:	647b      	str	r3, [r7, #68]	@ 0x44
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800470c:	61ba      	str	r2, [r7, #24]
 800470e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6979      	ldr	r1, [r7, #20]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	613b      	str	r3, [r7, #16]
   return(result);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e5      	bne.n	80046ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800472e:	bf00      	nop
 8004730:	3754      	adds	r7, #84	@ 0x54
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr

08004738 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7ff fed3 	bl	80044fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004758:	bf00      	nop
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b21      	cmp	r3, #33	@ 0x21
 8004772:	d13e      	bne.n	80047f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477c:	d114      	bne.n	80047a8 <UART_Transmit_IT+0x48>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d110      	bne.n	80047a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800479a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	1c9a      	adds	r2, r3, #2
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	621a      	str	r2, [r3, #32]
 80047a6:	e008      	b.n	80047ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	1c59      	adds	r1, r3, #1
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6211      	str	r1, [r2, #32]
 80047b2:	781a      	ldrb	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	4619      	mov	r1, r3
 80047c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e000      	b.n	80047f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fe64 	bl	80044ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b08c      	sub	sp, #48	@ 0x30
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b22      	cmp	r3, #34	@ 0x22
 8004840:	f040 80ae 	bne.w	80049a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800484c:	d117      	bne.n	800487e <UART_Receive_IT+0x50>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d113      	bne.n	800487e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486c:	b29a      	uxth	r2, r3
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004876:	1c9a      	adds	r2, r3, #2
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	629a      	str	r2, [r3, #40]	@ 0x28
 800487c:	e026      	b.n	80048cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004890:	d007      	beq.n	80048a2 <UART_Receive_IT+0x74>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <UART_Receive_IT+0x82>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e008      	b.n	80048c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4619      	mov	r1, r3
 80048da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d15d      	bne.n	800499c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0220 	bic.w	r2, r2, #32
 80048ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	2b01      	cmp	r3, #1
 8004924:	d135      	bne.n	8004992 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	613b      	str	r3, [r7, #16]
   return(result);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f023 0310 	bic.w	r3, r3, #16
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800494c:	623a      	str	r2, [r7, #32]
 800494e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69f9      	ldr	r1, [r7, #28]
 8004952:	6a3a      	ldr	r2, [r7, #32]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	61bb      	str	r3, [r7, #24]
   return(result);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b10      	cmp	r3, #16
 800496c:	d10a      	bne.n	8004984 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fdc0 	bl	8004510 <HAL_UARTEx_RxEventCallback>
 8004990:	e002      	b.n	8004998 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fb ffaa 	bl	80008ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e002      	b.n	80049a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3730      	adds	r7, #48	@ 0x30
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80049e6:	f023 030c 	bic.w	r3, r3, #12
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6812      	ldr	r2, [r2, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	430b      	orrs	r3, r1
 80049f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ac0 <UART_SetConfig+0x114>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d103      	bne.n	8004a1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a14:	f7fe fcb4 	bl	8003380 <HAL_RCC_GetPCLK2Freq>
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	e002      	b.n	8004a22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a1c:	f7fe fc9c 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8004a20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009a      	lsls	r2, r3, #2
 8004a2c:	441a      	add	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	4a22      	ldr	r2, [pc, #136]	@ (8004ac4 <UART_SetConfig+0x118>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	0119      	lsls	r1, r3, #4
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009a      	lsls	r2, r3, #2
 8004a4c:	441a      	add	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a58:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac4 <UART_SetConfig+0x118>)
 8004a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2064      	movs	r0, #100	@ 0x64
 8004a62:	fb00 f303 	mul.w	r3, r0, r3
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	3332      	adds	r3, #50	@ 0x32
 8004a6c:	4a15      	ldr	r2, [pc, #84]	@ (8004ac4 <UART_SetConfig+0x118>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a78:	4419      	add	r1, r3
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009a      	lsls	r2, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a90:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <UART_SetConfig+0x118>)
 8004a92:	fba3 0302 	umull	r0, r3, r3, r2
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2064      	movs	r0, #100	@ 0x64
 8004a9a:	fb00 f303 	mul.w	r3, r0, r3
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	3332      	adds	r3, #50	@ 0x32
 8004aa4:	4a07      	ldr	r2, [pc, #28]	@ (8004ac4 <UART_SetConfig+0x118>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	f003 020f 	and.w	r2, r3, #15
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40013800 	.word	0x40013800
 8004ac4:	51eb851f 	.word	0x51eb851f

08004ac8 <siprintf>:
 8004ac8:	b40e      	push	{r1, r2, r3}
 8004aca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ace:	b500      	push	{lr}
 8004ad0:	b09c      	sub	sp, #112	@ 0x70
 8004ad2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004ad4:	9002      	str	r0, [sp, #8]
 8004ad6:	9006      	str	r0, [sp, #24]
 8004ad8:	9107      	str	r1, [sp, #28]
 8004ada:	9104      	str	r1, [sp, #16]
 8004adc:	4808      	ldr	r0, [pc, #32]	@ (8004b00 <siprintf+0x38>)
 8004ade:	4909      	ldr	r1, [pc, #36]	@ (8004b04 <siprintf+0x3c>)
 8004ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ae4:	9105      	str	r1, [sp, #20]
 8004ae6:	6800      	ldr	r0, [r0, #0]
 8004ae8:	a902      	add	r1, sp, #8
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	f000 f9be 	bl	8004e6c <_svfiprintf_r>
 8004af0:	2200      	movs	r2, #0
 8004af2:	9b02      	ldr	r3, [sp, #8]
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	b01c      	add	sp, #112	@ 0x70
 8004af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004afc:	b003      	add	sp, #12
 8004afe:	4770      	bx	lr
 8004b00:	2000000c 	.word	0x2000000c
 8004b04:	ffff0208 	.word	0xffff0208

08004b08 <siscanf>:
 8004b08:	b40e      	push	{r1, r2, r3}
 8004b0a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004b0e:	b530      	push	{r4, r5, lr}
 8004b10:	b09c      	sub	sp, #112	@ 0x70
 8004b12:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004b14:	f854 5b04 	ldr.w	r5, [r4], #4
 8004b18:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004b1c:	9002      	str	r0, [sp, #8]
 8004b1e:	9006      	str	r0, [sp, #24]
 8004b20:	f7fb fb14 	bl	800014c <strlen>
 8004b24:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <siscanf+0x4c>)
 8004b26:	9003      	str	r0, [sp, #12]
 8004b28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b2e:	9314      	str	r3, [sp, #80]	@ 0x50
 8004b30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004b34:	9007      	str	r0, [sp, #28]
 8004b36:	4808      	ldr	r0, [pc, #32]	@ (8004b58 <siscanf+0x50>)
 8004b38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b3c:	462a      	mov	r2, r5
 8004b3e:	4623      	mov	r3, r4
 8004b40:	a902      	add	r1, sp, #8
 8004b42:	6800      	ldr	r0, [r0, #0]
 8004b44:	9401      	str	r4, [sp, #4]
 8004b46:	f000 fae5 	bl	8005114 <__ssvfiscanf_r>
 8004b4a:	b01c      	add	sp, #112	@ 0x70
 8004b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b50:	b003      	add	sp, #12
 8004b52:	4770      	bx	lr
 8004b54:	08004b5d 	.word	0x08004b5d
 8004b58:	2000000c 	.word	0x2000000c

08004b5c <__seofread>:
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	4770      	bx	lr

08004b60 <memset>:
 8004b60:	4603      	mov	r3, r0
 8004b62:	4402      	add	r2, r0
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d100      	bne.n	8004b6a <memset+0xa>
 8004b68:	4770      	bx	lr
 8004b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6e:	e7f9      	b.n	8004b64 <memset+0x4>

08004b70 <__errno>:
 8004b70:	4b01      	ldr	r3, [pc, #4]	@ (8004b78 <__errno+0x8>)
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	2000000c 	.word	0x2000000c

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	2600      	movs	r6, #0
 8004b80:	4d0c      	ldr	r5, [pc, #48]	@ (8004bb4 <__libc_init_array+0x38>)
 8004b82:	4c0d      	ldr	r4, [pc, #52]	@ (8004bb8 <__libc_init_array+0x3c>)
 8004b84:	1b64      	subs	r4, r4, r5
 8004b86:	10a4      	asrs	r4, r4, #2
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	f001 f8ec 	bl	8005d68 <_init>
 8004b90:	2600      	movs	r6, #0
 8004b92:	4d0a      	ldr	r5, [pc, #40]	@ (8004bbc <__libc_init_array+0x40>)
 8004b94:	4c0a      	ldr	r4, [pc, #40]	@ (8004bc0 <__libc_init_array+0x44>)
 8004b96:	1b64      	subs	r4, r4, r5
 8004b98:	10a4      	asrs	r4, r4, #2
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	08005fd4 	.word	0x08005fd4
 8004bb8:	08005fd4 	.word	0x08005fd4
 8004bbc:	08005fd4 	.word	0x08005fd4
 8004bc0:	08005fd8 	.word	0x08005fd8

08004bc4 <__retarget_lock_acquire_recursive>:
 8004bc4:	4770      	bx	lr

08004bc6 <__retarget_lock_release_recursive>:
 8004bc6:	4770      	bx	lr

08004bc8 <_free_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4605      	mov	r5, r0
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	d040      	beq.n	8004c52 <_free_r+0x8a>
 8004bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd4:	1f0c      	subs	r4, r1, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bfb8      	it	lt
 8004bda:	18e4      	addlt	r4, r4, r3
 8004bdc:	f000 f8de 	bl	8004d9c <__malloc_lock>
 8004be0:	4a1c      	ldr	r2, [pc, #112]	@ (8004c54 <_free_r+0x8c>)
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	b933      	cbnz	r3, 8004bf4 <_free_r+0x2c>
 8004be6:	6063      	str	r3, [r4, #4]
 8004be8:	6014      	str	r4, [r2, #0]
 8004bea:	4628      	mov	r0, r5
 8004bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf0:	f000 b8da 	b.w	8004da8 <__malloc_unlock>
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	d908      	bls.n	8004c0a <_free_r+0x42>
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	1821      	adds	r1, r4, r0
 8004bfc:	428b      	cmp	r3, r1
 8004bfe:	bf01      	itttt	eq
 8004c00:	6819      	ldreq	r1, [r3, #0]
 8004c02:	685b      	ldreq	r3, [r3, #4]
 8004c04:	1809      	addeq	r1, r1, r0
 8004c06:	6021      	streq	r1, [r4, #0]
 8004c08:	e7ed      	b.n	8004be6 <_free_r+0x1e>
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	b10b      	cbz	r3, 8004c14 <_free_r+0x4c>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d9fa      	bls.n	8004c0a <_free_r+0x42>
 8004c14:	6811      	ldr	r1, [r2, #0]
 8004c16:	1850      	adds	r0, r2, r1
 8004c18:	42a0      	cmp	r0, r4
 8004c1a:	d10b      	bne.n	8004c34 <_free_r+0x6c>
 8004c1c:	6820      	ldr	r0, [r4, #0]
 8004c1e:	4401      	add	r1, r0
 8004c20:	1850      	adds	r0, r2, r1
 8004c22:	4283      	cmp	r3, r0
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	d1e0      	bne.n	8004bea <_free_r+0x22>
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4408      	add	r0, r1
 8004c2e:	6010      	str	r0, [r2, #0]
 8004c30:	6053      	str	r3, [r2, #4]
 8004c32:	e7da      	b.n	8004bea <_free_r+0x22>
 8004c34:	d902      	bls.n	8004c3c <_free_r+0x74>
 8004c36:	230c      	movs	r3, #12
 8004c38:	602b      	str	r3, [r5, #0]
 8004c3a:	e7d6      	b.n	8004bea <_free_r+0x22>
 8004c3c:	6820      	ldr	r0, [r4, #0]
 8004c3e:	1821      	adds	r1, r4, r0
 8004c40:	428b      	cmp	r3, r1
 8004c42:	bf01      	itttt	eq
 8004c44:	6819      	ldreq	r1, [r3, #0]
 8004c46:	685b      	ldreq	r3, [r3, #4]
 8004c48:	1809      	addeq	r1, r1, r0
 8004c4a:	6021      	streq	r1, [r4, #0]
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	6054      	str	r4, [r2, #4]
 8004c50:	e7cb      	b.n	8004bea <_free_r+0x22>
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	2000038c 	.word	0x2000038c

08004c58 <sbrk_aligned>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8004c98 <sbrk_aligned+0x40>)
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	6831      	ldr	r1, [r6, #0]
 8004c60:	4605      	mov	r5, r0
 8004c62:	b911      	cbnz	r1, 8004c6a <sbrk_aligned+0x12>
 8004c64:	f000 ff32 	bl	8005acc <_sbrk_r>
 8004c68:	6030      	str	r0, [r6, #0]
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	f000 ff2d 	bl	8005acc <_sbrk_r>
 8004c72:	1c43      	adds	r3, r0, #1
 8004c74:	d103      	bne.n	8004c7e <sbrk_aligned+0x26>
 8004c76:	f04f 34ff 	mov.w	r4, #4294967295
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	bd70      	pop	{r4, r5, r6, pc}
 8004c7e:	1cc4      	adds	r4, r0, #3
 8004c80:	f024 0403 	bic.w	r4, r4, #3
 8004c84:	42a0      	cmp	r0, r4
 8004c86:	d0f8      	beq.n	8004c7a <sbrk_aligned+0x22>
 8004c88:	1a21      	subs	r1, r4, r0
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f000 ff1e 	bl	8005acc <_sbrk_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	d1f2      	bne.n	8004c7a <sbrk_aligned+0x22>
 8004c94:	e7ef      	b.n	8004c76 <sbrk_aligned+0x1e>
 8004c96:	bf00      	nop
 8004c98:	20000388 	.word	0x20000388

08004c9c <_malloc_r>:
 8004c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca0:	1ccd      	adds	r5, r1, #3
 8004ca2:	f025 0503 	bic.w	r5, r5, #3
 8004ca6:	3508      	adds	r5, #8
 8004ca8:	2d0c      	cmp	r5, #12
 8004caa:	bf38      	it	cc
 8004cac:	250c      	movcc	r5, #12
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	db01      	blt.n	8004cb8 <_malloc_r+0x1c>
 8004cb4:	42a9      	cmp	r1, r5
 8004cb6:	d904      	bls.n	8004cc2 <_malloc_r+0x26>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	6033      	str	r3, [r6, #0]
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d98 <_malloc_r+0xfc>
 8004cc6:	f000 f869 	bl	8004d9c <__malloc_lock>
 8004cca:	f8d8 3000 	ldr.w	r3, [r8]
 8004cce:	461c      	mov	r4, r3
 8004cd0:	bb44      	cbnz	r4, 8004d24 <_malloc_r+0x88>
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f7ff ffbf 	bl	8004c58 <sbrk_aligned>
 8004cda:	1c43      	adds	r3, r0, #1
 8004cdc:	4604      	mov	r4, r0
 8004cde:	d158      	bne.n	8004d92 <_malloc_r+0xf6>
 8004ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ce4:	4627      	mov	r7, r4
 8004ce6:	2f00      	cmp	r7, #0
 8004ce8:	d143      	bne.n	8004d72 <_malloc_r+0xd6>
 8004cea:	2c00      	cmp	r4, #0
 8004cec:	d04b      	beq.n	8004d86 <_malloc_r+0xea>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	4639      	mov	r1, r7
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	eb04 0903 	add.w	r9, r4, r3
 8004cf8:	f000 fee8 	bl	8005acc <_sbrk_r>
 8004cfc:	4581      	cmp	r9, r0
 8004cfe:	d142      	bne.n	8004d86 <_malloc_r+0xea>
 8004d00:	6821      	ldr	r1, [r4, #0]
 8004d02:	4630      	mov	r0, r6
 8004d04:	1a6d      	subs	r5, r5, r1
 8004d06:	4629      	mov	r1, r5
 8004d08:	f7ff ffa6 	bl	8004c58 <sbrk_aligned>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d03a      	beq.n	8004d86 <_malloc_r+0xea>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	442b      	add	r3, r5
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	f8d8 3000 	ldr.w	r3, [r8]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	bb62      	cbnz	r2, 8004d78 <_malloc_r+0xdc>
 8004d1e:	f8c8 7000 	str.w	r7, [r8]
 8004d22:	e00f      	b.n	8004d44 <_malloc_r+0xa8>
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	1b52      	subs	r2, r2, r5
 8004d28:	d420      	bmi.n	8004d6c <_malloc_r+0xd0>
 8004d2a:	2a0b      	cmp	r2, #11
 8004d2c:	d917      	bls.n	8004d5e <_malloc_r+0xc2>
 8004d2e:	1961      	adds	r1, r4, r5
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	6025      	str	r5, [r4, #0]
 8004d34:	bf18      	it	ne
 8004d36:	6059      	strne	r1, [r3, #4]
 8004d38:	6863      	ldr	r3, [r4, #4]
 8004d3a:	bf08      	it	eq
 8004d3c:	f8c8 1000 	streq.w	r1, [r8]
 8004d40:	5162      	str	r2, [r4, r5]
 8004d42:	604b      	str	r3, [r1, #4]
 8004d44:	4630      	mov	r0, r6
 8004d46:	f000 f82f 	bl	8004da8 <__malloc_unlock>
 8004d4a:	f104 000b 	add.w	r0, r4, #11
 8004d4e:	1d23      	adds	r3, r4, #4
 8004d50:	f020 0007 	bic.w	r0, r0, #7
 8004d54:	1ac2      	subs	r2, r0, r3
 8004d56:	bf1c      	itt	ne
 8004d58:	1a1b      	subne	r3, r3, r0
 8004d5a:	50a3      	strne	r3, [r4, r2]
 8004d5c:	e7af      	b.n	8004cbe <_malloc_r+0x22>
 8004d5e:	6862      	ldr	r2, [r4, #4]
 8004d60:	42a3      	cmp	r3, r4
 8004d62:	bf0c      	ite	eq
 8004d64:	f8c8 2000 	streq.w	r2, [r8]
 8004d68:	605a      	strne	r2, [r3, #4]
 8004d6a:	e7eb      	b.n	8004d44 <_malloc_r+0xa8>
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	6864      	ldr	r4, [r4, #4]
 8004d70:	e7ae      	b.n	8004cd0 <_malloc_r+0x34>
 8004d72:	463c      	mov	r4, r7
 8004d74:	687f      	ldr	r7, [r7, #4]
 8004d76:	e7b6      	b.n	8004ce6 <_malloc_r+0x4a>
 8004d78:	461a      	mov	r2, r3
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	d1fb      	bne.n	8004d78 <_malloc_r+0xdc>
 8004d80:	2300      	movs	r3, #0
 8004d82:	6053      	str	r3, [r2, #4]
 8004d84:	e7de      	b.n	8004d44 <_malloc_r+0xa8>
 8004d86:	230c      	movs	r3, #12
 8004d88:	4630      	mov	r0, r6
 8004d8a:	6033      	str	r3, [r6, #0]
 8004d8c:	f000 f80c 	bl	8004da8 <__malloc_unlock>
 8004d90:	e794      	b.n	8004cbc <_malloc_r+0x20>
 8004d92:	6005      	str	r5, [r0, #0]
 8004d94:	e7d6      	b.n	8004d44 <_malloc_r+0xa8>
 8004d96:	bf00      	nop
 8004d98:	2000038c 	.word	0x2000038c

08004d9c <__malloc_lock>:
 8004d9c:	4801      	ldr	r0, [pc, #4]	@ (8004da4 <__malloc_lock+0x8>)
 8004d9e:	f7ff bf11 	b.w	8004bc4 <__retarget_lock_acquire_recursive>
 8004da2:	bf00      	nop
 8004da4:	20000384 	.word	0x20000384

08004da8 <__malloc_unlock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	@ (8004db0 <__malloc_unlock+0x8>)
 8004daa:	f7ff bf0c 	b.w	8004bc6 <__retarget_lock_release_recursive>
 8004dae:	bf00      	nop
 8004db0:	20000384 	.word	0x20000384

08004db4 <__ssputs_r>:
 8004db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db8:	461f      	mov	r7, r3
 8004dba:	688e      	ldr	r6, [r1, #8]
 8004dbc:	4682      	mov	sl, r0
 8004dbe:	42be      	cmp	r6, r7
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	4690      	mov	r8, r2
 8004dc4:	680b      	ldr	r3, [r1, #0]
 8004dc6:	d82d      	bhi.n	8004e24 <__ssputs_r+0x70>
 8004dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004dd0:	d026      	beq.n	8004e20 <__ssputs_r+0x6c>
 8004dd2:	6965      	ldr	r5, [r4, #20]
 8004dd4:	6909      	ldr	r1, [r1, #16]
 8004dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dda:	eba3 0901 	sub.w	r9, r3, r1
 8004dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004de2:	1c7b      	adds	r3, r7, #1
 8004de4:	444b      	add	r3, r9
 8004de6:	106d      	asrs	r5, r5, #1
 8004de8:	429d      	cmp	r5, r3
 8004dea:	bf38      	it	cc
 8004dec:	461d      	movcc	r5, r3
 8004dee:	0553      	lsls	r3, r2, #21
 8004df0:	d527      	bpl.n	8004e42 <__ssputs_r+0x8e>
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7ff ff52 	bl	8004c9c <_malloc_r>
 8004df8:	4606      	mov	r6, r0
 8004dfa:	b360      	cbz	r0, 8004e56 <__ssputs_r+0xa2>
 8004dfc:	464a      	mov	r2, r9
 8004dfe:	6921      	ldr	r1, [r4, #16]
 8004e00:	f000 fe82 	bl	8005b08 <memcpy>
 8004e04:	89a3      	ldrh	r3, [r4, #12]
 8004e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e0e:	81a3      	strh	r3, [r4, #12]
 8004e10:	6126      	str	r6, [r4, #16]
 8004e12:	444e      	add	r6, r9
 8004e14:	6026      	str	r6, [r4, #0]
 8004e16:	463e      	mov	r6, r7
 8004e18:	6165      	str	r5, [r4, #20]
 8004e1a:	eba5 0509 	sub.w	r5, r5, r9
 8004e1e:	60a5      	str	r5, [r4, #8]
 8004e20:	42be      	cmp	r6, r7
 8004e22:	d900      	bls.n	8004e26 <__ssputs_r+0x72>
 8004e24:	463e      	mov	r6, r7
 8004e26:	4632      	mov	r2, r6
 8004e28:	4641      	mov	r1, r8
 8004e2a:	6820      	ldr	r0, [r4, #0]
 8004e2c:	f000 fe33 	bl	8005a96 <memmove>
 8004e30:	2000      	movs	r0, #0
 8004e32:	68a3      	ldr	r3, [r4, #8]
 8004e34:	1b9b      	subs	r3, r3, r6
 8004e36:	60a3      	str	r3, [r4, #8]
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	4433      	add	r3, r6
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e42:	462a      	mov	r2, r5
 8004e44:	f000 fe6e 	bl	8005b24 <_realloc_r>
 8004e48:	4606      	mov	r6, r0
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d1e0      	bne.n	8004e10 <__ssputs_r+0x5c>
 8004e4e:	4650      	mov	r0, sl
 8004e50:	6921      	ldr	r1, [r4, #16]
 8004e52:	f7ff feb9 	bl	8004bc8 <_free_r>
 8004e56:	230c      	movs	r3, #12
 8004e58:	f8ca 3000 	str.w	r3, [sl]
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e66:	81a3      	strh	r3, [r4, #12]
 8004e68:	e7e9      	b.n	8004e3e <__ssputs_r+0x8a>
	...

08004e6c <_svfiprintf_r>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	4698      	mov	r8, r3
 8004e72:	898b      	ldrh	r3, [r1, #12]
 8004e74:	4607      	mov	r7, r0
 8004e76:	061b      	lsls	r3, r3, #24
 8004e78:	460d      	mov	r5, r1
 8004e7a:	4614      	mov	r4, r2
 8004e7c:	b09d      	sub	sp, #116	@ 0x74
 8004e7e:	d510      	bpl.n	8004ea2 <_svfiprintf_r+0x36>
 8004e80:	690b      	ldr	r3, [r1, #16]
 8004e82:	b973      	cbnz	r3, 8004ea2 <_svfiprintf_r+0x36>
 8004e84:	2140      	movs	r1, #64	@ 0x40
 8004e86:	f7ff ff09 	bl	8004c9c <_malloc_r>
 8004e8a:	6028      	str	r0, [r5, #0]
 8004e8c:	6128      	str	r0, [r5, #16]
 8004e8e:	b930      	cbnz	r0, 8004e9e <_svfiprintf_r+0x32>
 8004e90:	230c      	movs	r3, #12
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	b01d      	add	sp, #116	@ 0x74
 8004e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9e:	2340      	movs	r3, #64	@ 0x40
 8004ea0:	616b      	str	r3, [r5, #20]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004eac:	2330      	movs	r3, #48	@ 0x30
 8004eae:	f04f 0901 	mov.w	r9, #1
 8004eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eb6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005050 <_svfiprintf_r+0x1e4>
 8004eba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	469a      	mov	sl, r3
 8004ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ec6:	b10a      	cbz	r2, 8004ecc <_svfiprintf_r+0x60>
 8004ec8:	2a25      	cmp	r2, #37	@ 0x25
 8004eca:	d1f9      	bne.n	8004ec0 <_svfiprintf_r+0x54>
 8004ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ed0:	d00b      	beq.n	8004eea <_svfiprintf_r+0x7e>
 8004ed2:	465b      	mov	r3, fp
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	4638      	mov	r0, r7
 8004eda:	f7ff ff6b 	bl	8004db4 <__ssputs_r>
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f000 80a7 	beq.w	8005032 <_svfiprintf_r+0x1c6>
 8004ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ee6:	445a      	add	r2, fp
 8004ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eea:	f89a 3000 	ldrb.w	r3, [sl]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 809f 	beq.w	8005032 <_svfiprintf_r+0x1c6>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004efe:	f10a 0a01 	add.w	sl, sl, #1
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	9307      	str	r3, [sp, #28]
 8004f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f0c:	4654      	mov	r4, sl
 8004f0e:	2205      	movs	r2, #5
 8004f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f14:	484e      	ldr	r0, [pc, #312]	@ (8005050 <_svfiprintf_r+0x1e4>)
 8004f16:	f000 fde9 	bl	8005aec <memchr>
 8004f1a:	9a04      	ldr	r2, [sp, #16]
 8004f1c:	b9d8      	cbnz	r0, 8004f56 <_svfiprintf_r+0xea>
 8004f1e:	06d0      	lsls	r0, r2, #27
 8004f20:	bf44      	itt	mi
 8004f22:	2320      	movmi	r3, #32
 8004f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f28:	0711      	lsls	r1, r2, #28
 8004f2a:	bf44      	itt	mi
 8004f2c:	232b      	movmi	r3, #43	@ 0x2b
 8004f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f32:	f89a 3000 	ldrb.w	r3, [sl]
 8004f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f38:	d015      	beq.n	8004f66 <_svfiprintf_r+0xfa>
 8004f3a:	4654      	mov	r4, sl
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f04f 0c0a 	mov.w	ip, #10
 8004f42:	9a07      	ldr	r2, [sp, #28]
 8004f44:	4621      	mov	r1, r4
 8004f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f4a:	3b30      	subs	r3, #48	@ 0x30
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	d94b      	bls.n	8004fe8 <_svfiprintf_r+0x17c>
 8004f50:	b1b0      	cbz	r0, 8004f80 <_svfiprintf_r+0x114>
 8004f52:	9207      	str	r2, [sp, #28]
 8004f54:	e014      	b.n	8004f80 <_svfiprintf_r+0x114>
 8004f56:	eba0 0308 	sub.w	r3, r0, r8
 8004f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	46a2      	mov	sl, r4
 8004f62:	9304      	str	r3, [sp, #16]
 8004f64:	e7d2      	b.n	8004f0c <_svfiprintf_r+0xa0>
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	1d19      	adds	r1, r3, #4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	9103      	str	r1, [sp, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfbb      	ittet	lt
 8004f72:	425b      	neglt	r3, r3
 8004f74:	f042 0202 	orrlt.w	r2, r2, #2
 8004f78:	9307      	strge	r3, [sp, #28]
 8004f7a:	9307      	strlt	r3, [sp, #28]
 8004f7c:	bfb8      	it	lt
 8004f7e:	9204      	strlt	r2, [sp, #16]
 8004f80:	7823      	ldrb	r3, [r4, #0]
 8004f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f84:	d10a      	bne.n	8004f9c <_svfiprintf_r+0x130>
 8004f86:	7863      	ldrb	r3, [r4, #1]
 8004f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f8a:	d132      	bne.n	8004ff2 <_svfiprintf_r+0x186>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	3402      	adds	r4, #2
 8004f90:	1d1a      	adds	r2, r3, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	9203      	str	r2, [sp, #12]
 8004f96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f9a:	9305      	str	r3, [sp, #20]
 8004f9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005054 <_svfiprintf_r+0x1e8>
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	4650      	mov	r0, sl
 8004fa4:	7821      	ldrb	r1, [r4, #0]
 8004fa6:	f000 fda1 	bl	8005aec <memchr>
 8004faa:	b138      	cbz	r0, 8004fbc <_svfiprintf_r+0x150>
 8004fac:	2240      	movs	r2, #64	@ 0x40
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	eba0 000a 	sub.w	r0, r0, sl
 8004fb4:	4082      	lsls	r2, r0
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	3401      	adds	r4, #1
 8004fba:	9304      	str	r3, [sp, #16]
 8004fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc0:	2206      	movs	r2, #6
 8004fc2:	4825      	ldr	r0, [pc, #148]	@ (8005058 <_svfiprintf_r+0x1ec>)
 8004fc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fc8:	f000 fd90 	bl	8005aec <memchr>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d036      	beq.n	800503e <_svfiprintf_r+0x1d2>
 8004fd0:	4b22      	ldr	r3, [pc, #136]	@ (800505c <_svfiprintf_r+0x1f0>)
 8004fd2:	bb1b      	cbnz	r3, 800501c <_svfiprintf_r+0x1b0>
 8004fd4:	9b03      	ldr	r3, [sp, #12]
 8004fd6:	3307      	adds	r3, #7
 8004fd8:	f023 0307 	bic.w	r3, r3, #7
 8004fdc:	3308      	adds	r3, #8
 8004fde:	9303      	str	r3, [sp, #12]
 8004fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe2:	4433      	add	r3, r6
 8004fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe6:	e76a      	b.n	8004ebe <_svfiprintf_r+0x52>
 8004fe8:	460c      	mov	r4, r1
 8004fea:	2001      	movs	r0, #1
 8004fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ff0:	e7a8      	b.n	8004f44 <_svfiprintf_r+0xd8>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f04f 0c0a 	mov.w	ip, #10
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	3401      	adds	r4, #1
 8004ffc:	9305      	str	r3, [sp, #20]
 8004ffe:	4620      	mov	r0, r4
 8005000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005004:	3a30      	subs	r2, #48	@ 0x30
 8005006:	2a09      	cmp	r2, #9
 8005008:	d903      	bls.n	8005012 <_svfiprintf_r+0x1a6>
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0c6      	beq.n	8004f9c <_svfiprintf_r+0x130>
 800500e:	9105      	str	r1, [sp, #20]
 8005010:	e7c4      	b.n	8004f9c <_svfiprintf_r+0x130>
 8005012:	4604      	mov	r4, r0
 8005014:	2301      	movs	r3, #1
 8005016:	fb0c 2101 	mla	r1, ip, r1, r2
 800501a:	e7f0      	b.n	8004ffe <_svfiprintf_r+0x192>
 800501c:	ab03      	add	r3, sp, #12
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	462a      	mov	r2, r5
 8005022:	4638      	mov	r0, r7
 8005024:	4b0e      	ldr	r3, [pc, #56]	@ (8005060 <_svfiprintf_r+0x1f4>)
 8005026:	a904      	add	r1, sp, #16
 8005028:	f3af 8000 	nop.w
 800502c:	1c42      	adds	r2, r0, #1
 800502e:	4606      	mov	r6, r0
 8005030:	d1d6      	bne.n	8004fe0 <_svfiprintf_r+0x174>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	065b      	lsls	r3, r3, #25
 8005036:	f53f af2d 	bmi.w	8004e94 <_svfiprintf_r+0x28>
 800503a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800503c:	e72c      	b.n	8004e98 <_svfiprintf_r+0x2c>
 800503e:	ab03      	add	r3, sp, #12
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	462a      	mov	r2, r5
 8005044:	4638      	mov	r0, r7
 8005046:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <_svfiprintf_r+0x1f4>)
 8005048:	a904      	add	r1, sp, #16
 800504a:	f000 fa47 	bl	80054dc <_printf_i>
 800504e:	e7ed      	b.n	800502c <_svfiprintf_r+0x1c0>
 8005050:	08005e7a 	.word	0x08005e7a
 8005054:	08005e80 	.word	0x08005e80
 8005058:	08005e84 	.word	0x08005e84
 800505c:	00000000 	.word	0x00000000
 8005060:	08004db5 	.word	0x08004db5

08005064 <_sungetc_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	1c4b      	adds	r3, r1, #1
 8005068:	4614      	mov	r4, r2
 800506a:	d103      	bne.n	8005074 <_sungetc_r+0x10>
 800506c:	f04f 35ff 	mov.w	r5, #4294967295
 8005070:	4628      	mov	r0, r5
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	8993      	ldrh	r3, [r2, #12]
 8005076:	b2cd      	uxtb	r5, r1
 8005078:	f023 0320 	bic.w	r3, r3, #32
 800507c:	8193      	strh	r3, [r2, #12]
 800507e:	6853      	ldr	r3, [r2, #4]
 8005080:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005082:	b18a      	cbz	r2, 80050a8 <_sungetc_r+0x44>
 8005084:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005086:	429a      	cmp	r2, r3
 8005088:	dd08      	ble.n	800509c <_sungetc_r+0x38>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	1e5a      	subs	r2, r3, #1
 800508e:	6022      	str	r2, [r4, #0]
 8005090:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	6063      	str	r3, [r4, #4]
 800509a:	e7e9      	b.n	8005070 <_sungetc_r+0xc>
 800509c:	4621      	mov	r1, r4
 800509e:	f000 fcc2 	bl	8005a26 <__submore>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d0f1      	beq.n	800508a <_sungetc_r+0x26>
 80050a6:	e7e1      	b.n	800506c <_sungetc_r+0x8>
 80050a8:	6921      	ldr	r1, [r4, #16]
 80050aa:	6822      	ldr	r2, [r4, #0]
 80050ac:	b141      	cbz	r1, 80050c0 <_sungetc_r+0x5c>
 80050ae:	4291      	cmp	r1, r2
 80050b0:	d206      	bcs.n	80050c0 <_sungetc_r+0x5c>
 80050b2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80050b6:	42a9      	cmp	r1, r5
 80050b8:	d102      	bne.n	80050c0 <_sungetc_r+0x5c>
 80050ba:	3a01      	subs	r2, #1
 80050bc:	6022      	str	r2, [r4, #0]
 80050be:	e7ea      	b.n	8005096 <_sungetc_r+0x32>
 80050c0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80050c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80050ca:	2303      	movs	r3, #3
 80050cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80050ce:	4623      	mov	r3, r4
 80050d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	2301      	movs	r3, #1
 80050d8:	e7de      	b.n	8005098 <_sungetc_r+0x34>

080050da <__ssrefill_r>:
 80050da:	b510      	push	{r4, lr}
 80050dc:	460c      	mov	r4, r1
 80050de:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80050e0:	b169      	cbz	r1, 80050fe <__ssrefill_r+0x24>
 80050e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050e6:	4299      	cmp	r1, r3
 80050e8:	d001      	beq.n	80050ee <__ssrefill_r+0x14>
 80050ea:	f7ff fd6d 	bl	8004bc8 <_free_r>
 80050ee:	2000      	movs	r0, #0
 80050f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050f2:	6360      	str	r0, [r4, #52]	@ 0x34
 80050f4:	6063      	str	r3, [r4, #4]
 80050f6:	b113      	cbz	r3, 80050fe <__ssrefill_r+0x24>
 80050f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	bd10      	pop	{r4, pc}
 80050fe:	6923      	ldr	r3, [r4, #16]
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	2300      	movs	r3, #0
 8005108:	6063      	str	r3, [r4, #4]
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	f043 0320 	orr.w	r3, r3, #32
 8005110:	81a3      	strh	r3, [r4, #12]
 8005112:	e7f3      	b.n	80050fc <__ssrefill_r+0x22>

08005114 <__ssvfiscanf_r>:
 8005114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	460c      	mov	r4, r1
 800511a:	2100      	movs	r1, #0
 800511c:	4606      	mov	r6, r0
 800511e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8005122:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8005126:	49aa      	ldr	r1, [pc, #680]	@ (80053d0 <__ssvfiscanf_r+0x2bc>)
 8005128:	f10d 0804 	add.w	r8, sp, #4
 800512c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800512e:	49a9      	ldr	r1, [pc, #676]	@ (80053d4 <__ssvfiscanf_r+0x2c0>)
 8005130:	4fa9      	ldr	r7, [pc, #676]	@ (80053d8 <__ssvfiscanf_r+0x2c4>)
 8005132:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8005136:	91a1      	str	r1, [sp, #644]	@ 0x284
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	7813      	ldrb	r3, [r2, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8159 	beq.w	80053f4 <__ssvfiscanf_r+0x2e0>
 8005142:	5cf9      	ldrb	r1, [r7, r3]
 8005144:	1c55      	adds	r5, r2, #1
 8005146:	f011 0108 	ands.w	r1, r1, #8
 800514a:	d019      	beq.n	8005180 <__ssvfiscanf_r+0x6c>
 800514c:	6863      	ldr	r3, [r4, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	dd0f      	ble.n	8005172 <__ssvfiscanf_r+0x5e>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	781a      	ldrb	r2, [r3, #0]
 8005156:	5cba      	ldrb	r2, [r7, r2]
 8005158:	0712      	lsls	r2, r2, #28
 800515a:	d401      	bmi.n	8005160 <__ssvfiscanf_r+0x4c>
 800515c:	462a      	mov	r2, r5
 800515e:	e7ec      	b.n	800513a <__ssvfiscanf_r+0x26>
 8005160:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005162:	3301      	adds	r3, #1
 8005164:	3201      	adds	r2, #1
 8005166:	9245      	str	r2, [sp, #276]	@ 0x114
 8005168:	6862      	ldr	r2, [r4, #4]
 800516a:	6023      	str	r3, [r4, #0]
 800516c:	3a01      	subs	r2, #1
 800516e:	6062      	str	r2, [r4, #4]
 8005170:	e7ec      	b.n	800514c <__ssvfiscanf_r+0x38>
 8005172:	4621      	mov	r1, r4
 8005174:	4630      	mov	r0, r6
 8005176:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005178:	4798      	blx	r3
 800517a:	2800      	cmp	r0, #0
 800517c:	d0e9      	beq.n	8005152 <__ssvfiscanf_r+0x3e>
 800517e:	e7ed      	b.n	800515c <__ssvfiscanf_r+0x48>
 8005180:	2b25      	cmp	r3, #37	@ 0x25
 8005182:	d012      	beq.n	80051aa <__ssvfiscanf_r+0x96>
 8005184:	4699      	mov	r9, r3
 8005186:	6863      	ldr	r3, [r4, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f340 8094 	ble.w	80052b6 <__ssvfiscanf_r+0x1a2>
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	7813      	ldrb	r3, [r2, #0]
 8005192:	454b      	cmp	r3, r9
 8005194:	f040 812e 	bne.w	80053f4 <__ssvfiscanf_r+0x2e0>
 8005198:	6863      	ldr	r3, [r4, #4]
 800519a:	3201      	adds	r2, #1
 800519c:	3b01      	subs	r3, #1
 800519e:	6063      	str	r3, [r4, #4]
 80051a0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80051a2:	6022      	str	r2, [r4, #0]
 80051a4:	3301      	adds	r3, #1
 80051a6:	9345      	str	r3, [sp, #276]	@ 0x114
 80051a8:	e7d8      	b.n	800515c <__ssvfiscanf_r+0x48>
 80051aa:	9141      	str	r1, [sp, #260]	@ 0x104
 80051ac:	9143      	str	r1, [sp, #268]	@ 0x10c
 80051ae:	7853      	ldrb	r3, [r2, #1]
 80051b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80051b2:	bf04      	itt	eq
 80051b4:	2310      	moveq	r3, #16
 80051b6:	1c95      	addeq	r5, r2, #2
 80051b8:	f04f 020a 	mov.w	r2, #10
 80051bc:	bf08      	it	eq
 80051be:	9341      	streq	r3, [sp, #260]	@ 0x104
 80051c0:	46a9      	mov	r9, r5
 80051c2:	f819 1b01 	ldrb.w	r1, [r9], #1
 80051c6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80051ca:	2b09      	cmp	r3, #9
 80051cc:	d91e      	bls.n	800520c <__ssvfiscanf_r+0xf8>
 80051ce:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80053dc <__ssvfiscanf_r+0x2c8>
 80051d2:	2203      	movs	r2, #3
 80051d4:	4650      	mov	r0, sl
 80051d6:	f000 fc89 	bl	8005aec <memchr>
 80051da:	b138      	cbz	r0, 80051ec <__ssvfiscanf_r+0xd8>
 80051dc:	2301      	movs	r3, #1
 80051de:	464d      	mov	r5, r9
 80051e0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80051e2:	eba0 000a 	sub.w	r0, r0, sl
 80051e6:	4083      	lsls	r3, r0
 80051e8:	4313      	orrs	r3, r2
 80051ea:	9341      	str	r3, [sp, #260]	@ 0x104
 80051ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80051f0:	2b78      	cmp	r3, #120	@ 0x78
 80051f2:	d806      	bhi.n	8005202 <__ssvfiscanf_r+0xee>
 80051f4:	2b57      	cmp	r3, #87	@ 0x57
 80051f6:	d810      	bhi.n	800521a <__ssvfiscanf_r+0x106>
 80051f8:	2b25      	cmp	r3, #37	@ 0x25
 80051fa:	d0c3      	beq.n	8005184 <__ssvfiscanf_r+0x70>
 80051fc:	d856      	bhi.n	80052ac <__ssvfiscanf_r+0x198>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d064      	beq.n	80052cc <__ssvfiscanf_r+0x1b8>
 8005202:	2303      	movs	r3, #3
 8005204:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005206:	230a      	movs	r3, #10
 8005208:	9342      	str	r3, [sp, #264]	@ 0x108
 800520a:	e077      	b.n	80052fc <__ssvfiscanf_r+0x1e8>
 800520c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800520e:	464d      	mov	r5, r9
 8005210:	fb02 1103 	mla	r1, r2, r3, r1
 8005214:	3930      	subs	r1, #48	@ 0x30
 8005216:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005218:	e7d2      	b.n	80051c0 <__ssvfiscanf_r+0xac>
 800521a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800521e:	2a20      	cmp	r2, #32
 8005220:	d8ef      	bhi.n	8005202 <__ssvfiscanf_r+0xee>
 8005222:	a101      	add	r1, pc, #4	@ (adr r1, 8005228 <__ssvfiscanf_r+0x114>)
 8005224:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005228:	080052db 	.word	0x080052db
 800522c:	08005203 	.word	0x08005203
 8005230:	08005203 	.word	0x08005203
 8005234:	08005335 	.word	0x08005335
 8005238:	08005203 	.word	0x08005203
 800523c:	08005203 	.word	0x08005203
 8005240:	08005203 	.word	0x08005203
 8005244:	08005203 	.word	0x08005203
 8005248:	08005203 	.word	0x08005203
 800524c:	08005203 	.word	0x08005203
 8005250:	08005203 	.word	0x08005203
 8005254:	0800534b 	.word	0x0800534b
 8005258:	08005331 	.word	0x08005331
 800525c:	080052b3 	.word	0x080052b3
 8005260:	080052b3 	.word	0x080052b3
 8005264:	080052b3 	.word	0x080052b3
 8005268:	08005203 	.word	0x08005203
 800526c:	080052ed 	.word	0x080052ed
 8005270:	08005203 	.word	0x08005203
 8005274:	08005203 	.word	0x08005203
 8005278:	08005203 	.word	0x08005203
 800527c:	08005203 	.word	0x08005203
 8005280:	0800535b 	.word	0x0800535b
 8005284:	080052f5 	.word	0x080052f5
 8005288:	080052d3 	.word	0x080052d3
 800528c:	08005203 	.word	0x08005203
 8005290:	08005203 	.word	0x08005203
 8005294:	08005357 	.word	0x08005357
 8005298:	08005203 	.word	0x08005203
 800529c:	08005331 	.word	0x08005331
 80052a0:	08005203 	.word	0x08005203
 80052a4:	08005203 	.word	0x08005203
 80052a8:	080052db 	.word	0x080052db
 80052ac:	3b45      	subs	r3, #69	@ 0x45
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d8a7      	bhi.n	8005202 <__ssvfiscanf_r+0xee>
 80052b2:	2305      	movs	r3, #5
 80052b4:	e021      	b.n	80052fa <__ssvfiscanf_r+0x1e6>
 80052b6:	4621      	mov	r1, r4
 80052b8:	4630      	mov	r0, r6
 80052ba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80052bc:	4798      	blx	r3
 80052be:	2800      	cmp	r0, #0
 80052c0:	f43f af65 	beq.w	800518e <__ssvfiscanf_r+0x7a>
 80052c4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80052c6:	2800      	cmp	r0, #0
 80052c8:	f040 808c 	bne.w	80053e4 <__ssvfiscanf_r+0x2d0>
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295
 80052d0:	e08c      	b.n	80053ec <__ssvfiscanf_r+0x2d8>
 80052d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80052d4:	f042 0220 	orr.w	r2, r2, #32
 80052d8:	9241      	str	r2, [sp, #260]	@ 0x104
 80052da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80052dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052e0:	9241      	str	r2, [sp, #260]	@ 0x104
 80052e2:	2210      	movs	r2, #16
 80052e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80052e6:	9242      	str	r2, [sp, #264]	@ 0x108
 80052e8:	d902      	bls.n	80052f0 <__ssvfiscanf_r+0x1dc>
 80052ea:	e005      	b.n	80052f8 <__ssvfiscanf_r+0x1e4>
 80052ec:	2300      	movs	r3, #0
 80052ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80052f0:	2303      	movs	r3, #3
 80052f2:	e002      	b.n	80052fa <__ssvfiscanf_r+0x1e6>
 80052f4:	2308      	movs	r3, #8
 80052f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80052f8:	2304      	movs	r3, #4
 80052fa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80052fc:	6863      	ldr	r3, [r4, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	dd39      	ble.n	8005376 <__ssvfiscanf_r+0x262>
 8005302:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005304:	0659      	lsls	r1, r3, #25
 8005306:	d404      	bmi.n	8005312 <__ssvfiscanf_r+0x1fe>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	5cba      	ldrb	r2, [r7, r2]
 800530e:	0712      	lsls	r2, r2, #28
 8005310:	d438      	bmi.n	8005384 <__ssvfiscanf_r+0x270>
 8005312:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005314:	2b02      	cmp	r3, #2
 8005316:	dc47      	bgt.n	80053a8 <__ssvfiscanf_r+0x294>
 8005318:	466b      	mov	r3, sp
 800531a:	4622      	mov	r2, r4
 800531c:	4630      	mov	r0, r6
 800531e:	a941      	add	r1, sp, #260	@ 0x104
 8005320:	f000 f9fc 	bl	800571c <_scanf_chars>
 8005324:	2801      	cmp	r0, #1
 8005326:	d065      	beq.n	80053f4 <__ssvfiscanf_r+0x2e0>
 8005328:	2802      	cmp	r0, #2
 800532a:	f47f af17 	bne.w	800515c <__ssvfiscanf_r+0x48>
 800532e:	e7c9      	b.n	80052c4 <__ssvfiscanf_r+0x1b0>
 8005330:	220a      	movs	r2, #10
 8005332:	e7d7      	b.n	80052e4 <__ssvfiscanf_r+0x1d0>
 8005334:	4629      	mov	r1, r5
 8005336:	4640      	mov	r0, r8
 8005338:	f000 fb3c 	bl	80059b4 <__sccl>
 800533c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800533e:	4605      	mov	r5, r0
 8005340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005344:	9341      	str	r3, [sp, #260]	@ 0x104
 8005346:	2301      	movs	r3, #1
 8005348:	e7d7      	b.n	80052fa <__ssvfiscanf_r+0x1e6>
 800534a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800534c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005350:	9341      	str	r3, [sp, #260]	@ 0x104
 8005352:	2300      	movs	r3, #0
 8005354:	e7d1      	b.n	80052fa <__ssvfiscanf_r+0x1e6>
 8005356:	2302      	movs	r3, #2
 8005358:	e7cf      	b.n	80052fa <__ssvfiscanf_r+0x1e6>
 800535a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800535c:	06c3      	lsls	r3, r0, #27
 800535e:	f53f aefd 	bmi.w	800515c <__ssvfiscanf_r+0x48>
 8005362:	9b00      	ldr	r3, [sp, #0]
 8005364:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005366:	1d19      	adds	r1, r3, #4
 8005368:	9100      	str	r1, [sp, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	07c0      	lsls	r0, r0, #31
 800536e:	bf4c      	ite	mi
 8005370:	801a      	strhmi	r2, [r3, #0]
 8005372:	601a      	strpl	r2, [r3, #0]
 8005374:	e6f2      	b.n	800515c <__ssvfiscanf_r+0x48>
 8005376:	4621      	mov	r1, r4
 8005378:	4630      	mov	r0, r6
 800537a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800537c:	4798      	blx	r3
 800537e:	2800      	cmp	r0, #0
 8005380:	d0bf      	beq.n	8005302 <__ssvfiscanf_r+0x1ee>
 8005382:	e79f      	b.n	80052c4 <__ssvfiscanf_r+0x1b0>
 8005384:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8005386:	3201      	adds	r2, #1
 8005388:	9245      	str	r2, [sp, #276]	@ 0x114
 800538a:	6862      	ldr	r2, [r4, #4]
 800538c:	3a01      	subs	r2, #1
 800538e:	2a00      	cmp	r2, #0
 8005390:	6062      	str	r2, [r4, #4]
 8005392:	dd02      	ble.n	800539a <__ssvfiscanf_r+0x286>
 8005394:	3301      	adds	r3, #1
 8005396:	6023      	str	r3, [r4, #0]
 8005398:	e7b6      	b.n	8005308 <__ssvfiscanf_r+0x1f4>
 800539a:	4621      	mov	r1, r4
 800539c:	4630      	mov	r0, r6
 800539e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80053a0:	4798      	blx	r3
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d0b0      	beq.n	8005308 <__ssvfiscanf_r+0x1f4>
 80053a6:	e78d      	b.n	80052c4 <__ssvfiscanf_r+0x1b0>
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	dc06      	bgt.n	80053ba <__ssvfiscanf_r+0x2a6>
 80053ac:	466b      	mov	r3, sp
 80053ae:	4622      	mov	r2, r4
 80053b0:	4630      	mov	r0, r6
 80053b2:	a941      	add	r1, sp, #260	@ 0x104
 80053b4:	f000 fa0c 	bl	80057d0 <_scanf_i>
 80053b8:	e7b4      	b.n	8005324 <__ssvfiscanf_r+0x210>
 80053ba:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <__ssvfiscanf_r+0x2cc>)
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f43f aecd 	beq.w	800515c <__ssvfiscanf_r+0x48>
 80053c2:	466b      	mov	r3, sp
 80053c4:	4622      	mov	r2, r4
 80053c6:	4630      	mov	r0, r6
 80053c8:	a941      	add	r1, sp, #260	@ 0x104
 80053ca:	f3af 8000 	nop.w
 80053ce:	e7a9      	b.n	8005324 <__ssvfiscanf_r+0x210>
 80053d0:	08005065 	.word	0x08005065
 80053d4:	080050db 	.word	0x080050db
 80053d8:	08005ec9 	.word	0x08005ec9
 80053dc:	08005e80 	.word	0x08005e80
 80053e0:	00000000 	.word	0x00000000
 80053e4:	89a3      	ldrh	r3, [r4, #12]
 80053e6:	065b      	lsls	r3, r3, #25
 80053e8:	f53f af70 	bmi.w	80052cc <__ssvfiscanf_r+0x1b8>
 80053ec:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80053f6:	e7f9      	b.n	80053ec <__ssvfiscanf_r+0x2d8>

080053f8 <_printf_common>:
 80053f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	4616      	mov	r6, r2
 80053fe:	4698      	mov	r8, r3
 8005400:	688a      	ldr	r2, [r1, #8]
 8005402:	690b      	ldr	r3, [r1, #16]
 8005404:	4607      	mov	r7, r0
 8005406:	4293      	cmp	r3, r2
 8005408:	bfb8      	it	lt
 800540a:	4613      	movlt	r3, r2
 800540c:	6033      	str	r3, [r6, #0]
 800540e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005412:	460c      	mov	r4, r1
 8005414:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005418:	b10a      	cbz	r2, 800541e <_printf_common+0x26>
 800541a:	3301      	adds	r3, #1
 800541c:	6033      	str	r3, [r6, #0]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	0699      	lsls	r1, r3, #26
 8005422:	bf42      	ittt	mi
 8005424:	6833      	ldrmi	r3, [r6, #0]
 8005426:	3302      	addmi	r3, #2
 8005428:	6033      	strmi	r3, [r6, #0]
 800542a:	6825      	ldr	r5, [r4, #0]
 800542c:	f015 0506 	ands.w	r5, r5, #6
 8005430:	d106      	bne.n	8005440 <_printf_common+0x48>
 8005432:	f104 0a19 	add.w	sl, r4, #25
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	6832      	ldr	r2, [r6, #0]
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	42ab      	cmp	r3, r5
 800543e:	dc2b      	bgt.n	8005498 <_printf_common+0xa0>
 8005440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	3b00      	subs	r3, #0
 8005448:	bf18      	it	ne
 800544a:	2301      	movne	r3, #1
 800544c:	0692      	lsls	r2, r2, #26
 800544e:	d430      	bmi.n	80054b2 <_printf_common+0xba>
 8005450:	4641      	mov	r1, r8
 8005452:	4638      	mov	r0, r7
 8005454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005458:	47c8      	blx	r9
 800545a:	3001      	adds	r0, #1
 800545c:	d023      	beq.n	80054a6 <_printf_common+0xae>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	6922      	ldr	r2, [r4, #16]
 8005462:	f003 0306 	and.w	r3, r3, #6
 8005466:	2b04      	cmp	r3, #4
 8005468:	bf14      	ite	ne
 800546a:	2500      	movne	r5, #0
 800546c:	6833      	ldreq	r3, [r6, #0]
 800546e:	f04f 0600 	mov.w	r6, #0
 8005472:	bf08      	it	eq
 8005474:	68e5      	ldreq	r5, [r4, #12]
 8005476:	f104 041a 	add.w	r4, r4, #26
 800547a:	bf08      	it	eq
 800547c:	1aed      	subeq	r5, r5, r3
 800547e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005482:	bf08      	it	eq
 8005484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005488:	4293      	cmp	r3, r2
 800548a:	bfc4      	itt	gt
 800548c:	1a9b      	subgt	r3, r3, r2
 800548e:	18ed      	addgt	r5, r5, r3
 8005490:	42b5      	cmp	r5, r6
 8005492:	d11a      	bne.n	80054ca <_printf_common+0xd2>
 8005494:	2000      	movs	r0, #0
 8005496:	e008      	b.n	80054aa <_printf_common+0xb2>
 8005498:	2301      	movs	r3, #1
 800549a:	4652      	mov	r2, sl
 800549c:	4641      	mov	r1, r8
 800549e:	4638      	mov	r0, r7
 80054a0:	47c8      	blx	r9
 80054a2:	3001      	adds	r0, #1
 80054a4:	d103      	bne.n	80054ae <_printf_common+0xb6>
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295
 80054aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ae:	3501      	adds	r5, #1
 80054b0:	e7c1      	b.n	8005436 <_printf_common+0x3e>
 80054b2:	2030      	movs	r0, #48	@ 0x30
 80054b4:	18e1      	adds	r1, r4, r3
 80054b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054c0:	4422      	add	r2, r4
 80054c2:	3302      	adds	r3, #2
 80054c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054c8:	e7c2      	b.n	8005450 <_printf_common+0x58>
 80054ca:	2301      	movs	r3, #1
 80054cc:	4622      	mov	r2, r4
 80054ce:	4641      	mov	r1, r8
 80054d0:	4638      	mov	r0, r7
 80054d2:	47c8      	blx	r9
 80054d4:	3001      	adds	r0, #1
 80054d6:	d0e6      	beq.n	80054a6 <_printf_common+0xae>
 80054d8:	3601      	adds	r6, #1
 80054da:	e7d9      	b.n	8005490 <_printf_common+0x98>

080054dc <_printf_i>:
 80054dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	7e0f      	ldrb	r7, [r1, #24]
 80054e2:	4691      	mov	r9, r2
 80054e4:	2f78      	cmp	r7, #120	@ 0x78
 80054e6:	4680      	mov	r8, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	469a      	mov	sl, r3
 80054ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054f2:	d807      	bhi.n	8005504 <_printf_i+0x28>
 80054f4:	2f62      	cmp	r7, #98	@ 0x62
 80054f6:	d80a      	bhi.n	800550e <_printf_i+0x32>
 80054f8:	2f00      	cmp	r7, #0
 80054fa:	f000 80d3 	beq.w	80056a4 <_printf_i+0x1c8>
 80054fe:	2f58      	cmp	r7, #88	@ 0x58
 8005500:	f000 80ba 	beq.w	8005678 <_printf_i+0x19c>
 8005504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005508:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800550c:	e03a      	b.n	8005584 <_printf_i+0xa8>
 800550e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005512:	2b15      	cmp	r3, #21
 8005514:	d8f6      	bhi.n	8005504 <_printf_i+0x28>
 8005516:	a101      	add	r1, pc, #4	@ (adr r1, 800551c <_printf_i+0x40>)
 8005518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800551c:	08005575 	.word	0x08005575
 8005520:	08005589 	.word	0x08005589
 8005524:	08005505 	.word	0x08005505
 8005528:	08005505 	.word	0x08005505
 800552c:	08005505 	.word	0x08005505
 8005530:	08005505 	.word	0x08005505
 8005534:	08005589 	.word	0x08005589
 8005538:	08005505 	.word	0x08005505
 800553c:	08005505 	.word	0x08005505
 8005540:	08005505 	.word	0x08005505
 8005544:	08005505 	.word	0x08005505
 8005548:	0800568b 	.word	0x0800568b
 800554c:	080055b3 	.word	0x080055b3
 8005550:	08005645 	.word	0x08005645
 8005554:	08005505 	.word	0x08005505
 8005558:	08005505 	.word	0x08005505
 800555c:	080056ad 	.word	0x080056ad
 8005560:	08005505 	.word	0x08005505
 8005564:	080055b3 	.word	0x080055b3
 8005568:	08005505 	.word	0x08005505
 800556c:	08005505 	.word	0x08005505
 8005570:	0800564d 	.word	0x0800564d
 8005574:	6833      	ldr	r3, [r6, #0]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6032      	str	r2, [r6, #0]
 800557c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005580:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005584:	2301      	movs	r3, #1
 8005586:	e09e      	b.n	80056c6 <_printf_i+0x1ea>
 8005588:	6833      	ldr	r3, [r6, #0]
 800558a:	6820      	ldr	r0, [r4, #0]
 800558c:	1d19      	adds	r1, r3, #4
 800558e:	6031      	str	r1, [r6, #0]
 8005590:	0606      	lsls	r6, r0, #24
 8005592:	d501      	bpl.n	8005598 <_printf_i+0xbc>
 8005594:	681d      	ldr	r5, [r3, #0]
 8005596:	e003      	b.n	80055a0 <_printf_i+0xc4>
 8005598:	0645      	lsls	r5, r0, #25
 800559a:	d5fb      	bpl.n	8005594 <_printf_i+0xb8>
 800559c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055a0:	2d00      	cmp	r5, #0
 80055a2:	da03      	bge.n	80055ac <_printf_i+0xd0>
 80055a4:	232d      	movs	r3, #45	@ 0x2d
 80055a6:	426d      	negs	r5, r5
 80055a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ac:	230a      	movs	r3, #10
 80055ae:	4859      	ldr	r0, [pc, #356]	@ (8005714 <_printf_i+0x238>)
 80055b0:	e011      	b.n	80055d6 <_printf_i+0xfa>
 80055b2:	6821      	ldr	r1, [r4, #0]
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	0608      	lsls	r0, r1, #24
 80055b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80055bc:	d402      	bmi.n	80055c4 <_printf_i+0xe8>
 80055be:	0649      	lsls	r1, r1, #25
 80055c0:	bf48      	it	mi
 80055c2:	b2ad      	uxthmi	r5, r5
 80055c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80055c6:	6033      	str	r3, [r6, #0]
 80055c8:	bf14      	ite	ne
 80055ca:	230a      	movne	r3, #10
 80055cc:	2308      	moveq	r3, #8
 80055ce:	4851      	ldr	r0, [pc, #324]	@ (8005714 <_printf_i+0x238>)
 80055d0:	2100      	movs	r1, #0
 80055d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055d6:	6866      	ldr	r6, [r4, #4]
 80055d8:	2e00      	cmp	r6, #0
 80055da:	bfa8      	it	ge
 80055dc:	6821      	ldrge	r1, [r4, #0]
 80055de:	60a6      	str	r6, [r4, #8]
 80055e0:	bfa4      	itt	ge
 80055e2:	f021 0104 	bicge.w	r1, r1, #4
 80055e6:	6021      	strge	r1, [r4, #0]
 80055e8:	b90d      	cbnz	r5, 80055ee <_printf_i+0x112>
 80055ea:	2e00      	cmp	r6, #0
 80055ec:	d04b      	beq.n	8005686 <_printf_i+0x1aa>
 80055ee:	4616      	mov	r6, r2
 80055f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80055f4:	fb03 5711 	mls	r7, r3, r1, r5
 80055f8:	5dc7      	ldrb	r7, [r0, r7]
 80055fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055fe:	462f      	mov	r7, r5
 8005600:	42bb      	cmp	r3, r7
 8005602:	460d      	mov	r5, r1
 8005604:	d9f4      	bls.n	80055f0 <_printf_i+0x114>
 8005606:	2b08      	cmp	r3, #8
 8005608:	d10b      	bne.n	8005622 <_printf_i+0x146>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	07df      	lsls	r7, r3, #31
 800560e:	d508      	bpl.n	8005622 <_printf_i+0x146>
 8005610:	6923      	ldr	r3, [r4, #16]
 8005612:	6861      	ldr	r1, [r4, #4]
 8005614:	4299      	cmp	r1, r3
 8005616:	bfde      	ittt	le
 8005618:	2330      	movle	r3, #48	@ 0x30
 800561a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800561e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005622:	1b92      	subs	r2, r2, r6
 8005624:	6122      	str	r2, [r4, #16]
 8005626:	464b      	mov	r3, r9
 8005628:	4621      	mov	r1, r4
 800562a:	4640      	mov	r0, r8
 800562c:	f8cd a000 	str.w	sl, [sp]
 8005630:	aa03      	add	r2, sp, #12
 8005632:	f7ff fee1 	bl	80053f8 <_printf_common>
 8005636:	3001      	adds	r0, #1
 8005638:	d14a      	bne.n	80056d0 <_printf_i+0x1f4>
 800563a:	f04f 30ff 	mov.w	r0, #4294967295
 800563e:	b004      	add	sp, #16
 8005640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	f043 0320 	orr.w	r3, r3, #32
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	2778      	movs	r7, #120	@ 0x78
 800564e:	4832      	ldr	r0, [pc, #200]	@ (8005718 <_printf_i+0x23c>)
 8005650:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	6831      	ldr	r1, [r6, #0]
 8005658:	061f      	lsls	r7, r3, #24
 800565a:	f851 5b04 	ldr.w	r5, [r1], #4
 800565e:	d402      	bmi.n	8005666 <_printf_i+0x18a>
 8005660:	065f      	lsls	r7, r3, #25
 8005662:	bf48      	it	mi
 8005664:	b2ad      	uxthmi	r5, r5
 8005666:	6031      	str	r1, [r6, #0]
 8005668:	07d9      	lsls	r1, r3, #31
 800566a:	bf44      	itt	mi
 800566c:	f043 0320 	orrmi.w	r3, r3, #32
 8005670:	6023      	strmi	r3, [r4, #0]
 8005672:	b11d      	cbz	r5, 800567c <_printf_i+0x1a0>
 8005674:	2310      	movs	r3, #16
 8005676:	e7ab      	b.n	80055d0 <_printf_i+0xf4>
 8005678:	4826      	ldr	r0, [pc, #152]	@ (8005714 <_printf_i+0x238>)
 800567a:	e7e9      	b.n	8005650 <_printf_i+0x174>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	f023 0320 	bic.w	r3, r3, #32
 8005682:	6023      	str	r3, [r4, #0]
 8005684:	e7f6      	b.n	8005674 <_printf_i+0x198>
 8005686:	4616      	mov	r6, r2
 8005688:	e7bd      	b.n	8005606 <_printf_i+0x12a>
 800568a:	6833      	ldr	r3, [r6, #0]
 800568c:	6825      	ldr	r5, [r4, #0]
 800568e:	1d18      	adds	r0, r3, #4
 8005690:	6961      	ldr	r1, [r4, #20]
 8005692:	6030      	str	r0, [r6, #0]
 8005694:	062e      	lsls	r6, r5, #24
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	d501      	bpl.n	800569e <_printf_i+0x1c2>
 800569a:	6019      	str	r1, [r3, #0]
 800569c:	e002      	b.n	80056a4 <_printf_i+0x1c8>
 800569e:	0668      	lsls	r0, r5, #25
 80056a0:	d5fb      	bpl.n	800569a <_printf_i+0x1be>
 80056a2:	8019      	strh	r1, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	4616      	mov	r6, r2
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	e7bc      	b.n	8005626 <_printf_i+0x14a>
 80056ac:	6833      	ldr	r3, [r6, #0]
 80056ae:	2100      	movs	r1, #0
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	6032      	str	r2, [r6, #0]
 80056b4:	681e      	ldr	r6, [r3, #0]
 80056b6:	6862      	ldr	r2, [r4, #4]
 80056b8:	4630      	mov	r0, r6
 80056ba:	f000 fa17 	bl	8005aec <memchr>
 80056be:	b108      	cbz	r0, 80056c4 <_printf_i+0x1e8>
 80056c0:	1b80      	subs	r0, r0, r6
 80056c2:	6060      	str	r0, [r4, #4]
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	6123      	str	r3, [r4, #16]
 80056c8:	2300      	movs	r3, #0
 80056ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ce:	e7aa      	b.n	8005626 <_printf_i+0x14a>
 80056d0:	4632      	mov	r2, r6
 80056d2:	4649      	mov	r1, r9
 80056d4:	4640      	mov	r0, r8
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	47d0      	blx	sl
 80056da:	3001      	adds	r0, #1
 80056dc:	d0ad      	beq.n	800563a <_printf_i+0x15e>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	079b      	lsls	r3, r3, #30
 80056e2:	d413      	bmi.n	800570c <_printf_i+0x230>
 80056e4:	68e0      	ldr	r0, [r4, #12]
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	4298      	cmp	r0, r3
 80056ea:	bfb8      	it	lt
 80056ec:	4618      	movlt	r0, r3
 80056ee:	e7a6      	b.n	800563e <_printf_i+0x162>
 80056f0:	2301      	movs	r3, #1
 80056f2:	4632      	mov	r2, r6
 80056f4:	4649      	mov	r1, r9
 80056f6:	4640      	mov	r0, r8
 80056f8:	47d0      	blx	sl
 80056fa:	3001      	adds	r0, #1
 80056fc:	d09d      	beq.n	800563a <_printf_i+0x15e>
 80056fe:	3501      	adds	r5, #1
 8005700:	68e3      	ldr	r3, [r4, #12]
 8005702:	9903      	ldr	r1, [sp, #12]
 8005704:	1a5b      	subs	r3, r3, r1
 8005706:	42ab      	cmp	r3, r5
 8005708:	dcf2      	bgt.n	80056f0 <_printf_i+0x214>
 800570a:	e7eb      	b.n	80056e4 <_printf_i+0x208>
 800570c:	2500      	movs	r5, #0
 800570e:	f104 0619 	add.w	r6, r4, #25
 8005712:	e7f5      	b.n	8005700 <_printf_i+0x224>
 8005714:	08005e8b 	.word	0x08005e8b
 8005718:	08005e9c 	.word	0x08005e9c

0800571c <_scanf_chars>:
 800571c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005720:	4615      	mov	r5, r2
 8005722:	688a      	ldr	r2, [r1, #8]
 8005724:	4680      	mov	r8, r0
 8005726:	460c      	mov	r4, r1
 8005728:	b932      	cbnz	r2, 8005738 <_scanf_chars+0x1c>
 800572a:	698a      	ldr	r2, [r1, #24]
 800572c:	2a00      	cmp	r2, #0
 800572e:	bf14      	ite	ne
 8005730:	f04f 32ff 	movne.w	r2, #4294967295
 8005734:	2201      	moveq	r2, #1
 8005736:	608a      	str	r2, [r1, #8]
 8005738:	2700      	movs	r7, #0
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80057cc <_scanf_chars+0xb0>
 8005740:	06d1      	lsls	r1, r2, #27
 8005742:	bf5f      	itttt	pl
 8005744:	681a      	ldrpl	r2, [r3, #0]
 8005746:	1d11      	addpl	r1, r2, #4
 8005748:	6019      	strpl	r1, [r3, #0]
 800574a:	6816      	ldrpl	r6, [r2, #0]
 800574c:	69a0      	ldr	r0, [r4, #24]
 800574e:	b188      	cbz	r0, 8005774 <_scanf_chars+0x58>
 8005750:	2801      	cmp	r0, #1
 8005752:	d107      	bne.n	8005764 <_scanf_chars+0x48>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	781a      	ldrb	r2, [r3, #0]
 8005758:	6963      	ldr	r3, [r4, #20]
 800575a:	5c9b      	ldrb	r3, [r3, r2]
 800575c:	b953      	cbnz	r3, 8005774 <_scanf_chars+0x58>
 800575e:	2f00      	cmp	r7, #0
 8005760:	d031      	beq.n	80057c6 <_scanf_chars+0xaa>
 8005762:	e022      	b.n	80057aa <_scanf_chars+0x8e>
 8005764:	2802      	cmp	r0, #2
 8005766:	d120      	bne.n	80057aa <_scanf_chars+0x8e>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005770:	071b      	lsls	r3, r3, #28
 8005772:	d41a      	bmi.n	80057aa <_scanf_chars+0x8e>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	3701      	adds	r7, #1
 8005778:	06da      	lsls	r2, r3, #27
 800577a:	bf5e      	ittt	pl
 800577c:	682b      	ldrpl	r3, [r5, #0]
 800577e:	781b      	ldrbpl	r3, [r3, #0]
 8005780:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005784:	682a      	ldr	r2, [r5, #0]
 8005786:	686b      	ldr	r3, [r5, #4]
 8005788:	3201      	adds	r2, #1
 800578a:	602a      	str	r2, [r5, #0]
 800578c:	68a2      	ldr	r2, [r4, #8]
 800578e:	3b01      	subs	r3, #1
 8005790:	3a01      	subs	r2, #1
 8005792:	606b      	str	r3, [r5, #4]
 8005794:	60a2      	str	r2, [r4, #8]
 8005796:	b142      	cbz	r2, 80057aa <_scanf_chars+0x8e>
 8005798:	2b00      	cmp	r3, #0
 800579a:	dcd7      	bgt.n	800574c <_scanf_chars+0x30>
 800579c:	4629      	mov	r1, r5
 800579e:	4640      	mov	r0, r8
 80057a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80057a4:	4798      	blx	r3
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d0d0      	beq.n	800574c <_scanf_chars+0x30>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f013 0310 	ands.w	r3, r3, #16
 80057b0:	d105      	bne.n	80057be <_scanf_chars+0xa2>
 80057b2:	68e2      	ldr	r2, [r4, #12]
 80057b4:	3201      	adds	r2, #1
 80057b6:	60e2      	str	r2, [r4, #12]
 80057b8:	69a2      	ldr	r2, [r4, #24]
 80057ba:	b102      	cbz	r2, 80057be <_scanf_chars+0xa2>
 80057bc:	7033      	strb	r3, [r6, #0]
 80057be:	2000      	movs	r0, #0
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	443b      	add	r3, r7
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ca:	bf00      	nop
 80057cc:	08005ec9 	.word	0x08005ec9

080057d0 <_scanf_i>:
 80057d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	460c      	mov	r4, r1
 80057d6:	4698      	mov	r8, r3
 80057d8:	4b72      	ldr	r3, [pc, #456]	@ (80059a4 <_scanf_i+0x1d4>)
 80057da:	b087      	sub	sp, #28
 80057dc:	4682      	mov	sl, r0
 80057de:	4616      	mov	r6, r2
 80057e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057e4:	ab03      	add	r3, sp, #12
 80057e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80057ea:	4b6f      	ldr	r3, [pc, #444]	@ (80059a8 <_scanf_i+0x1d8>)
 80057ec:	69a1      	ldr	r1, [r4, #24]
 80057ee:	4a6f      	ldr	r2, [pc, #444]	@ (80059ac <_scanf_i+0x1dc>)
 80057f0:	4627      	mov	r7, r4
 80057f2:	2903      	cmp	r1, #3
 80057f4:	bf08      	it	eq
 80057f6:	461a      	moveq	r2, r3
 80057f8:	68a3      	ldr	r3, [r4, #8]
 80057fa:	9201      	str	r2, [sp, #4]
 80057fc:	1e5a      	subs	r2, r3, #1
 80057fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005802:	bf81      	itttt	hi
 8005804:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005808:	eb03 0905 	addhi.w	r9, r3, r5
 800580c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005810:	60a3      	strhi	r3, [r4, #8]
 8005812:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005816:	bf98      	it	ls
 8005818:	f04f 0900 	movls.w	r9, #0
 800581c:	463d      	mov	r5, r7
 800581e:	f04f 0b00 	mov.w	fp, #0
 8005822:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	6831      	ldr	r1, [r6, #0]
 800582a:	ab03      	add	r3, sp, #12
 800582c:	2202      	movs	r2, #2
 800582e:	7809      	ldrb	r1, [r1, #0]
 8005830:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005834:	f000 f95a 	bl	8005aec <memchr>
 8005838:	b328      	cbz	r0, 8005886 <_scanf_i+0xb6>
 800583a:	f1bb 0f01 	cmp.w	fp, #1
 800583e:	d159      	bne.n	80058f4 <_scanf_i+0x124>
 8005840:	6862      	ldr	r2, [r4, #4]
 8005842:	b92a      	cbnz	r2, 8005850 <_scanf_i+0x80>
 8005844:	2108      	movs	r1, #8
 8005846:	6822      	ldr	r2, [r4, #0]
 8005848:	6061      	str	r1, [r4, #4]
 800584a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800584e:	6022      	str	r2, [r4, #0]
 8005850:	6822      	ldr	r2, [r4, #0]
 8005852:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8005856:	6022      	str	r2, [r4, #0]
 8005858:	68a2      	ldr	r2, [r4, #8]
 800585a:	1e51      	subs	r1, r2, #1
 800585c:	60a1      	str	r1, [r4, #8]
 800585e:	b192      	cbz	r2, 8005886 <_scanf_i+0xb6>
 8005860:	6832      	ldr	r2, [r6, #0]
 8005862:	1c51      	adds	r1, r2, #1
 8005864:	6031      	str	r1, [r6, #0]
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	f805 2b01 	strb.w	r2, [r5], #1
 800586c:	6872      	ldr	r2, [r6, #4]
 800586e:	3a01      	subs	r2, #1
 8005870:	2a00      	cmp	r2, #0
 8005872:	6072      	str	r2, [r6, #4]
 8005874:	dc07      	bgt.n	8005886 <_scanf_i+0xb6>
 8005876:	4631      	mov	r1, r6
 8005878:	4650      	mov	r0, sl
 800587a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800587e:	4790      	blx	r2
 8005880:	2800      	cmp	r0, #0
 8005882:	f040 8085 	bne.w	8005990 <_scanf_i+0x1c0>
 8005886:	f10b 0b01 	add.w	fp, fp, #1
 800588a:	f1bb 0f03 	cmp.w	fp, #3
 800588e:	d1cb      	bne.n	8005828 <_scanf_i+0x58>
 8005890:	6863      	ldr	r3, [r4, #4]
 8005892:	b90b      	cbnz	r3, 8005898 <_scanf_i+0xc8>
 8005894:	230a      	movs	r3, #10
 8005896:	6063      	str	r3, [r4, #4]
 8005898:	6863      	ldr	r3, [r4, #4]
 800589a:	4945      	ldr	r1, [pc, #276]	@ (80059b0 <_scanf_i+0x1e0>)
 800589c:	6960      	ldr	r0, [r4, #20]
 800589e:	1ac9      	subs	r1, r1, r3
 80058a0:	f000 f888 	bl	80059b4 <__sccl>
 80058a4:	f04f 0b00 	mov.w	fp, #0
 80058a8:	68a3      	ldr	r3, [r4, #8]
 80058aa:	6822      	ldr	r2, [r4, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d03d      	beq.n	800592c <_scanf_i+0x15c>
 80058b0:	6831      	ldr	r1, [r6, #0]
 80058b2:	6960      	ldr	r0, [r4, #20]
 80058b4:	f891 c000 	ldrb.w	ip, [r1]
 80058b8:	f810 000c 	ldrb.w	r0, [r0, ip]
 80058bc:	2800      	cmp	r0, #0
 80058be:	d035      	beq.n	800592c <_scanf_i+0x15c>
 80058c0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80058c4:	d124      	bne.n	8005910 <_scanf_i+0x140>
 80058c6:	0510      	lsls	r0, r2, #20
 80058c8:	d522      	bpl.n	8005910 <_scanf_i+0x140>
 80058ca:	f10b 0b01 	add.w	fp, fp, #1
 80058ce:	f1b9 0f00 	cmp.w	r9, #0
 80058d2:	d003      	beq.n	80058dc <_scanf_i+0x10c>
 80058d4:	3301      	adds	r3, #1
 80058d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80058da:	60a3      	str	r3, [r4, #8]
 80058dc:	6873      	ldr	r3, [r6, #4]
 80058de:	3b01      	subs	r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	6073      	str	r3, [r6, #4]
 80058e4:	dd1b      	ble.n	800591e <_scanf_i+0x14e>
 80058e6:	6833      	ldr	r3, [r6, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	6033      	str	r3, [r6, #0]
 80058ec:	68a3      	ldr	r3, [r4, #8]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	60a3      	str	r3, [r4, #8]
 80058f2:	e7d9      	b.n	80058a8 <_scanf_i+0xd8>
 80058f4:	f1bb 0f02 	cmp.w	fp, #2
 80058f8:	d1ae      	bne.n	8005858 <_scanf_i+0x88>
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005900:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8005904:	d1bf      	bne.n	8005886 <_scanf_i+0xb6>
 8005906:	2110      	movs	r1, #16
 8005908:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800590c:	6061      	str	r1, [r4, #4]
 800590e:	e7a2      	b.n	8005856 <_scanf_i+0x86>
 8005910:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8005914:	6022      	str	r2, [r4, #0]
 8005916:	780b      	ldrb	r3, [r1, #0]
 8005918:	f805 3b01 	strb.w	r3, [r5], #1
 800591c:	e7de      	b.n	80058dc <_scanf_i+0x10c>
 800591e:	4631      	mov	r1, r6
 8005920:	4650      	mov	r0, sl
 8005922:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005926:	4798      	blx	r3
 8005928:	2800      	cmp	r0, #0
 800592a:	d0df      	beq.n	80058ec <_scanf_i+0x11c>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	05d9      	lsls	r1, r3, #23
 8005930:	d50d      	bpl.n	800594e <_scanf_i+0x17e>
 8005932:	42bd      	cmp	r5, r7
 8005934:	d909      	bls.n	800594a <_scanf_i+0x17a>
 8005936:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800593a:	4632      	mov	r2, r6
 800593c:	4650      	mov	r0, sl
 800593e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005942:	f105 39ff 	add.w	r9, r5, #4294967295
 8005946:	4798      	blx	r3
 8005948:	464d      	mov	r5, r9
 800594a:	42bd      	cmp	r5, r7
 800594c:	d028      	beq.n	80059a0 <_scanf_i+0x1d0>
 800594e:	6822      	ldr	r2, [r4, #0]
 8005950:	f012 0210 	ands.w	r2, r2, #16
 8005954:	d113      	bne.n	800597e <_scanf_i+0x1ae>
 8005956:	702a      	strb	r2, [r5, #0]
 8005958:	4639      	mov	r1, r7
 800595a:	6863      	ldr	r3, [r4, #4]
 800595c:	4650      	mov	r0, sl
 800595e:	9e01      	ldr	r6, [sp, #4]
 8005960:	47b0      	blx	r6
 8005962:	f8d8 3000 	ldr.w	r3, [r8]
 8005966:	6821      	ldr	r1, [r4, #0]
 8005968:	1d1a      	adds	r2, r3, #4
 800596a:	f8c8 2000 	str.w	r2, [r8]
 800596e:	f011 0f20 	tst.w	r1, #32
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	d00f      	beq.n	8005996 <_scanf_i+0x1c6>
 8005976:	6018      	str	r0, [r3, #0]
 8005978:	68e3      	ldr	r3, [r4, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60e3      	str	r3, [r4, #12]
 800597e:	2000      	movs	r0, #0
 8005980:	6923      	ldr	r3, [r4, #16]
 8005982:	1bed      	subs	r5, r5, r7
 8005984:	445d      	add	r5, fp
 8005986:	442b      	add	r3, r5
 8005988:	6123      	str	r3, [r4, #16]
 800598a:	b007      	add	sp, #28
 800598c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005990:	f04f 0b00 	mov.w	fp, #0
 8005994:	e7ca      	b.n	800592c <_scanf_i+0x15c>
 8005996:	07ca      	lsls	r2, r1, #31
 8005998:	bf4c      	ite	mi
 800599a:	8018      	strhmi	r0, [r3, #0]
 800599c:	6018      	strpl	r0, [r3, #0]
 800599e:	e7eb      	b.n	8005978 <_scanf_i+0x1a8>
 80059a0:	2001      	movs	r0, #1
 80059a2:	e7f2      	b.n	800598a <_scanf_i+0x1ba>
 80059a4:	08005e44 	.word	0x08005e44
 80059a8:	08005c75 	.word	0x08005c75
 80059ac:	08005d55 	.word	0x08005d55
 80059b0:	08005ebd 	.word	0x08005ebd

080059b4 <__sccl>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	780b      	ldrb	r3, [r1, #0]
 80059b8:	4604      	mov	r4, r0
 80059ba:	2b5e      	cmp	r3, #94	@ 0x5e
 80059bc:	bf0b      	itete	eq
 80059be:	784b      	ldrbeq	r3, [r1, #1]
 80059c0:	1c4a      	addne	r2, r1, #1
 80059c2:	1c8a      	addeq	r2, r1, #2
 80059c4:	2100      	movne	r1, #0
 80059c6:	bf08      	it	eq
 80059c8:	2101      	moveq	r1, #1
 80059ca:	3801      	subs	r0, #1
 80059cc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80059d0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80059d4:	42a8      	cmp	r0, r5
 80059d6:	d1fb      	bne.n	80059d0 <__sccl+0x1c>
 80059d8:	b90b      	cbnz	r3, 80059de <__sccl+0x2a>
 80059da:	1e50      	subs	r0, r2, #1
 80059dc:	bd70      	pop	{r4, r5, r6, pc}
 80059de:	f081 0101 	eor.w	r1, r1, #1
 80059e2:	4610      	mov	r0, r2
 80059e4:	54e1      	strb	r1, [r4, r3]
 80059e6:	4602      	mov	r2, r0
 80059e8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80059ec:	2d2d      	cmp	r5, #45	@ 0x2d
 80059ee:	d005      	beq.n	80059fc <__sccl+0x48>
 80059f0:	2d5d      	cmp	r5, #93	@ 0x5d
 80059f2:	d016      	beq.n	8005a22 <__sccl+0x6e>
 80059f4:	2d00      	cmp	r5, #0
 80059f6:	d0f1      	beq.n	80059dc <__sccl+0x28>
 80059f8:	462b      	mov	r3, r5
 80059fa:	e7f2      	b.n	80059e2 <__sccl+0x2e>
 80059fc:	7846      	ldrb	r6, [r0, #1]
 80059fe:	2e5d      	cmp	r6, #93	@ 0x5d
 8005a00:	d0fa      	beq.n	80059f8 <__sccl+0x44>
 8005a02:	42b3      	cmp	r3, r6
 8005a04:	dcf8      	bgt.n	80059f8 <__sccl+0x44>
 8005a06:	461a      	mov	r2, r3
 8005a08:	3002      	adds	r0, #2
 8005a0a:	3201      	adds	r2, #1
 8005a0c:	4296      	cmp	r6, r2
 8005a0e:	54a1      	strb	r1, [r4, r2]
 8005a10:	dcfb      	bgt.n	8005a0a <__sccl+0x56>
 8005a12:	1af2      	subs	r2, r6, r3
 8005a14:	3a01      	subs	r2, #1
 8005a16:	42b3      	cmp	r3, r6
 8005a18:	bfa8      	it	ge
 8005a1a:	2200      	movge	r2, #0
 8005a1c:	1c5d      	adds	r5, r3, #1
 8005a1e:	18ab      	adds	r3, r5, r2
 8005a20:	e7e1      	b.n	80059e6 <__sccl+0x32>
 8005a22:	4610      	mov	r0, r2
 8005a24:	e7da      	b.n	80059dc <__sccl+0x28>

08005a26 <__submore>:
 8005a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005a2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a32:	4299      	cmp	r1, r3
 8005a34:	d11b      	bne.n	8005a6e <__submore+0x48>
 8005a36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a3a:	f7ff f92f 	bl	8004c9c <_malloc_r>
 8005a3e:	b918      	cbnz	r0, 8005a48 <__submore+0x22>
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295
 8005a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005a4e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005a52:	6360      	str	r0, [r4, #52]	@ 0x34
 8005a54:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005a58:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005a5c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005a60:	7043      	strb	r3, [r0, #1]
 8005a62:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005a66:	7003      	strb	r3, [r0, #0]
 8005a68:	6020      	str	r0, [r4, #0]
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e7ea      	b.n	8005a44 <__submore+0x1e>
 8005a6e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005a70:	0077      	lsls	r7, r6, #1
 8005a72:	463a      	mov	r2, r7
 8005a74:	f000 f856 	bl	8005b24 <_realloc_r>
 8005a78:	4605      	mov	r5, r0
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d0e0      	beq.n	8005a40 <__submore+0x1a>
 8005a7e:	eb00 0806 	add.w	r8, r0, r6
 8005a82:	4601      	mov	r1, r0
 8005a84:	4632      	mov	r2, r6
 8005a86:	4640      	mov	r0, r8
 8005a88:	f000 f83e 	bl	8005b08 <memcpy>
 8005a8c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005a90:	f8c4 8000 	str.w	r8, [r4]
 8005a94:	e7e9      	b.n	8005a6a <__submore+0x44>

08005a96 <memmove>:
 8005a96:	4288      	cmp	r0, r1
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	eb01 0402 	add.w	r4, r1, r2
 8005a9e:	d902      	bls.n	8005aa6 <memmove+0x10>
 8005aa0:	4284      	cmp	r4, r0
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	d807      	bhi.n	8005ab6 <memmove+0x20>
 8005aa6:	1e43      	subs	r3, r0, #1
 8005aa8:	42a1      	cmp	r1, r4
 8005aaa:	d008      	beq.n	8005abe <memmove+0x28>
 8005aac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ab0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ab4:	e7f8      	b.n	8005aa8 <memmove+0x12>
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	4402      	add	r2, r0
 8005aba:	428a      	cmp	r2, r1
 8005abc:	d100      	bne.n	8005ac0 <memmove+0x2a>
 8005abe:	bd10      	pop	{r4, pc}
 8005ac0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ac4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ac8:	e7f7      	b.n	8005aba <memmove+0x24>
	...

08005acc <_sbrk_r>:
 8005acc:	b538      	push	{r3, r4, r5, lr}
 8005ace:	2300      	movs	r3, #0
 8005ad0:	4d05      	ldr	r5, [pc, #20]	@ (8005ae8 <_sbrk_r+0x1c>)
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	602b      	str	r3, [r5, #0]
 8005ad8:	f7fb fbbe 	bl	8001258 <_sbrk>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_sbrk_r+0x1a>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_sbrk_r+0x1a>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	20000380 	.word	0x20000380

08005aec <memchr>:
 8005aec:	4603      	mov	r3, r0
 8005aee:	b510      	push	{r4, lr}
 8005af0:	b2c9      	uxtb	r1, r1
 8005af2:	4402      	add	r2, r0
 8005af4:	4293      	cmp	r3, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	d101      	bne.n	8005afe <memchr+0x12>
 8005afa:	2000      	movs	r0, #0
 8005afc:	e003      	b.n	8005b06 <memchr+0x1a>
 8005afe:	7804      	ldrb	r4, [r0, #0]
 8005b00:	3301      	adds	r3, #1
 8005b02:	428c      	cmp	r4, r1
 8005b04:	d1f6      	bne.n	8005af4 <memchr+0x8>
 8005b06:	bd10      	pop	{r4, pc}

08005b08 <memcpy>:
 8005b08:	440a      	add	r2, r1
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b10:	d100      	bne.n	8005b14 <memcpy+0xc>
 8005b12:	4770      	bx	lr
 8005b14:	b510      	push	{r4, lr}
 8005b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1a:	4291      	cmp	r1, r2
 8005b1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b20:	d1f9      	bne.n	8005b16 <memcpy+0xe>
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <_realloc_r>:
 8005b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b28:	4680      	mov	r8, r0
 8005b2a:	4615      	mov	r5, r2
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	b921      	cbnz	r1, 8005b3a <_realloc_r+0x16>
 8005b30:	4611      	mov	r1, r2
 8005b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b36:	f7ff b8b1 	b.w	8004c9c <_malloc_r>
 8005b3a:	b92a      	cbnz	r2, 8005b48 <_realloc_r+0x24>
 8005b3c:	f7ff f844 	bl	8004bc8 <_free_r>
 8005b40:	2400      	movs	r4, #0
 8005b42:	4620      	mov	r0, r4
 8005b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b48:	f000 f906 	bl	8005d58 <_malloc_usable_size_r>
 8005b4c:	4285      	cmp	r5, r0
 8005b4e:	4606      	mov	r6, r0
 8005b50:	d802      	bhi.n	8005b58 <_realloc_r+0x34>
 8005b52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b56:	d8f4      	bhi.n	8005b42 <_realloc_r+0x1e>
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	f7ff f89e 	bl	8004c9c <_malloc_r>
 8005b60:	4607      	mov	r7, r0
 8005b62:	2800      	cmp	r0, #0
 8005b64:	d0ec      	beq.n	8005b40 <_realloc_r+0x1c>
 8005b66:	42b5      	cmp	r5, r6
 8005b68:	462a      	mov	r2, r5
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	bf28      	it	cs
 8005b6e:	4632      	movcs	r2, r6
 8005b70:	f7ff ffca 	bl	8005b08 <memcpy>
 8005b74:	4621      	mov	r1, r4
 8005b76:	4640      	mov	r0, r8
 8005b78:	f7ff f826 	bl	8004bc8 <_free_r>
 8005b7c:	463c      	mov	r4, r7
 8005b7e:	e7e0      	b.n	8005b42 <_realloc_r+0x1e>

08005b80 <_strtol_l.constprop.0>:
 8005b80:	2b24      	cmp	r3, #36	@ 0x24
 8005b82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b86:	4686      	mov	lr, r0
 8005b88:	4690      	mov	r8, r2
 8005b8a:	d801      	bhi.n	8005b90 <_strtol_l.constprop.0+0x10>
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d106      	bne.n	8005b9e <_strtol_l.constprop.0+0x1e>
 8005b90:	f7fe ffee 	bl	8004b70 <__errno>
 8005b94:	2316      	movs	r3, #22
 8005b96:	6003      	str	r3, [r0, #0]
 8005b98:	2000      	movs	r0, #0
 8005b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9e:	460d      	mov	r5, r1
 8005ba0:	4833      	ldr	r0, [pc, #204]	@ (8005c70 <_strtol_l.constprop.0+0xf0>)
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ba8:	5d06      	ldrb	r6, [r0, r4]
 8005baa:	f016 0608 	ands.w	r6, r6, #8
 8005bae:	d1f8      	bne.n	8005ba2 <_strtol_l.constprop.0+0x22>
 8005bb0:	2c2d      	cmp	r4, #45	@ 0x2d
 8005bb2:	d12d      	bne.n	8005c10 <_strtol_l.constprop.0+0x90>
 8005bb4:	2601      	movs	r6, #1
 8005bb6:	782c      	ldrb	r4, [r5, #0]
 8005bb8:	1c95      	adds	r5, r2, #2
 8005bba:	f033 0210 	bics.w	r2, r3, #16
 8005bbe:	d109      	bne.n	8005bd4 <_strtol_l.constprop.0+0x54>
 8005bc0:	2c30      	cmp	r4, #48	@ 0x30
 8005bc2:	d12a      	bne.n	8005c1a <_strtol_l.constprop.0+0x9a>
 8005bc4:	782a      	ldrb	r2, [r5, #0]
 8005bc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005bca:	2a58      	cmp	r2, #88	@ 0x58
 8005bcc:	d125      	bne.n	8005c1a <_strtol_l.constprop.0+0x9a>
 8005bce:	2310      	movs	r3, #16
 8005bd0:	786c      	ldrb	r4, [r5, #1]
 8005bd2:	3502      	adds	r5, #2
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005bda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005bde:	fbbc f9f3 	udiv	r9, ip, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	fb03 ca19 	mls	sl, r3, r9, ip
 8005be8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005bec:	2f09      	cmp	r7, #9
 8005bee:	d81b      	bhi.n	8005c28 <_strtol_l.constprop.0+0xa8>
 8005bf0:	463c      	mov	r4, r7
 8005bf2:	42a3      	cmp	r3, r4
 8005bf4:	dd27      	ble.n	8005c46 <_strtol_l.constprop.0+0xc6>
 8005bf6:	1c57      	adds	r7, r2, #1
 8005bf8:	d007      	beq.n	8005c0a <_strtol_l.constprop.0+0x8a>
 8005bfa:	4581      	cmp	r9, r0
 8005bfc:	d320      	bcc.n	8005c40 <_strtol_l.constprop.0+0xc0>
 8005bfe:	d101      	bne.n	8005c04 <_strtol_l.constprop.0+0x84>
 8005c00:	45a2      	cmp	sl, r4
 8005c02:	db1d      	blt.n	8005c40 <_strtol_l.constprop.0+0xc0>
 8005c04:	2201      	movs	r2, #1
 8005c06:	fb00 4003 	mla	r0, r0, r3, r4
 8005c0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c0e:	e7eb      	b.n	8005be8 <_strtol_l.constprop.0+0x68>
 8005c10:	2c2b      	cmp	r4, #43	@ 0x2b
 8005c12:	bf04      	itt	eq
 8005c14:	782c      	ldrbeq	r4, [r5, #0]
 8005c16:	1c95      	addeq	r5, r2, #2
 8005c18:	e7cf      	b.n	8005bba <_strtol_l.constprop.0+0x3a>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1da      	bne.n	8005bd4 <_strtol_l.constprop.0+0x54>
 8005c1e:	2c30      	cmp	r4, #48	@ 0x30
 8005c20:	bf0c      	ite	eq
 8005c22:	2308      	moveq	r3, #8
 8005c24:	230a      	movne	r3, #10
 8005c26:	e7d5      	b.n	8005bd4 <_strtol_l.constprop.0+0x54>
 8005c28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005c2c:	2f19      	cmp	r7, #25
 8005c2e:	d801      	bhi.n	8005c34 <_strtol_l.constprop.0+0xb4>
 8005c30:	3c37      	subs	r4, #55	@ 0x37
 8005c32:	e7de      	b.n	8005bf2 <_strtol_l.constprop.0+0x72>
 8005c34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005c38:	2f19      	cmp	r7, #25
 8005c3a:	d804      	bhi.n	8005c46 <_strtol_l.constprop.0+0xc6>
 8005c3c:	3c57      	subs	r4, #87	@ 0x57
 8005c3e:	e7d8      	b.n	8005bf2 <_strtol_l.constprop.0+0x72>
 8005c40:	f04f 32ff 	mov.w	r2, #4294967295
 8005c44:	e7e1      	b.n	8005c0a <_strtol_l.constprop.0+0x8a>
 8005c46:	1c53      	adds	r3, r2, #1
 8005c48:	d108      	bne.n	8005c5c <_strtol_l.constprop.0+0xdc>
 8005c4a:	2322      	movs	r3, #34	@ 0x22
 8005c4c:	4660      	mov	r0, ip
 8005c4e:	f8ce 3000 	str.w	r3, [lr]
 8005c52:	f1b8 0f00 	cmp.w	r8, #0
 8005c56:	d0a0      	beq.n	8005b9a <_strtol_l.constprop.0+0x1a>
 8005c58:	1e69      	subs	r1, r5, #1
 8005c5a:	e006      	b.n	8005c6a <_strtol_l.constprop.0+0xea>
 8005c5c:	b106      	cbz	r6, 8005c60 <_strtol_l.constprop.0+0xe0>
 8005c5e:	4240      	negs	r0, r0
 8005c60:	f1b8 0f00 	cmp.w	r8, #0
 8005c64:	d099      	beq.n	8005b9a <_strtol_l.constprop.0+0x1a>
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	d1f6      	bne.n	8005c58 <_strtol_l.constprop.0+0xd8>
 8005c6a:	f8c8 1000 	str.w	r1, [r8]
 8005c6e:	e794      	b.n	8005b9a <_strtol_l.constprop.0+0x1a>
 8005c70:	08005ec9 	.word	0x08005ec9

08005c74 <_strtol_r>:
 8005c74:	f7ff bf84 	b.w	8005b80 <_strtol_l.constprop.0>

08005c78 <_strtoul_l.constprop.0>:
 8005c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c7c:	4686      	mov	lr, r0
 8005c7e:	460d      	mov	r5, r1
 8005c80:	4e33      	ldr	r6, [pc, #204]	@ (8005d50 <_strtoul_l.constprop.0+0xd8>)
 8005c82:	4628      	mov	r0, r5
 8005c84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c88:	5d37      	ldrb	r7, [r6, r4]
 8005c8a:	f017 0708 	ands.w	r7, r7, #8
 8005c8e:	d1f8      	bne.n	8005c82 <_strtoul_l.constprop.0+0xa>
 8005c90:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c92:	d12f      	bne.n	8005cf4 <_strtoul_l.constprop.0+0x7c>
 8005c94:	2701      	movs	r7, #1
 8005c96:	782c      	ldrb	r4, [r5, #0]
 8005c98:	1c85      	adds	r5, r0, #2
 8005c9a:	f033 0010 	bics.w	r0, r3, #16
 8005c9e:	d109      	bne.n	8005cb4 <_strtoul_l.constprop.0+0x3c>
 8005ca0:	2c30      	cmp	r4, #48	@ 0x30
 8005ca2:	d12c      	bne.n	8005cfe <_strtoul_l.constprop.0+0x86>
 8005ca4:	7828      	ldrb	r0, [r5, #0]
 8005ca6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005caa:	2858      	cmp	r0, #88	@ 0x58
 8005cac:	d127      	bne.n	8005cfe <_strtoul_l.constprop.0+0x86>
 8005cae:	2310      	movs	r3, #16
 8005cb0:	786c      	ldrb	r4, [r5, #1]
 8005cb2:	3502      	adds	r5, #2
 8005cb4:	f04f 38ff 	mov.w	r8, #4294967295
 8005cb8:	fbb8 f8f3 	udiv	r8, r8, r3
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	fb03 f908 	mul.w	r9, r3, r8
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	ea6f 0909 	mvn.w	r9, r9
 8005cc8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005ccc:	f1bc 0f09 	cmp.w	ip, #9
 8005cd0:	d81c      	bhi.n	8005d0c <_strtoul_l.constprop.0+0x94>
 8005cd2:	4664      	mov	r4, ip
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	dd2a      	ble.n	8005d2e <_strtoul_l.constprop.0+0xb6>
 8005cd8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005cdc:	d007      	beq.n	8005cee <_strtoul_l.constprop.0+0x76>
 8005cde:	4580      	cmp	r8, r0
 8005ce0:	d322      	bcc.n	8005d28 <_strtoul_l.constprop.0+0xb0>
 8005ce2:	d101      	bne.n	8005ce8 <_strtoul_l.constprop.0+0x70>
 8005ce4:	45a1      	cmp	r9, r4
 8005ce6:	db1f      	blt.n	8005d28 <_strtoul_l.constprop.0+0xb0>
 8005ce8:	2601      	movs	r6, #1
 8005cea:	fb00 4003 	mla	r0, r0, r3, r4
 8005cee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cf2:	e7e9      	b.n	8005cc8 <_strtoul_l.constprop.0+0x50>
 8005cf4:	2c2b      	cmp	r4, #43	@ 0x2b
 8005cf6:	bf04      	itt	eq
 8005cf8:	782c      	ldrbeq	r4, [r5, #0]
 8005cfa:	1c85      	addeq	r5, r0, #2
 8005cfc:	e7cd      	b.n	8005c9a <_strtoul_l.constprop.0+0x22>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1d8      	bne.n	8005cb4 <_strtoul_l.constprop.0+0x3c>
 8005d02:	2c30      	cmp	r4, #48	@ 0x30
 8005d04:	bf0c      	ite	eq
 8005d06:	2308      	moveq	r3, #8
 8005d08:	230a      	movne	r3, #10
 8005d0a:	e7d3      	b.n	8005cb4 <_strtoul_l.constprop.0+0x3c>
 8005d0c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005d10:	f1bc 0f19 	cmp.w	ip, #25
 8005d14:	d801      	bhi.n	8005d1a <_strtoul_l.constprop.0+0xa2>
 8005d16:	3c37      	subs	r4, #55	@ 0x37
 8005d18:	e7dc      	b.n	8005cd4 <_strtoul_l.constprop.0+0x5c>
 8005d1a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005d1e:	f1bc 0f19 	cmp.w	ip, #25
 8005d22:	d804      	bhi.n	8005d2e <_strtoul_l.constprop.0+0xb6>
 8005d24:	3c57      	subs	r4, #87	@ 0x57
 8005d26:	e7d5      	b.n	8005cd4 <_strtoul_l.constprop.0+0x5c>
 8005d28:	f04f 36ff 	mov.w	r6, #4294967295
 8005d2c:	e7df      	b.n	8005cee <_strtoul_l.constprop.0+0x76>
 8005d2e:	1c73      	adds	r3, r6, #1
 8005d30:	d106      	bne.n	8005d40 <_strtoul_l.constprop.0+0xc8>
 8005d32:	2322      	movs	r3, #34	@ 0x22
 8005d34:	4630      	mov	r0, r6
 8005d36:	f8ce 3000 	str.w	r3, [lr]
 8005d3a:	b932      	cbnz	r2, 8005d4a <_strtoul_l.constprop.0+0xd2>
 8005d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d40:	b107      	cbz	r7, 8005d44 <_strtoul_l.constprop.0+0xcc>
 8005d42:	4240      	negs	r0, r0
 8005d44:	2a00      	cmp	r2, #0
 8005d46:	d0f9      	beq.n	8005d3c <_strtoul_l.constprop.0+0xc4>
 8005d48:	b106      	cbz	r6, 8005d4c <_strtoul_l.constprop.0+0xd4>
 8005d4a:	1e69      	subs	r1, r5, #1
 8005d4c:	6011      	str	r1, [r2, #0]
 8005d4e:	e7f5      	b.n	8005d3c <_strtoul_l.constprop.0+0xc4>
 8005d50:	08005ec9 	.word	0x08005ec9

08005d54 <_strtoul_r>:
 8005d54:	f7ff bf90 	b.w	8005c78 <_strtoul_l.constprop.0>

08005d58 <_malloc_usable_size_r>:
 8005d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d5c:	1f18      	subs	r0, r3, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bfbc      	itt	lt
 8005d62:	580b      	ldrlt	r3, [r1, r0]
 8005d64:	18c0      	addlt	r0, r0, r3
 8005d66:	4770      	bx	lr

08005d68 <_init>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	bf00      	nop
 8005d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6e:	bc08      	pop	{r3}
 8005d70:	469e      	mov	lr, r3
 8005d72:	4770      	bx	lr

08005d74 <_fini>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr
